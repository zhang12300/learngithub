###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       30/Aug/2018  15:15:48
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\C\SD_C\diskio.c
#    Command line =  
#        -f C:\Users\Lenovo\AppData\Local\Temp\EW8C42.tmp
#        (C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\C\SD_C\diskio.c
#        -D IAR -D TWR_K60N512 --preprocess
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List
#        -lCN
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List
#        -lB
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List
#        -o
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\Component_H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\Frame_H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\Function_H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\SD_H\
#        -I D:\quartus\quartus\cusp\80\synthinclude\ -Ol --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List\diskio.lst
#    Object file  =  
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\Obj\diskio.o
#
###############################################################################

C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\C\SD_C\diskio.c
      1          /*-----------------------------------------------------------------------*/
      2          /* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2007        */
      3          /*-----------------------------------------------------------------------*/
      4          /* This is a stub disk I/O module that acts as front end of the existing */
      5          /* disk I/O modules and attach it to FatFs module with common interface. */
      6          /*-----------------------------------------------------------------------*/
      7          /*-----------------------------------------------------------------------*/
      8          /* Inidialize a Drive*/
      9          
     10          #include "diskio.h"
     11          #include "sd_driver.h"
     12          
     13          struct tm {
     14             	int tm_sec;   // 秒 seconds after the minute, 0 to 60
     15             	int tm_min;   // 分 minutes after the hour, 0 to 59
     16          	int tm_hour;  // 时 hours since midnight, 0 to 23*
     17          	int tm_mday;  // 日 day of the month, 1 to 31
     18          	int tm_mon;   // 月 months since January, 0 to 11
     19          	int tm_year;  // 年 years since 1900
     20          	int tm_wday;  // 星期 days since Sunday, 0 to 6
     21          	int tm_yday;  // 从元旦起的天数 days since January 1, 0 to 365
     22           	int tm_isdst; // 夏令时？？Daylight Savings Time flag
     23           	};
     24          

   \                                 In section .text, align 2, keep-with-next
     25          DSTATUS disk_initialize ( 
     26          BYTE drv				/* Physical drive nmuber (0..) */
     27          )
     28          {
   \                     disk_initialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     29              unsigned char state;
     30          
     31              if(drv)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??disk_initialize_0
     32              {
     33                  return STA_NOINIT;  //仅支持磁盘0的操作
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE00C             B.N      ??disk_initialize_1
     34              }
     35          
     36              state = SD_Init();  //初始化SD卡，SD_driver层
   \                     ??disk_initialize_0: (+1)
   \   0000000C   0x.... 0x....      BL       SD_Init
     37              if(state == STA_NODISK)
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD101             BNE.N    ??disk_initialize_2
     38              {
     39                  return STA_NODISK;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xE005             B.N      ??disk_initialize_1
     40              }
     41              else if(state != 0)
   \                     ??disk_initialize_2: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD001             BEQ.N    ??disk_initialize_3
     42              {
     43                  return STA_NOINIT;  //其他错误：初始化失败
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??disk_initialize_1
     44              }
     45              else
     46              {
     47                  return 0;           //初始化成功
   \                     ??disk_initialize_3: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??disk_initialize_1: (+1)
   \   00000026   0xBD02             POP      {R1,PC}          ;; return
     48              }
     49          }
     50          
     51          
     52          
     53          /*-----------------------------------------------------------------------*/
     54          /* Return Disk Status                                                    */
     55          

   \                                 In section .text, align 2, keep-with-next
     56          DSTATUS disk_status (
     57          	BYTE drv		/* Physical drive nmuber (0..) */
     58          )
     59          {
     60              if(drv)
   \                     disk_status: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD001             BEQ.N    ??disk_status_0
     61              {
     62                  return STA_NOINIT;  //仅支持磁盘0操作
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B.N      ??disk_status_1
     63              }
     64          
     65              //检查SD卡是否插入
     66          //    if(!SD_DET())
     67          //    {
     68          //        return STA_NODISK;
     69          //    }
     70              return 0;
   \                     ??disk_status_0: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??disk_status_1: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
     71          }
     72          
     73          
     74          
     75          /*-----------------------------------------------------------------------*/
     76          /* Read Sector(s)                                                        */
     77          

   \                                 In section .text, align 2, keep-with-next
     78          DRESULT disk_read (
     79          	BYTE drv,		/* Physical drive nmuber (0..) */
     80          	BYTE *buff,		/* Data buffer to store read data */
     81          	DWORD sector,	/* Sector address (LBA) */
     82          	BYTE count		/* Number of sectors to read (1..255) */
     83          )
     84          {
   \                     disk_read: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x001A             MOVS     R2,R3
     85          	unsigned char res=0;
   \   00000006   0x2300             MOVS     R3,#+0
     86              if (drv || !count) //不是0磁盘或者 Number of sectors 为0
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??disk_read_0
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD101             BNE.N    ??disk_read_1
     87              {    
     88                  return RES_PARERR;  //仅支持单磁盘操作，count不能等于0，否则返回参数错误
   \                     ??disk_read_0: (+1)
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0xE012             B.N      ??disk_read_2
     89              }
     90          
     91          //    if(!SD_DET())
     92          //    {
     93          //        return RES_NOTRDY;  //没有检测到SD卡，报NOT READY错误
     94          //    }
     95          
     96              if(count==1)            //1个sector的读操作      
   \                     ??disk_read_1: (+1)
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x2A01             CMP      R2,#+1
   \   0000001C   0xD104             BNE.N    ??disk_read_3
     97              {                                                
     98                  res = SD_ReadSingleBlock(sector, buff);      //SD_driver层
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       SD_ReadSingleBlock
   \   00000024   0x0003             MOVS     R3,R0
   \   00000026   0xE004             B.N      ??disk_read_4
     99              }                                                
    100              else                    //多个sector的读操作     
    101              {                                                
    102                  res = SD_ReadMultiBlock(sector, buff, count);
   \                     ??disk_read_3: (+1)
   \   00000028   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       SD_ReadMultiBlock
   \   00000030   0x0003             MOVS     R3,R0
    103              }                                                
    104          
    105              //处理返回值，将SD_driver.c的返回值转成ff.c的返回值
    106              if(res == 0x00)
   \                     ??disk_read_4: (+1)
   \   00000032   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000034   0x2B00             CMP      R3,#+0
   \   00000036   0xD101             BNE.N    ??disk_read_5
    107              {
    108                  return RES_OK;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE000             B.N      ??disk_read_2
    109              }
    110              else
    111              {
    112                  return RES_ERROR;
   \                     ??disk_read_5: (+1)
   \   0000003C   0x2001             MOVS     R0,#+1
   \                     ??disk_read_2: (+1)
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    113              }
    114          }
    115          
    116          
    117          
    118          /*-----------------------------------------------------------------------*/
    119          /* Write Sector(s)                                                       */
    120          
    121          #if _READONLY == 0

   \                                 In section .text, align 2, keep-with-next
    122          DRESULT disk_write (
    123          	BYTE drv,			/* Physical drive nmuber (0..) */
    124          	const BYTE *buff,	        /* Data to be written */
    125          	DWORD sector,		/* Sector address (LBA) */
    126          	BYTE count			/* Number of sectors to write (1..255) */
    127          )
    128          {
   \                     disk_write: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x001A             MOVS     R2,R3
    129          	unsigned char res;
    130          
    131              if (drv || !count)
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    ??disk_write_0
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD101             BNE.N    ??disk_write_1
    132              {    
    133                  return RES_PARERR;  //仅支持单磁盘操作，count不能等于0，否则返回参数错误
   \                     ??disk_write_0: (+1)
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0xE010             B.N      ??disk_write_2
    134              }
    135          
    136          //    if(!SD_DET())
    137          //    {
    138          //        return RES_NOTRDY;  //没有检测到SD卡，报NOT READY错误
    139          //    }
    140          
    141          
    142              // 读写操作
    143              if(count == 1)
   \                     ??disk_write_1: (+1)
   \   00000016   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   0x2A01             CMP      R2,#+1
   \   0000001A   0xD103             BNE.N    ??disk_write_3
    144              {
    145                  res = SD_WriteSingleBlock(sector, buff);
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       SD_WriteSingleBlock
   \   00000022   0xE003             B.N      ??disk_write_4
    146              }
    147              else
    148              {
    149                  res = SD_WriteMultiBlock(sector, buff, count);
   \                     ??disk_write_3: (+1)
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       SD_WriteMultiBlock
    150              }
    151              // 返回值转换
    152              if(res == 0)
   \                     ??disk_write_4: (+1)
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD101             BNE.N    ??disk_write_5
    153              {
    154                  return RES_OK;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE000             B.N      ??disk_write_2
    155              }
    156              else
    157              {
    158                  return RES_ERROR;
   \                     ??disk_write_5: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??disk_write_2: (+1)
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    159              }
    160          }
    161          #endif /* _READONLY */
    162          
    163          
    164          
    165          /*-----------------------------------------------------------------------*/
    166          /* Miscellaneous Functions                                               */
    167          

   \                                 In section .text, align 2, keep-with-next
    168          DRESULT disk_ioctl (
    169          	BYTE drv,		/* Physical drive nmuber (0..) */
    170          	BYTE ctrl,		/* Control code */
    171          	void *buff		/* Buffer to send/receive control data */
    172          )
    173          
    174          {
   \                     disk_ioctl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0014             MOVS     R4,R2
    175              DRESULT res;
    176          
    177          
    178              if (drv)
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD001             BEQ.N    ??disk_ioctl_0
    179              {    
    180                  return RES_PARERR;  //仅支持单磁盘操作，否则返回参数错误
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0xE02C             B.N      ??disk_ioctl_1
    181              }
    182              
    183              //FATFS目前版本仅需处理CTRL_SYNC，GET_SECTOR_COUNT，GET_BLOCK_SIZ三个命令
    184              switch(ctrl)
   \                     ??disk_ioctl_0: (+1)
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD005             BEQ.N    ??disk_ioctl_2
   \   00000014   0x2902             CMP      R1,#+2
   \   00000016   0xD01A             BEQ.N    ??disk_ioctl_3
   \   00000018   0xD31E             BCC.N    ??disk_ioctl_4
   \   0000001A   0x2903             CMP      R1,#+3
   \   0000001C   0xD012             BEQ.N    ??disk_ioctl_5
   \   0000001E   0xE020             B.N      ??disk_ioctl_6
    185              {
    186              case CTRL_SYNC:
    187                  SD_CS_ENABLE();
   \                     ??disk_ioctl_2: (+1)
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x210D             MOVS     R1,#+13
   \   00000024   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff000
   \   00000026   0x.... 0x....      BL       gpio_ctrl
    188                  if(SD_WaitReady()==0)
   \   0000002A   0x.... 0x....      BL       SD_WaitReady
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD101             BNE.N    ??disk_ioctl_7
    189                  {
    190                      res = RES_OK;
   \   00000032   0x2400             MOVS     R4,#+0
   \   00000034   0xE000             B.N      ??disk_ioctl_8
    191                  }
    192                  else
    193                  {
    194                      res = RES_ERROR;
   \                     ??disk_ioctl_7: (+1)
   \   00000036   0x2401             MOVS     R4,#+1
    195                  }
    196                  SD_CS_DISABLE();
   \                     ??disk_ioctl_8: (+1)
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x210D             MOVS     R1,#+13
   \   0000003C   0x....             LDR.N    R0,??DataTable2  ;; 0x400ff000
   \   0000003E   0x.... 0x....      BL       gpio_ctrl
    197                  break;
   \   00000042   0xE00F             B.N      ??disk_ioctl_9
    198                  
    199              case GET_BLOCK_SIZE:
    200                  *(DWORD*)buff = 512;
   \                     ??disk_ioctl_5: (+1)
   \   00000044   0xF44F 0x7000      MOV      R0,#+512
   \   00000048   0x6020             STR      R0,[R4, #+0]
    201                  res = RES_OK;
   \   0000004A   0x2400             MOVS     R4,#+0
    202                  break;
   \   0000004C   0xE00A             B.N      ??disk_ioctl_9
    203          
    204          
    205              case GET_SECTOR_SIZE:
    206                  *(WORD*)buff = 512;
   \                     ??disk_ioctl_3: (+1)
   \   0000004E   0xF44F 0x7000      MOV      R0,#+512
   \   00000052   0x8020             STRH     R0,[R4, #+0]
    207                  res = RES_OK;
   \   00000054   0x2400             MOVS     R4,#+0
    208                  break;
   \   00000056   0xE005             B.N      ??disk_ioctl_9
    209          
    210              case GET_SECTOR_COUNT:
    211                  *(DWORD*)buff = SD_GetCapacity();
   \                     ??disk_ioctl_4: (+1)
   \   00000058   0x.... 0x....      BL       SD_GetCapacity
   \   0000005C   0x6020             STR      R0,[R4, #+0]
    212                  res = RES_OK;
   \   0000005E   0x2400             MOVS     R4,#+0
    213                  break;
   \   00000060   0xE000             B.N      ??disk_ioctl_9
    214              default:
    215                  res = RES_PARERR;
   \                     ??disk_ioctl_6: (+1)
   \   00000062   0x2404             MOVS     R4,#+4
    216                  break;
    217              }
    218          
    219              return res;
   \                     ??disk_ioctl_9: (+1)
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??disk_ioctl_1: (+1)
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
    220          }
    221          
    222          
    223          /*-----------------------------------------------------------------------*/
    224          /* User defined function to give a current time to fatfs module      */
    225          /* 31-25: Year(0-127 org.1980), 24-21: Month(1-12), 20-16: Day(1-31) */
    226          /* 15-11: Hour(0-23), 10-5: Minute(0-59), 4-0: Second(0-29 *2) */ 
    227          

   \                                 In section .text, align 2, keep-with-next
    228          DWORD get_fattime (void)
    229          {
    230           /*   struct tm t;
    231              DWORD date;
    232              t.tm_year=2009-1980;		//年份改为1980年起
    233              t.tm_mon=8;         	//0-11月改为1-12月
    234          	t.tm_mday=3;
    235          	t.tm_hour=15;
    236          	t.tm_min=30;
    237              t.tm_sec=20;      	//将秒数改为0-29
    238          	date =t.tm_year;
    239          	date=date<<7;
    240          	date+=t.tm_mon;
    241          	date=date<<4;
    242          	date+=t.tm_mday;
    243          	date=date<<5;
    244          	date+=t.tm_hour;
    245          	date=date<<5;
    246          	date+=t.tm_min;
    247          	date=date<<5;
    248          	date+=t.tm_sec;
    249          	date=1950466004;
    250          */
    251              return 1950466005;
   \                     get_fattime: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_1  ;; 0x7441bfd5
   \   00000002   0x4770             BX       LR               ;; return
    252          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x7441BFD5         DC32     0x7441bfd5
    253          
    254          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   disk_initialize
         8   -> SD_Init
       8   disk_ioctl
         8   -> SD_GetCapacity
         8   -> SD_WaitReady
         8   -> gpio_ctrl
       8   disk_read
         8   -> SD_ReadMultiBlock
         8   -> SD_ReadSingleBlock
       0   disk_status
       8   disk_write
         8   -> SD_WriteMultiBlock
         8   -> SD_WriteSingleBlock
       0   get_fattime


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      40  disk_initialize
     106  disk_ioctl
      64  disk_read
      14  disk_status
      58  disk_write
       4  get_fattime

 
 294 bytes in section .text
 
 294 bytes of CODE memory

Errors: none
Warnings: 2
