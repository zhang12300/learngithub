###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        06/Feb/2018  21:44:18
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\gpio.c
#    Command line =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\gpio.c
#        -D IAR -D TWR_K60N512 -lCN
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -lB
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -o
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Component_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Frame_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Function_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\SD_H\ -Ol
#        --use_c++_inline
#    List file    =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\gpio.lst
#    Object file  =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\gpio.o
#
###############################################################################

D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\gpio.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: gpio.c                                                          *
      3          // 说  明: gpio驱动程序文件                                                *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "gpio.h"     //包含gpio头文件
      7          
      8          //-------------------------------------------------------------------------*
      9          //函数名: gpio_init                                                        *
     10          //功  能: 初始化gpio                                                       * 
     11          //参  数: port:端口名                                                      *
     12          //        index:指定端口引脚                                               *
     13          //        dir:引脚方向,0=输入,1=输出                                       * 
     14          //        data:初始状态,0=低电平,1=高电平                                  *
     15          //返  回: 无                                                               *
     16          //说  明: 无                                                               *
     17          //-------------------------------------------------------------------------*
     18          //============================本函数经过重大修改============================

   \                                 In section .text, align 2, keep-with-next
     19          void gpio_init (GPIO_MemMapPtr port, int index, int dir,int data)
     20          {
   \                     gpio_init: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     21               PORT_MemMapPtr p;
     22               switch((uint32)port)
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x....             LDR.N    R6,??DataTable0  ;; 0x400ff000
   \   00000006   0x1BAD             SUBS     R5,R5,R6
   \   00000008   0xD008             BEQ.N    ??gpio_init_0
   \   0000000A   0x3D40             SUBS     R5,R5,#+64
   \   0000000C   0xD008             BEQ.N    ??gpio_init_1
   \   0000000E   0x3D40             SUBS     R5,R5,#+64
   \   00000010   0xD008             BEQ.N    ??gpio_init_2
   \   00000012   0x3D40             SUBS     R5,R5,#+64
   \   00000014   0xD008             BEQ.N    ??gpio_init_3
   \   00000016   0x3D40             SUBS     R5,R5,#+64
   \   00000018   0xD008             BEQ.N    ??gpio_init_4
   \   0000001A   0xE009             B.N      ??gpio_init_5
     23               {
     24               case 0x400FF000u:
     25                   p = PORTA_BASE_PTR;
   \                     ??gpio_init_0: (+1)
   \   0000001C   0x....             LDR.N    R4,??DataTable0_1  ;; 0x40049000
     26                   break;
   \   0000001E   0xE007             B.N      ??gpio_init_6
     27               case 0x400FF040u:
     28                   p = PORTB_BASE_PTR;
   \                     ??gpio_init_1: (+1)
   \   00000020   0x....             LDR.N    R4,??DataTable0_2  ;; 0x4004a000
     29                   break;
   \   00000022   0xE005             B.N      ??gpio_init_6
     30               case 0x400FF080u:
     31                   p = PORTC_BASE_PTR;
   \                     ??gpio_init_2: (+1)
   \   00000024   0x....             LDR.N    R4,??DataTable0_3  ;; 0x4004b000
     32                   break;
   \   00000026   0xE003             B.N      ??gpio_init_6
     33               case 0x400FF0C0u:
     34                   p = PORTD_BASE_PTR;
   \                     ??gpio_init_3: (+1)
   \   00000028   0x....             LDR.N    R4,??DataTable0_4  ;; 0x4004c000
     35                   break;
   \   0000002A   0xE001             B.N      ??gpio_init_6
     36               case 0x400FF100u:
     37                   p = PORTE_BASE_PTR;
   \                     ??gpio_init_4: (+1)
   \   0000002C   0x....             LDR.N    R4,??DataTable0_5  ;; 0x4004d000
     38                   break;
   \   0000002E   0xE7FF             B.N      ??gpio_init_6
     39               default:
     40                   break;
     41               }
     42          //=========================此时有重大更改，原为=，后改为|=，之前一直在坑  --HJZ
     43               PORT_PCR_REG(p,index) |= (0|PORT_PCR_MUX(1));   
   \                     ??gpio_init_5: (+1)
   \                     ??gpio_init_6: (+1)
   \   00000030   0xF854 0x5021      LDR      R5,[R4, R1, LSL #+2]
   \   00000034   0xF455 0x7580      ORRS     R5,R5,#0x100
   \   00000038   0xF844 0x5021      STR      R5,[R4, R1, LSL #+2]
     44          
     45          
     46               if(dir == 1)//output
   \   0000003C   0x2A01             CMP      R2,#+1
   \   0000003E   0xD115             BNE.N    ??gpio_init_7
     47               {
     48              	 GPIO_PDDR_REG(port) |= (1<<index);
   \   00000040   0x6942             LDR      R2,[R0, #+20]
   \   00000042   0x2401             MOVS     R4,#+1
   \   00000044   0x408C             LSLS     R4,R4,R1
   \   00000046   0x4322             ORRS     R2,R4,R2
   \   00000048   0x6142             STR      R2,[R0, #+20]
     49              	 if(data == 1)//output
   \   0000004A   0x2B01             CMP      R3,#+1
   \   0000004C   0xD106             BNE.N    ??gpio_init_8
     50          			  GPIO_PDOR_REG(port) |= (1<<index);
   \   0000004E   0x6802             LDR      R2,[R0, #+0]
   \   00000050   0x2301             MOVS     R3,#+1
   \   00000052   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000056   0x4311             ORRS     R1,R1,R2
   \   00000058   0x6001             STR      R1,[R0, #+0]
   \   0000005A   0xE00E             B.N      ??gpio_init_9
     51          		 else
     52          			  GPIO_PDOR_REG(port) &= ~(1<<index);
   \                     ??gpio_init_8: (+1)
   \   0000005C   0x6802             LDR      R2,[R0, #+0]
   \   0000005E   0x2301             MOVS     R3,#+1
   \   00000060   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000064   0xEA32 0x0101      BICS     R1,R2,R1
   \   00000068   0x6001             STR      R1,[R0, #+0]
   \   0000006A   0xE006             B.N      ??gpio_init_9
     53               }
     54                   
     55               else
     56                   GPIO_PDDR_REG(port) &= ~(1<<index);
   \                     ??gpio_init_7: (+1)
   \   0000006C   0x6942             LDR      R2,[R0, #+20]
   \   0000006E   0x2301             MOVS     R3,#+1
   \   00000070   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000074   0xEA32 0x0101      BICS     R1,R2,R1
   \   00000078   0x6141             STR      R1,[R0, #+20]
     57          
     58          }
   \                     ??gpio_init_9: (+1)
   \   0000007A   0xBC70             POP      {R4-R6}
   \   0000007C   0x4770             BX       LR               ;; return
     59          
     60          //-------------------------------------------------------------------------* 
     61          //函数名: gpio_ctrl                                                        *
     62          //功  能: 设置引脚状态                                                     *
     63          //参  数: port:端口名                                                      *
     64          //        index:指定端口引脚                                               *
     65          //        data: 状态,0=低电平,1=高电平                                     *
     66          //返  回: 无                                                               *
     67          //说  明: 无                                                               *
     68          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     69          void gpio_ctrl (GPIO_MemMapPtr port, int index, int data)
     70          {
     71              if(data == 1)//output
   \                     gpio_ctrl: (+1)
   \   00000000   0x2A01             CMP      R2,#+1
   \   00000002   0xD106             BNE.N    ??gpio_ctrl_0
     72                   GPIO_PDOR_REG(port) |= (1<<index);
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000000C   0x4311             ORRS     R1,R1,R2
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   \   00000010   0xE006             B.N      ??gpio_ctrl_1
     73              else
     74                   GPIO_PDOR_REG(port) &= ~(1<<index);
   \                     ??gpio_ctrl_0: (+1)
   \   00000012   0x6802             LDR      R2,[R0, #+0]
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000001A   0xEA32 0x0101      BICS     R1,R2,R1
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     75          }
   \                     ??gpio_ctrl_1: (+1)
   \   00000020   0x4770             BX       LR               ;; return
     76          
     77          //-----------------------------------------------------------------------* 
     78          //函数名: gpio_reverse                                                   *
     79          //功  能: 改变引脚状态                                                   *
     80          //参  数: port:端口名;                                                   *
     81          //        index:指定端口引脚                                             *
     82          //返  回: 无                                                             *
     83          //说  明: 无                                                             *
     84          //-----------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     85          void gpio_reverse (GPIO_MemMapPtr port, int index)
     86          {
     87              GPIO_PDOR_REG(port) ^= (1<<index);
   \                     gpio_reverse: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000008   0x4051             EORS     R1,R1,R2
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     88          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x4004C000         DC32     0x4004c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x4004D000         DC32     0x4004d000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   gpio_ctrl
      12   gpio_init
       0   gpio_reverse


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
      34  gpio_ctrl
     126  gpio_init
      14  gpio_reverse

 
 198 bytes in section .text
 
 198 bytes of CODE memory

Errors: none
Warnings: none
