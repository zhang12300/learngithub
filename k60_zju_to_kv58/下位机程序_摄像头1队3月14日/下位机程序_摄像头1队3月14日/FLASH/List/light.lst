###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        06/Feb/2018  21:44:22
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\light.c
#    Command line =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\light.c
#        -D IAR -D TWR_K60N512 -lCN
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -lB
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -o
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Component_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Frame_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Function_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\SD_H\ -Ol
#        --use_c++_inline
#    List file    =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\light.lst
#    Object file  =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\light.o
#
###############################################################################

D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\light.c
      1          //-------------------------------------------------------------------------*
      2          // 文件名: light.c                                                         *
      3          // 说  明: 小灯驱动函数文件                                                *
      4          //-------------------------------------------------------------------------*
      5          
      6          #include "light.h"               //指示灯驱动程序头文件   
      7          
      8          //-------------------------------------------------------------------------*
      9          //函数名: light_init                                                       *
     10          //功  能: 初始化指示灯状态                                                 *
     11          //参  数: port:端口名                                                      *
     12          //        name:指定端口引脚号                                              *
     13          //        state:初始状态,1=高电平,0=低电平                                 *
     14          //返  回: 无                                                               *
     15          //说  明: 调用gpio_init函数                                                * 
     16          //-------------------------------------------------------------------------*

   \                                 In section .text, align 2, keep-with-next
     17          void light_init(GPIO_MemMapPtr port,int name,int state)
     18          {
   \                     light_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     19          	gpio_init(port,name,1,state);//初始化指示灯
   \   00000002   0x0013             MOVS     R3,R2
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x.... 0x....      BL       gpio_init
     20          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     21          
     22          //-------------------------------------------------------------------------* 
     23          //函数名: light_control                                                    *
     24          //功  能: 控制灯的亮和暗                                                   *
     25          //参  数: port:端口名                                                      *
     26          //        name:指定端口引脚号                                              *
     27          //        state:状态,1=高电平,0=低电平                                     *
     28          //返  回: 无                                                               *
     29          //说  明: 调用gpio_ctrl函数                                                * 
     30          //-------------------------------------------------------------------------*   

   \                                 In section .text, align 2, keep-with-next
     31          void light_control(GPIO_MemMapPtr port,int name,int state)
     32          {
   \                     light_control: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     33          	gpio_ctrl(port,name,state);   //控制引脚状态     
   \   00000002   0x.... 0x....      BL       gpio_ctrl
     34          } 
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     35          
     36          //-------------------------------------------------------------------------* 
     37          //函数名: light_change                                                     *
     38          //功  能: 状态切换:原来"暗",则变"亮";原来"亮",则变"暗"                     *
     39          //参  数: port:端口名                                                      *
     40          //        name:指定端口引脚号                                              *
     41          //返  回: 无                                                               *
     42          //说  明: 调用gpio_reverse函数                                             *
     43          //-------------------------------------------------------------------------*  

   \                                 In section .text, align 2, keep-with-next
     44          void light_change(GPIO_MemMapPtr port,int name)
     45          {
   \                     light_change: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     46          	gpio_reverse(port,name);
   \   00000002   0x.... 0x....      BL       gpio_reverse
     47          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   light_change
         8   -> gpio_reverse
       8   light_control
         8   -> gpio_ctrl
       8   light_init
         8   -> gpio_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  light_change
       8  light_control
      12  light_init

 
 28 bytes in section .text
 
 28 bytes of CODE memory

Errors: none
Warnings: none
