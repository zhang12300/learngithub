###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        06/Feb/2018  21:44:23
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\Pit.c
#    Command line =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\Pit.c -D
#        IAR -D TWR_K60N512 -lCN
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -lB
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -o
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Component_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Frame_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Function_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\SD_H\ -Ol
#        --use_c++_inline
#    List file    =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\Pit.lst
#    Object file  =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\Pit.o
#
###############################################################################

D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Component_C\Pit.c
      1          //文件名称：Pit.c
      2          //功能概要：K60 pit底层驱动程序文件
      3          //版权所有：JYB
      4          //版本更新：2013-12-16  V1.0  初始版本
      5          //==============================================================================   
      6          #include "Pit.h"
      7          
      8          /*==============================================================================
      9            周期定时器PIT说明：
     10            周期中断定时器模块PIT是一组可以用来产生中断和触发DMA通道的定时器
     11            共有PIT0~PIT3四个通道，对应的IRQ中断号为68~71
     12            PIT模块配置包括以下寄存器：
     13            1、PIT模块控制寄存器PIT_MCR
     14            2、定时器加载值寄存器PIT_LDVALn
     15            3、当前定时器值寄存器PIT_CVALn
     16            4、定时器控制寄存器PIT_TCTRLn
     17            5、定时器标志寄存器PIT_TFLGn
     18          
     19            若要使能PIT模块工作，要设置以下几个寄存器
     20            1、SIM_SCGC6开启门控之中
     21            2、PIT_MCR的MDIS=0，使能模块时钟（必须在其他设置完成之前使能）
     22          
     23            PIT模块是采用减法计时的，加载值存储在寄存器PIT_CVALn中，每当定时器递减计数至0，
     24            将产生一个脉冲触发标志位TIF。
     25          
     26            如果想在调试模式下禁止PIT模块，则需设置PIT_MCR中的FRZ=1。在软件开发中，允许开发
     27            者停止计时器，查看系统当前状态，然后继续操作。
     28          
     29            定时器值寄存器PIT_CVALn中的值时可以随时读取的
     30          
     31            若想开启定时器开始计数，则需设置PIT_TCTRL中的TEN=1
     32          
     33            关于PIT模块中断的设置，需要考虑以下两个寄存器
     34            1、PIT_TCTRL中的中断使能标志位TIE=1
     35            2、开启相应的IRQ中断号的通道中断
     36            此时，如果计数器计数到0，便会触发并置位中断标志位，进入中断。别忘了在中断服务
     37            函数中清零标志位。清零方法是向该位写入1。
     38          
     39            PIT模块的时钟源:periph_clk_khz
     40                                                                             -----By JYB
     41          ==============================================================================*/
     42          
     43          //==============================================================================
     44          //函数名称: pit_init                                                         
     45          //函数返回: 无                                          
     46          //参数说明: pitno:表示pit通道号。  
     47          //	        timeout:表示定时溢出开始递减的值,该PIT计数使用总线时钟          
     48          //功能概要: 初始化PIT        
     49          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
     50          void pit_init(uint8 pitno,uint32 timeout)
     51          {
     52            SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;              //使能PIT时钟
   \                     pit_init: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable2  ;; 0x4004803c
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0xF452 0x0200      ORRS     R2,R2,#0x800000
   \   00000008   0x....             LDR.N    R3,??DataTable2  ;; 0x4004803c
   \   0000000A   0x601A             STR      R2,[R3, #+0]
     53            PIT_MCR &= ~(PIT_MCR_MDIS_MASK);              //使能PIT模块时钟
   \   0000000C   0x....             LDR.N    R2,??DataTable2_1  ;; 0x40037000
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0xF032 0x0202      BICS     R2,R2,#0x2
   \   00000014   0x....             LDR.N    R3,??DataTable2_1  ;; 0x40037000
   \   00000016   0x601A             STR      R2,[R3, #+0]
     54            PIT_MCR |= PIT_MCR_FRZ_MASK;                  //调试模式下禁止
   \   00000018   0x....             LDR.N    R2,??DataTable2_1  ;; 0x40037000
   \   0000001A   0x6812             LDR      R2,[R2, #+0]
   \   0000001C   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   00000020   0x....             LDR.N    R3,??DataTable2_1  ;; 0x40037000
   \   00000022   0x601A             STR      R2,[R3, #+0]
     55            PIT_LDVAL(pitno) = timeout;                   //设置周期
   \   00000024   0x....             LDR.N    R2,??DataTable2_2  ;; 0x40037100
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x0103             LSLS     R3,R0,#+4
   \   0000002A   0x5099             STR      R1,[R3, R2]
     56            PIT_TCTRL(pitno) |= PIT_TCTRL_TEN_MASK;       //使能pit模块运行
   \   0000002C   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40037100
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000034   0x6889             LDR      R1,[R1, #+8]
   \   00000036   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000003A   0x....             LDR.N    R2,??DataTable2_2  ;; 0x40037100
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000042   0x6091             STR      R1,[R2, #+8]
     57            PIT_TCTRL(pitno) &= ~(PIT_TCTRL_TIE_MASK);    //关pit中断
   \   00000044   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40037100
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000004C   0x6889             LDR      R1,[R1, #+8]
   \   0000004E   0xF031 0x0102      BICS     R1,R1,#0x2
   \   00000052   0x....             LDR.N    R2,??DataTable2_2  ;; 0x40037100
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xEB12 0x1000      ADDS     R0,R2,R0, LSL #+4
   \   0000005A   0x6081             STR      R1,[R0, #+8]
     58          }
   \   0000005C   0x4770             BX       LR               ;; return
     59              
     60          //==============================================================================
     61          //函数名称: enable_pit_interrupt                                                     
     62          //函数返回: 无                                              
     63          //参数说明: pitno: 表示pit通道号      
     64          //功能概要: 开启PIT的IRQ中断                                                                                                     
     65          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
     66          void enable_pit_interrupt(uint8 pitno)
     67          {
   \                     enable_pit_interrupt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     68            PIT_TCTRL(pitno)|=(PIT_TCTRL_TIE_MASK); //开pit中断
   \   00000002   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40037100
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000000A   0x6889             LDR      R1,[R1, #+8]
   \   0000000C   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000010   0x....             LDR.N    R2,??DataTable2_2  ;; 0x40037100
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000018   0x6091             STR      R1,[R2, #+8]
     69            switch(pitno)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD005             BEQ.N    ??enable_pit_interrupt_0
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD00B             BEQ.N    ??enable_pit_interrupt_1
   \   00000024   0xD306             BCC.N    ??enable_pit_interrupt_2
   \   00000026   0x2803             CMP      R0,#+3
   \   00000028   0xD00C             BEQ.N    ??enable_pit_interrupt_3
   \   0000002A   0xE00E             B.N      ??enable_pit_interrupt_4
     70            {
     71              case 0:
     72              enable_irq(68);			      //开接收引脚的IRQ中断
   \                     ??enable_pit_interrupt_0: (+1)
   \   0000002C   0x2044             MOVS     R0,#+68
   \   0000002E   0x.... 0x....      BL       enable_irq
     73              break;
   \   00000032   0xE00A             B.N      ??enable_pit_interrupt_4
     74              case 1:
     75              enable_irq(69);			      //开接收引脚的IRQ中断
   \                     ??enable_pit_interrupt_2: (+1)
   \   00000034   0x2045             MOVS     R0,#+69
   \   00000036   0x.... 0x....      BL       enable_irq
     76              break;
   \   0000003A   0xE006             B.N      ??enable_pit_interrupt_4
     77              case 2:
     78              enable_irq(70);			      //开接收引脚的IRQ中断
   \                     ??enable_pit_interrupt_1: (+1)
   \   0000003C   0x2046             MOVS     R0,#+70
   \   0000003E   0x.... 0x....      BL       enable_irq
     79              break;
   \   00000042   0xE002             B.N      ??enable_pit_interrupt_4
     80              case 3:
     81              enable_irq(71);			      //开接收引脚的IRQ中断
   \                     ??enable_pit_interrupt_3: (+1)
   \   00000044   0x2047             MOVS     R0,#+71
   \   00000046   0x.... 0x....      BL       enable_irq
     82              break;
     83            }
     84          }
   \                     ??enable_pit_interrupt_4: (+1)
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
     85          
     86          //==============================================================================
     87          //函数名称: disable_pit_interrupt                                                     
     88          //函数返回: 无                                              
     89          //参数说明: pitno: 表示pit通道号      
     90          //功能概要: 关闭PIT的IRQ中断                                                                                               
     91          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
     92          void disable_pit_interrupt(uint8 pitno)
     93          {
   \                     disable_pit_interrupt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     94            PIT_TCTRL(pitno)&=~(PIT_TCTRL_TIE_MASK);  //关pit中断
   \   00000002   0x....             LDR.N    R1,??DataTable2_2  ;; 0x40037100
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000000A   0x6889             LDR      R1,[R1, #+8]
   \   0000000C   0xF031 0x0102      BICS     R1,R1,#0x2
   \   00000010   0x....             LDR.N    R2,??DataTable2_2  ;; 0x40037100
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000018   0x6091             STR      R1,[R2, #+8]
     95            switch(pitno)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD005             BEQ.N    ??disable_pit_interrupt_0
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD00B             BEQ.N    ??disable_pit_interrupt_1
   \   00000024   0xD306             BCC.N    ??disable_pit_interrupt_2
   \   00000026   0x2803             CMP      R0,#+3
   \   00000028   0xD00C             BEQ.N    ??disable_pit_interrupt_3
   \   0000002A   0xE00E             B.N      ??disable_pit_interrupt_4
     96            {
     97              case 0:
     98              disable_irq(68);	        //关接收引脚的IRQ中断
   \                     ??disable_pit_interrupt_0: (+1)
   \   0000002C   0x2044             MOVS     R0,#+68
   \   0000002E   0x.... 0x....      BL       disable_irq
     99              break;
   \   00000032   0xE00A             B.N      ??disable_pit_interrupt_4
    100              case 1:
    101              disable_irq(69);		      //关接收引脚的IRQ中断
   \                     ??disable_pit_interrupt_2: (+1)
   \   00000034   0x2045             MOVS     R0,#+69
   \   00000036   0x.... 0x....      BL       disable_irq
    102              break;
   \   0000003A   0xE006             B.N      ??disable_pit_interrupt_4
    103              case 2:
    104              disable_irq(70);		      //关接收引脚的IRQ中断
   \                     ??disable_pit_interrupt_1: (+1)
   \   0000003C   0x2046             MOVS     R0,#+70
   \   0000003E   0x.... 0x....      BL       disable_irq
    105              break;
   \   00000042   0xE002             B.N      ??disable_pit_interrupt_4
    106              case 3:
    107              disable_irq(71);		      //关接收引脚的IRQ中断
   \                     ??disable_pit_interrupt_3: (+1)
   \   00000044   0x2047             MOVS     R0,#+71
   \   00000046   0x.... 0x....      BL       disable_irq
    108              break;
    109            }
    110          }
   \                     ??disable_pit_interrupt_4: (+1)
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40037100         DC32     0x40037100

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   disable_pit_interrupt
         8   -> disable_irq
       8   enable_pit_interrupt
         8   -> enable_irq
       0   pit_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      76  disable_pit_interrupt
      76  enable_pit_interrupt
      94  pit_init

 
 258 bytes in section .text
 
 258 bytes of CODE memory

Errors: none
Warnings: none
