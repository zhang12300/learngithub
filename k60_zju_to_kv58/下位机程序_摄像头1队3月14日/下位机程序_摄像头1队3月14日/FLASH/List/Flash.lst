###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.5.7591/W32 for ARM        06/Feb/2018  21:44:16
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Function_C\Flash.c
#    Command line =  
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Function_C\Flash.c
#        -D IAR -D TWR_K60N512 -lCN
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -lB
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\ -o
#        D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Component_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Frame_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\Function_H\ -I
#        D:\智能车\程序\下位机程序_摄像头1队\src\Sources\H\SD_H\ -Ol
#        --use_c++_inline
#    List file    =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\List\Flash.lst
#    Object file  =  D:\智能车\程序\下位机程序_摄像头1队\FLASH\Obj\Flash.o
#
###############################################################################

D:\智能车\程序\下位机程序_摄像头1队\src\Sources\C\Function_C\Flash.c
      1          //==============================================================================
      2          //文件名称：Flash.c
      3          //功能概要：K60 Flash擦除/写入底层驱动程序源文件
      4          //==============================================================================
      5          #include "Flash.h" 
      6          
      7          //=======================内部调用函数声明=======================================
      8          //==============================================================================
      9          //函数名称：hw_flash_sign_off
     10          //函数返回：无
     11          //参数说明：无
     12          //功能概要：配置Flash存储控制器，清除Flash预读取缓冲
     13          //==============================================================================
     14          static void hw_flash_sign_off(void);
     15          
     16          //==============================================================================
     17          //函数名称：hw_flash_cmd_launch
     18          //函数返回：0-成功 1-失败
     19          //参数说明：无
     20          //功能概要：启动Flash命令
     21          //==============================================================================
     22          static uint32 hw_flash_cmd_launch(void);
     23          
     24          //==============================================================================
     25          
     26          //=================外部接口函数=================================================
     27          //==============================================================================
     28          //函数名称：FlashInit
     29          //函数返回：无
     30          //参数说明：无
     31          //功能概要：初始化Flash模块
     32          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
     33          void FlashInit(void)
     34          {
   \                     FlashInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     35            //清除FMC缓冲区
     36            hw_flash_sign_off();
   \   00000002   0x.... 0x....      BL       hw_flash_sign_off
     37              
     38            //禁止看门狗
     39            WDOG_UNLOCK = 0xC520;
   \   00000006   0xF24C 0x5020      MOVW     R0,#+50464
   \   0000000A   0x....             LDR.N    R1,??DataTable4  ;; 0x4005200e
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
     40            WDOG_UNLOCK = 0xD928;
   \   0000000E   0xF64D 0x1028      MOVW     R0,#+55592
   \   00000012   0x....             LDR.N    R1,??DataTable4  ;; 0x4005200e
   \   00000014   0x8008             STRH     R0,[R1, #+0]
     41            WDOG_STCTRLH = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40052000
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
     42              
     43            //等待命令完成
     44            while(!(FTFL_FSTAT & CCIF));
   \                     ??FlashInit_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40020000
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x0600             LSLS     R0,R0,#+24
   \   00000022   0xD5FB             BPL.N    ??FlashInit_0
     45              
     46            //清除访问出错标志位
     47            FTFL_FSTAT = ACCERR | FPVIOL;
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40020000
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     48          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
     49          
     50          //==============================================================================
     51          //函数名称：FlashEraseSector
     52          //函数返回：函数执行执行状态：0=正常；非0=异常。
     53          //参数说明：sectorNo：扇区号（K60N512实际使用0~255）
     54          //功能概要：擦除指定flash扇区
     55          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
     56          uint8 FlashEraseSector(uint16 sectorNo)
     57          {
   \                     FlashEraseSector: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     58            union
     59            {
     60              uint32  word;
     61              uint8   byte[4];
     62            }dest;
     63              
     64            dest.word = (uint32)(sectorNo*(1<<11));
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0xF44F 0x6100      MOV      R1,#+2048
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
     65          
     66            //设置擦除命令
     67            FTFL_FCCOB0 = ERSSCR;   //lyx: ERSSCR: 0x09 擦除Flash扇区
   \   0000000C   0x2009             MOVS     R0,#+9
   \   0000000E   0x....             LDR.N    R1,??DataTable4_3  ;; 0x40020007
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     68              
     69            //设置目标地址
     70            FTFL_FCCOB1 = dest.byte[2];
   \   00000012   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000016   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40020006
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     71            FTFL_FCCOB2 = dest.byte[1];
   \   0000001A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001E   0x....             LDR.N    R1,??DataTable4_5  ;; 0x40020005
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     72            FTFL_FCCOB3 = dest.byte[0];
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable4_6  ;; 0x40020004
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     73              
     74            //执行命令序列
     75            if(1 == hw_flash_cmd_launch())    //若执行命令出现错误
   \   0000002A   0x.... 0x....      BL       hw_flash_cmd_launch
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD101             BNE.N    ??FlashEraseSector_0
     76              return 1;     //擦除命令错误
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE022             B.N      ??FlashEraseSector_1
     77             
     78            //若擦除sector0时，则解锁设备
     79            if(dest.word <= 0x800)
   \                     ??FlashEraseSector_0: (+1)
   \   00000036   0x9800             LDR      R0,[SP, #+0]
   \   00000038   0xF5B0 0x6F00      CMP      R0,#+2048
   \   0000003C   0xD81D             BHI.N    ??FlashEraseSector_2
     80            {
     81              //写入4字节
     82              FTFL_FCCOB0 = PGM4; 
   \   0000003E   0x2006             MOVS     R0,#+6
   \   00000040   0x....             LDR.N    R1,??DataTable4_3  ;; 0x40020007
   \   00000042   0x7008             STRB     R0,[R1, #+0]
     83              //设置目标地址
     84              FTFL_FCCOB1 = 0x00;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40020006
   \   00000048   0x7008             STRB     R0,[R1, #+0]
     85              FTFL_FCCOB2 = 0x04;
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x....             LDR.N    R1,??DataTable4_5  ;; 0x40020005
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
     86              FTFL_FCCOB3 = 0x0C;
   \   00000050   0x200C             MOVS     R0,#+12
   \   00000052   0x....             LDR.N    R1,??DataTable4_6  ;; 0x40020004
   \   00000054   0x7008             STRB     R0,[R1, #+0]
     87              //数据
     88              FTFL_FCCOB4 = 0xFF;
   \   00000056   0x20FF             MOVS     R0,#+255
   \   00000058   0x....             LDR.N    R1,??DataTable4_7  ;; 0x4002000b
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
     89              FTFL_FCCOB5 = 0xFF;
   \   0000005C   0x20FF             MOVS     R0,#+255
   \   0000005E   0x....             LDR.N    R1,??DataTable4_8  ;; 0x4002000a
   \   00000060   0x7008             STRB     R0,[R1, #+0]
     90              FTFL_FCCOB6 = 0xFF;
   \   00000062   0x20FF             MOVS     R0,#+255
   \   00000064   0x....             LDR.N    R1,??DataTable4_9  ;; 0x40020009
   \   00000066   0x7008             STRB     R0,[R1, #+0]
     91              FTFL_FCCOB7 = 0xFE;
   \   00000068   0x20FE             MOVS     R0,#+254
   \   0000006A   0x....             LDR.N    R1,??DataTable4_10  ;; 0x40020008
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
     92              //执行命令序列
     93              if(1 == hw_flash_cmd_launch())  //若执行命令出现错误
   \   0000006E   0x.... 0x....      BL       hw_flash_cmd_launch
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD101             BNE.N    ??FlashEraseSector_2
     94                return 2;   //解锁命令错误
   \   00000076   0x2002             MOVS     R0,#+2
   \   00000078   0xE000             B.N      ??FlashEraseSector_1
     95              }  
     96              
     97              return 0;  //成功返回
   \                     ??FlashEraseSector_2: (+1)
   \   0000007A   0x2000             MOVS     R0,#+0
   \                     ??FlashEraseSector_1: (+1)
   \   0000007C   0xBD02             POP      {R1,PC}          ;; return
     98          }
     99          
    100          //==============================================================================
    101          //函数名称：FlashWrite
    102          //函数返回：函数执行状态：0=正常；非0=异常。
    103          //参数说明：sectNo：目标扇区号 （K60N512实际使用0~255）
    104          //          offset:写入扇区内部偏移地址（0~2043）
    105          //          cnt：写入字节数目（0~2043）
    106          //          buf：源数据缓冲区首地址
    107          //功能概要：flash写入操作
    108          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
    109          uint8 FlashWrite(uint16 sectNo,uint16 offset,uint16 cnt,uint8 buf[])
    110          {
   \                     FlashWrite: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0014             MOVS     R4,R2
   \   00000006   0x001D             MOVS     R5,R3
    111            uint32 size;
    112            uint32 destaddr;
    113              
    114            union
    115            {
    116              uint32   word;
    117              uint8_t  byte[4];
    118            }dest;
    119              
    120            if(offset%4 != 0)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x2204             MOVS     R2,#+4
   \   0000000C   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000010   0xFB03 0x1312      MLS      R3,R3,R2,R1
   \   00000014   0x2B00             CMP      R3,#+0
   \   00000016   0xD001             BEQ.N    ??FlashWrite_0
    121              return 1;   //参数设定错误，偏移量未对齐（4字节对齐）
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE032             B.N      ??FlashWrite_1
    122              
    123            //设置写入命令
    124            FTFL_FCCOB0 = PGM4;
   \                     ??FlashWrite_0: (+1)
   \   0000001C   0x2206             MOVS     R2,#+6
   \   0000001E   0x....             LDR.N    R3,??DataTable4_3  ;; 0x40020007
   \   00000020   0x701A             STRB     R2,[R3, #+0]
    125            destaddr = (uint32)(sectNo*(1<<11) + offset);//计算地址
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0xF44F 0x6200      MOV      R2,#+2048
   \   00000028   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002A   0xFB02 0x1000      MLA      R0,R2,R0,R1
    126            dest.word = destaddr;
   \   0000002E   0x9000             STR      R0,[SP, #+0]
    127            for(size=0; size<cnt; size+=4, dest.word+=4, buf+=4)
   \   00000030   0x2600             MOVS     R6,#+0
   \   00000032   0xE004             B.N      ??FlashWrite_2
   \                     ??FlashWrite_3: (+1)
   \   00000034   0x1D36             ADDS     R6,R6,#+4
   \   00000036   0x9800             LDR      R0,[SP, #+0]
   \   00000038   0x1D00             ADDS     R0,R0,#+4
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x1D2D             ADDS     R5,R5,#+4
   \                     ??FlashWrite_2: (+1)
   \   0000003E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000040   0x42A6             CMP      R6,R4
   \   00000042   0xD21D             BCS.N    ??FlashWrite_4
    128            {
    129              //设置目标地址
    130              FTFL_FCCOB1 = dest.byte[2];
   \   00000044   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000048   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40020006
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
    131              FTFL_FCCOB2 = dest.byte[1];
   \   0000004C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000050   0x....             LDR.N    R1,??DataTable4_5  ;; 0x40020005
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    132              FTFL_FCCOB3 = dest.byte[0];
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0x....             LDR.N    R1,??DataTable4_6  ;; 0x40020004
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    133           
    134              //拷贝数据
    135              FTFL_FCCOB4 = buf[3];
   \   0000005C   0x78E8             LDRB     R0,[R5, #+3]
   \   0000005E   0x....             LDR.N    R1,??DataTable4_7  ;; 0x4002000b
   \   00000060   0x7008             STRB     R0,[R1, #+0]
    136              FTFL_FCCOB5 = buf[2];
   \   00000062   0x78A8             LDRB     R0,[R5, #+2]
   \   00000064   0x....             LDR.N    R1,??DataTable4_8  ;; 0x4002000a
   \   00000066   0x7008             STRB     R0,[R1, #+0]
    137              FTFL_FCCOB6 = buf[1];
   \   00000068   0x7868             LDRB     R0,[R5, #+1]
   \   0000006A   0x....             LDR.N    R1,??DataTable4_9  ;; 0x40020009
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
    138              FTFL_FCCOB7 = buf[0];
   \   0000006E   0x7828             LDRB     R0,[R5, #+0]
   \   00000070   0x....             LDR.N    R1,??DataTable4_10  ;; 0x40020008
   \   00000072   0x7008             STRB     R0,[R1, #+0]
    139                  
    140              if(1 == hw_flash_cmd_launch()) 
   \   00000074   0x.... 0x....      BL       hw_flash_cmd_launch
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xD1DB             BNE.N    ??FlashWrite_3
    141                return 2;  //写入命令错误
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0xE000             B.N      ??FlashWrite_1
    142            }
    143            return 0;  //成功执行
   \                     ??FlashWrite_4: (+1)
   \   00000080   0x2000             MOVS     R0,#+0
   \                     ??FlashWrite_1: (+1)
   \   00000082   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    144          }
    145          
    146          //========================内部函数实现==========================================
    147          //==============================================================================
    148          //函数名称：hw_flash_sign_off
    149          //函数返回：无
    150          //参数说明：无
    151          //功能概要：配置Flash存储控制器，清除Flash预读取缓冲
    152          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
    153          void hw_flash_sign_off(void)
    154          {  
    155            //清除缓冲
    156            FMC_PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
   \                     hw_flash_sign_off: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_11  ;; 0x4001f004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000008   0x....             LDR.N    R1,??DataTable4_11  ;; 0x4001f004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    157            FMC_PFB1CR |= FMC_PFB0CR_S_B_INV_MASK;
   \   0000000C   0x....             LDR.N    R0,??DataTable4_12  ;; 0x4001f008
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000014   0x....             LDR.N    R1,??DataTable4_12  ;; 0x4001f008
   \   00000016   0x6008             STR      R0,[R1, #+0]
    158          }
   \   00000018   0x4770             BX       LR               ;; return
    159          
    160          //==============================================================================
    161          //函数名称：hw_flash_cmd_launch
    162          //函数返回：0-成功 1-失败
    163          //参数说明：无
    164          //功能概要：启动Flash命令
    165          //==============================================================================

   \                                 In section .text, align 2, keep-with-next
    166          static uint32 hw_flash_cmd_launch(void)
    167          {
    168            //清除访问错误标志位和非法访问标志位
    169            FTFL_FSTAT = ACCERR | FPVIOL;           //lyx: ACCERR:flash访问错误标志位
   \                     hw_flash_cmd_launch: (+1)
   \   00000000   0x2030             MOVS     R0,#+48
   \   00000002   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40020000
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    170                                                    //lyx: FPVIOL:flash非法访问保护标志位
    171            //启动命令
    172            FTFL_FSTAT = CCIF;                      //lyx: CCIF:指令完成中断标志位
   \   00000006   0x2080             MOVS     R0,#+128
   \   00000008   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40020000
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    173          
    174            //等待命令结束
    175            while(!(FTFL_FSTAT & CCIF));
   \                     ??hw_flash_cmd_launch_0: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40020000
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x0600             LSLS     R0,R0,#+24
   \   00000012   0xD5FB             BPL.N    ??hw_flash_cmd_launch_0
    176          
    177            //检查错误标志
    178            if(FTFL_FSTAT & (ACCERR | FPVIOL | MGSTAT0))
   \   00000014   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40020000
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2131             MOVS     R1,#+49
   \   0000001A   0x4208             TST      R0,R1
   \   0000001C   0xD001             BEQ.N    ??hw_flash_cmd_launch_1
    179              return 1 ; //执行命令出错
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE000             B.N      ??hw_flash_cmd_launch_2
    180            
    181            return 0; //执行命令成功
   \                     ??hw_flash_cmd_launch_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \                     ??hw_flash_cmd_launch_2: (+1)
   \   00000024   0x4770             BX       LR               ;; return
    182          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4005200E         DC32     0x4005200e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40052000         DC32     0x40052000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40020007         DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40020006         DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40020005         DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x4002000B         DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x4002000A         DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x40020009         DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x4001F004         DC32     0x4001f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x4001F008         DC32     0x4001f008
    183          //==============================================================================
    184          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FlashEraseSector
         8   -> hw_flash_cmd_launch
       8   FlashInit
         8   -> hw_flash_sign_off
      24   FlashWrite
        24   -> hw_flash_cmd_launch
       0   hw_flash_cmd_launch
       0   hw_flash_sign_off


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     126  FlashEraseSector
      44  FlashInit
     132  FlashWrite
      38  hw_flash_cmd_launch
      26  hw_flash_sign_off

 
 418 bytes in section .text
 
 418 bytes of CODE memory

Errors: none
Warnings: none
