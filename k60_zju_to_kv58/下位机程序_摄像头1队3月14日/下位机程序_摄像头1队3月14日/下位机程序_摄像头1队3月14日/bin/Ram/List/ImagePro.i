#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\C\\Function_C\\ImagePro.c"
 






 
 

#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"


 






 
 








#line 1 "D:\\quartus\\quartus\\cusp\\80\\synthinclude\\stdio.h"












#include <stdarg.h>

typedef unsigned int size_t;
typedef struct __FILE { } FILE;
typedef int fpos_t;

#line 26 "D:\\quartus\\quartus\\cusp\\80\\synthinclude\\stdio.h"





#line 40 "D:\\quartus\\quartus\\cusp\\80\\synthinclude\\stdio.h"

extern FILE * stdin, * stdout, * stderr;

int remove(const char *filename);
int rename(const char *old, const char *newname);
FILE *tmpfile(void);
char *tmpnam(char *s);
int fclose(FILE *stream);
int fflush(FILE *stream);
FILE *fopen(const char * __restrict__ filename, const char * __restrict__ mode);
FILE *freopen(const char * __restrict__ filename, const char * __restrict__ mode, FILE * __restrict__ stream);
void setbuf(FILE * __restrict__ stream, char * __restrict__ buf);
int setvbuf(FILE * __restrict__ stream, char * __restrict__ buf, int mode, size_t size);
int fprintf(FILE * __restrict__ stream, const char * __restrict__ format, ...);
int fscanf(FILE * __restrict__ stream, const char * __restrict__ format, ...);
int printf(const char * __restrict__ format, ...) __attribute((cusp_synth(ignore)));
int scanf(const char * __restrict__ format, ...);
int snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
int sprintf(char * __restrict__ s, const char * __restrict__ format, ...);
int sscanf(const char * __restrict__ s, const char * __restrict__ format, ...);
int vfprintf(FILE * __restrict__ stream, const char * __restrict__ format, va_list arg);
int vfscanf(FILE * __restrict__ stream, const char * __restrict__ format, va_list arg);
int vprintf(const char * __restrict__ format, va_list arg);
int vscanf(const char * __restrict__ format, va_list arg);
int vsnprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, va_list arg);
int vsprintf(char * __restrict__ s, const char * __restrict__ format, va_list arg);
int vsscanf(const char * __restrict__ s, const char * __restrict__ format, va_list arg);
int fgetc(FILE *stream);
char *fgets(char * __restrict__ s, int n, FILE * __restrict__ stream);
int fputc(int c, FILE *stream);
int fputs(const char * __restrict__ s, FILE * __restrict__ stream);
int getc(FILE *stream);
int getchar(void);
char *gets(char *s);
int putc(int c, FILE *stream);
int putchar(int c);
int puts(const char *s);
int ungetc(int c, FILE *stream);
size_t fread(void * __restrict__ ptr, size_t size, size_t nmemb, FILE * __restrict__ stream);
size_t fwrite(const void * __restrict__ ptr, size_t size, size_t nmemb, FILE * __restrict__ stream);
int fgetpos(FILE * __restrict__ stream, fpos_t * __restrict__ pos);
int fseek(FILE *stream, long int offset, int whence);
int fsetpos(FILE *stream, const fpos_t *pos);
long int ftell(FILE *stream);
void rewind(FILE *stream);
void clearerr(FILE *stream);
int feof(FILE *stream);
int ferror(FILE *stream);
void perror(const char *s);





#line 21 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\common.h"








    
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

















































































 

 
 
 
 

 




 

 



 





#line 1 "D:\\quartus\\quartus\\cusp\\80\\synthinclude\\stdint.h"












typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef short              int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned short     uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef int intptr_t;
typedef unsigned int uintptr_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;


































#line 107 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 








 




 

 
 

 
typedef enum {
  INT_Initial_Stack_Pointer    = 0,                 
  INT_Initial_Program_Counter  = 1,                 
  INT_NMI                      = 2,                 
  INT_Hard_Fault               = 3,                 
  INT_Reserved4                = 4,                 
  INT_Bus_Fault                = 5,                 
  INT_Usage_Fault              = 6,                 
  INT_Reserved7                = 7,                 
  INT_Reserved8                = 8,                 
  INT_Reserved9                = 9,                 
  INT_Reserved10               = 10,                
  INT_SVCall                   = 11,                
  INT_DebugMonitor             = 12,                
  INT_Reserved13               = 13,                
  INT_PendableSrvReq           = 14,                
  INT_SysTick                  = 15,                
  INT_DMA0                     = 16,                
  INT_DMA1                     = 17,                
  INT_DMA2                     = 18,                
  INT_DMA3                     = 19,                
  INT_DMA4                     = 20,                
  INT_DMA5                     = 21,                
  INT_DMA6                     = 22,                
  INT_DMA7                     = 23,                
  INT_DMA8                     = 24,                
  INT_DMA9                     = 25,                
  INT_DMA10                    = 26,                
  INT_DMA11                    = 27,                
  INT_DMA12                    = 28,                
  INT_DMA13                    = 29,                
  INT_DMA14                    = 30,                
  INT_DMA15                    = 31,                
  INT_DMA_Error                = 32,                
  INT_MCM                      = 33,                
  INT_FTFL                     = 34,                
  INT_Read_Collision           = 35,                
  INT_LVD_LVW                  = 36,                
  INT_LLW                      = 37,                
  INT_Watchdog                 = 38,                
  INT_RNG                      = 39,                
  INT_I2C0                     = 40,                
  INT_I2C1                     = 41,                
  INT_SPI0                     = 42,                
  INT_SPI1                     = 43,                
  INT_SPI2                     = 44,                
  INT_CAN0_ORed_Message_buffer = 45,                
  INT_CAN0_Bus_Off             = 46,                
  INT_CAN0_Error               = 47,                
  INT_CAN0_Tx_Warning          = 48,                
  INT_CAN0_Rx_Warning          = 49,                
  INT_CAN0_Wake_Up             = 50,                
  INT_Reserved51               = 51,                
  INT_Reserved52               = 52,                
  INT_CAN1_ORed_Message_buffer = 53,                
  INT_CAN1_Bus_Off             = 54,                
  INT_CAN1_Error               = 55,                
  INT_CAN1_Tx_Warning          = 56,                
  INT_CAN1_Rx_Warning          = 57,                
  INT_CAN1_Wake_Up             = 58,                
  INT_Reserved59               = 59,                
  INT_Reserved60               = 60,                
  INT_UART0_RX_TX              = 61,                
  INT_UART0_ERR                = 62,                
  INT_UART1_RX_TX              = 63,                
  INT_UART1_ERR                = 64,                
  INT_UART2_RX_TX              = 65,                
  INT_UART2_ERR                = 66,                
  INT_UART3_RX_TX              = 67,                
  INT_UART3_ERR                = 68,                
  INT_UART4_RX_TX              = 69,                
  INT_UART4_ERR                = 70,                
  INT_UART5_RX_TX              = 71,                
  INT_UART5_ERR                = 72,                
  INT_ADC0                     = 73,                
  INT_ADC1                     = 74,                
  INT_CMP0                     = 75,                
  INT_CMP1                     = 76,                
  INT_CMP2                     = 77,                
  INT_FTM0                     = 78,                
  INT_FTM1                     = 79,                
  INT_FTM2                     = 80,                
  INT_CMT                      = 81,                
  INT_RTC                      = 82,                
  INT_Reserved83               = 83,                
  INT_PIT0                     = 84,                
  INT_PIT1                     = 85,                
  INT_PIT2                     = 86,                
  INT_PIT3                     = 87,                
  INT_PDB0                     = 88,                
  INT_USB0                     = 89,                
  INT_USBDCD                   = 90,                
  INT_ENET_1588_Timer          = 91,                
  INT_ENET_Transmit            = 92,                
  INT_ENET_Receive             = 93,                
  INT_ENET_Error               = 94,                
  INT_I2S0                     = 95,                
  INT_SDHC                     = 96,                
  INT_DAC0                     = 97,                
  INT_DAC1                     = 98,                
  INT_TSI0                     = 99,                
  INT_MCG                      = 100,               
  INT_LPTimer                  = 101,               
  INT_Reserved102              = 102,               
  INT_PORTA                    = 103,               
  INT_PORTB                    = 104,               
  INT_PORTC                    = 105,               
  INT_PORTD                    = 106,               
  INT_PORTE                    = 107,               
  INT_Reserved108              = 108,               
  INT_Reserved109              = 109,               
  INT_Reserved110              = 110,               
  INT_Reserved111              = 111,               
  INT_Reserved112              = 112,               
  INT_Reserved113              = 113,               
  INT_Reserved114              = 114,               
  INT_Reserved115              = 115,               
  INT_Reserved116              = 116,               
  INT_Reserved117              = 117,               
  INT_Reserved118              = 118,               
  INT_Reserved119              = 119                
} IRQInterruptIndex;

   




 

 
 




 





  #pragma language=extended






 

 
 

 
typedef struct ADC_MemMap {
  uint32_t SC1[2];                                  
  uint32_t CFG1;                                    
  uint32_t CFG2;                                    
  uint32_t R[2];                                    
  uint32_t CV1;                                     
  uint32_t CV2;                                     
  uint32_t SC2;                                     
  uint32_t SC3;                                     
  uint32_t OFS;                                     
  uint32_t PG;                                      
  uint32_t MG;                                      
  uint32_t CLPD;                                    
  uint32_t CLPS;                                    
  uint32_t CLP4;                                    
  uint32_t CLP3;                                    
  uint32_t CLP2;                                    
  uint32_t CLP1;                                    
  uint32_t CLP0;                                    
  uint32_t PGA;                                     
  uint32_t CLMD;                                    
  uint32_t CLMS;                                    
  uint32_t CLM4;                                    
  uint32_t CLM3;                                    
  uint32_t CLM2;                                    
  uint32_t CLM1;                                    
  uint32_t CLM0;                                    
} volatile *ADC_MemMapPtr;



 

 
 


 
#line 347 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 368 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 382 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 392 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 
#line 420 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 432 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 



 



 



 



 



 



 





 



 



 



 



 



 



 




   


 
 

 




 

 
 


 
 
#line 554 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 583 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 





   


   




 

 
 

 
typedef struct AIPS_MemMap {
  uint32_t MPRA;                                    
  uint8_t RESERVED_0[28];
  uint32_t PACRA;                                   
  uint32_t PACRB;                                   
  uint32_t PACRC;                                   
  uint32_t PACRD;                                   
  uint8_t RESERVED_1[16];
  uint32_t PACRE;                                   
  uint32_t PACRF;                                   
  uint32_t PACRG;                                   
  uint32_t PACRH;                                   
  uint32_t PACRI;                                   
  uint32_t PACRJ;                                   
  uint32_t PACRK;                                   
  uint32_t PACRL;                                   
  uint32_t PACRM;                                   
  uint32_t PACRN;                                   
  uint32_t PACRO;                                   
  uint32_t PACRP;                                   
} volatile *AIPS_MemMapPtr;



 

 
 


 
#line 652 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 700 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 749 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 798 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 847 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 896 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 945 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 994 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1043 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1092 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1141 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1190 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1239 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1288 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1337 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1386 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1435 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1484 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 

 




 

 
 


 
 
#line 1521 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1539 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct AXBS_MemMap {
  struct {                                          
    uint32_t PRS;                                     
    uint8_t RESERVED_0[12];
    uint32_t CRS;                                     
    uint8_t RESERVED_1[236];
  } SLAVE[5];
  uint8_t RESERVED_0[768];
  uint32_t MGPCR0;                                  
  uint8_t RESERVED_1[252];
  uint32_t MGPCR1;                                  
  uint8_t RESERVED_2[252];
  uint32_t MGPCR2;                                  
  uint8_t RESERVED_3[252];
  uint32_t MGPCR3;                                  
  uint8_t RESERVED_4[252];
  uint32_t MGPCR4;                                  
  uint8_t RESERVED_5[252];
  uint32_t MGPCR5;                                  
} volatile *AXBS_MemMapPtr;



 

 
 


 
#line 1592 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 1622 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1636 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 



 




   


 
 




 

 
 


 
 
#line 1694 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 



   


   




 

 
 

 
typedef struct CAN_MemMap {
  uint32_t MCR;                                     
  uint32_t CTRL1;                                   
  uint32_t TIMER;                                   
  uint8_t RESERVED_0[4];
  uint32_t RXMGMASK;                                
  uint32_t RX14MASK;                                
  uint32_t RX15MASK;                                
  uint32_t ECR;                                     
  uint32_t ESR1;                                    
  uint32_t IMASK2;                                  
  uint32_t IMASK1;                                  
  uint32_t IFLAG2;                                  
  uint32_t IFLAG1;                                  
  uint32_t CTRL2;                                   
  uint32_t ESR2;                                    
  uint8_t RESERVED_1[8];
  uint32_t CRCR;                                    
  uint32_t RXFGMASK;                                
  uint32_t RXFIR;                                   
  uint8_t RESERVED_2[48];
  struct {                                          
    uint32_t CS;                                      
    uint32_t ID;                                      
    uint32_t WORD0;                                   
    uint32_t WORD1;                                   
  } MB[16];
  uint8_t RESERVED_3[1792];
  uint32_t RXIMR[16];                               
} volatile *CAN_MemMapPtr;



 

 
 


 
#line 1775 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 1827 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1865 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 
#line 1888 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1926 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 
#line 1951 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1966 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1974 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 1981 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 2005 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2015 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2028 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2041 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




   


 
 

 




 

 
 


 
 
#line 2162 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2260 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 2272 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct CAU_MemMap {
  uint32_t DIRECT[16];                              
  uint8_t RESERVED_0[2048];
  uint32_t LDR_CASR;                                
  uint32_t LDR_CAA;                                 
  uint32_t LDR_CA[9];                               
  uint8_t RESERVED_1[20];
  uint32_t STR_CASR;                                
  uint32_t STR_CAA;                                 
  uint32_t STR_CA[9];                               
  uint8_t RESERVED_2[20];
  uint32_t ADR_CASR;                                
  uint32_t ADR_CAA;                                 
  uint32_t ADR_CA[9];                               
  uint8_t RESERVED_3[20];
  uint32_t RADR_CASR;                               
  uint32_t RADR_CAA;                                
  uint32_t RADR_CA[9];                              
  uint8_t RESERVED_4[84];
  uint32_t XOR_CASR;                                
  uint32_t XOR_CAA;                                 
  uint32_t XOR_CA[9];                               
  uint8_t RESERVED_5[20];
  uint32_t ROTL_CASR;                               
  uint32_t ROTL_CAA;                                
  uint32_t ROTL_CA[9];                              
  uint8_t RESERVED_6[276];
  uint32_t AESC_CASR;                               
  uint32_t AESC_CAA;                                
  uint32_t AESC_CA[9];                              
  uint8_t RESERVED_7[20];
  uint32_t AESIC_CASR;                              
  uint32_t AESIC_CAA;                               
  uint32_t AESIC_CA[9];                             
} volatile *CAU_MemMapPtr;



 

 
 


 
#line 2357 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 2376 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2384 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2392 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2400 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2408 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2416 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2424 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2432 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 2554 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 2565 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct CMP_MemMap {
  uint8_t CR0;                                      
  uint8_t CR1;                                      
  uint8_t FPR;                                      
  uint8_t SCR;                                      
  uint8_t DACCR;                                    
  uint8_t MUXCR;                                    
} volatile *CMP_MemMapPtr;



 

 
 


 
#line 2604 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 2622 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2637 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 2656 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2664 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2675 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 

 

 




 

 
 


 
 
#line 2703 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2710 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2717 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct CMT_MemMap {
  uint8_t CGH1;                                     
  uint8_t CGL1;                                     
  uint8_t CGH2;                                     
  uint8_t CGL2;                                     
  uint8_t OC;                                       
  uint8_t MSC;                                      
  uint8_t CMD1;                                     
  uint8_t CMD2;                                     
  uint8_t CMD3;                                     
  uint8_t CMD4;                                     
  uint8_t PPS;                                      
  uint8_t DMA;                                      
} volatile *CMT_MemMapPtr;



 

 
 


 
#line 2768 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 



 



 
#line 2802 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 2818 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 



 



   


 
 




 

 
 


 
 
#line 2871 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct CRC_MemMap {
  union {                                           
    uint32_t CRC;                                     
    struct {                                          
      uint16_t CRCL;                                    
      uint16_t CRCH;                                    
    } ACCESS16BIT;
    struct {                                          
      uint8_t CRCLL;                                    
      uint8_t CRCLU;                                    
      uint8_t CRCHL;                                    
      uint8_t CRCHU;                                    
    } ACCESS8BIT;
  };
  union {                                           
    uint32_t GPOLY;                                   
    struct {                                          
      uint16_t GPOLYL;                                  
      uint16_t GPOLYH;                                  
    } GPOLY_ACCESS16BIT;
    struct {                                          
      uint8_t GPOLYLL;                                  
      uint8_t GPOLYLU;                                  
      uint8_t GPOLYHL;                                  
      uint8_t GPOLYHU;                                  
    } GPOLY_ACCESS8BIT;
  };
  uint32_t CTRL;                                    
} volatile *CRC_MemMapPtr;



 

 
 


 
#line 2940 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 2964 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 



 



 
#line 2995 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 



 



 
#line 3032 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 3065 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct DAC_MemMap {
  struct {                                          
    uint8_t DATL;                                     
    uint8_t DATH;                                     
  } DAT[16];
  uint8_t SR;                                       
  uint8_t C0;                                       
  uint8_t C1;                                       
  uint8_t C2;                                       
} volatile *DAC_MemMapPtr;



 

 
 


 
#line 3106 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 
#line 3132 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3149 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3160 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3167 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 

 




 

 
 


 
 
#line 3223 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3260 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 





   


   




 

 
 

 
typedef struct DMA_MemMap {
  uint32_t CR;                                      
  uint32_t ES;                                      
  uint8_t RESERVED_0[4];
  uint32_t ERQ;                                     
  uint8_t RESERVED_1[4];
  uint32_t EEI;                                     
  uint8_t CEEI;                                     
  uint8_t SEEI;                                     
  uint8_t CERQ;                                     
  uint8_t SERQ;                                     
  uint8_t CDNE;                                     
  uint8_t SSRT;                                     
  uint8_t CERR;                                     
  uint8_t CINT;                                     
  uint8_t RESERVED_2[4];
  uint32_t INT;                                     
  uint8_t RESERVED_3[4];
  uint32_t ERR;                                     
  uint8_t RESERVED_4[4];
  uint32_t HRS;                                     
  uint8_t RESERVED_5[200];
  uint8_t DCHPRI3;                                  
  uint8_t DCHPRI2;                                  
  uint8_t DCHPRI1;                                  
  uint8_t DCHPRI0;                                  
  uint8_t DCHPRI7;                                  
  uint8_t DCHPRI6;                                  
  uint8_t DCHPRI5;                                  
  uint8_t DCHPRI4;                                  
  uint8_t DCHPRI11;                                 
  uint8_t DCHPRI10;                                 
  uint8_t DCHPRI9;                                  
  uint8_t DCHPRI8;                                  
  uint8_t DCHPRI15;                                 
  uint8_t DCHPRI14;                                 
  uint8_t DCHPRI13;                                 
  uint8_t DCHPRI12;                                 
  uint8_t RESERVED_6[3824];
  struct {                                          
    uint32_t SADDR;                                   
    uint16_t SOFF;                                    
    uint16_t ATTR;                                    
    union {                                           
      uint32_t NBYTES_MLNO;                             
      uint32_t NBYTES_MLOFFNO;                          
      uint32_t NBYTES_MLOFFYES;                         
    };
    uint32_t SLAST;                                   
    uint32_t DADDR;                                   
    uint16_t DOFF;                                    
    union {                                           
      uint16_t CITER_ELINKYES;                          
      uint16_t CITER_ELINKNO;                           
    };
    uint32_t DLAST_SGA;                               
    uint16_t CSR;                                     
    union {                                           
      uint16_t BITER_ELINKNO;                           
      uint16_t BITER_ELINKYES;                          
    };
  } TCD[16];
} volatile *DMA_MemMapPtr;



 

 
 


 
#line 3400 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 3428 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3454 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3487 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3520 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3528 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3536 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3544 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3552 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3560 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3568 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3576 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3584 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3617 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3650 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3683 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3691 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3699 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3707 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3715 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3723 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3731 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3739 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3747 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3755 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3763 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3771 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3779 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3787 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3795 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3803 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3811 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 3832 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 3844 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 3855 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 
#line 3876 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 





 



 
#line 3909 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 





 
#line 3924 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 4213 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 4230 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct DMAMUX_MemMap {
  uint8_t CHCFG[16];                                
} volatile *DMAMUX_MemMapPtr;



 

 
 


 


   




 

 
 

 
#line 4278 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 4312 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 


   


   




 

 
 

 
typedef struct ENET_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t EIR;                                     
  uint32_t EIMR;                                    
  uint8_t RESERVED_1[4];
  uint32_t RDAR;                                    
  uint32_t TDAR;                                    
  uint8_t RESERVED_2[12];
  uint32_t ECR;                                     
  uint8_t RESERVED_3[24];
  uint32_t MMFR;                                    
  uint32_t MSCR;                                    
  uint8_t RESERVED_4[28];
  uint32_t MIBC;                                    
  uint8_t RESERVED_5[28];
  uint32_t RCR;                                     
  uint8_t RESERVED_6[60];
  uint32_t TCR;                                     
  uint8_t RESERVED_7[28];
  uint32_t PALR;                                    
  uint32_t PAUR;                                    
  uint32_t OPD;                                     
  uint8_t RESERVED_8[40];
  uint32_t IAUR;                                    
  uint32_t IALR;                                    
  uint32_t GAUR;                                    
  uint32_t GALR;                                    
  uint8_t RESERVED_9[28];
  uint32_t TFWR;                                    
  uint8_t RESERVED_10[56];
  uint32_t RDSR;                                    
  uint32_t TDSR;                                    
  uint32_t MRBR;                                    
  uint8_t RESERVED_11[4];
  uint32_t RSFL;                                    
  uint32_t RSEM;                                    
  uint32_t RAEM;                                    
  uint32_t RAFL;                                    
  uint32_t TSEM;                                    
  uint32_t TAEM;                                    
  uint32_t TAFL;                                    
  uint32_t TIPG;                                    
  uint32_t FTRL;                                    
  uint8_t RESERVED_12[12];
  uint32_t TACC;                                    
  uint32_t RACC;                                    
  uint8_t RESERVED_13[56];
  uint32_t RMON_T_DROP;                             
  uint32_t RMON_T_PACKETS;                          
  uint32_t RMON_T_BC_PKT;                           
  uint32_t RMON_T_MC_PKT;                           
  uint32_t RMON_T_CRC_ALIGN;                        
  uint32_t RMON_T_UNDERSIZE;                        
  uint32_t RMON_T_OVERSIZE;                         
  uint32_t RMON_T_FRAG;                             
  uint32_t RMON_T_JAB;                              
  uint32_t RMON_T_COL;                              
  uint32_t RMON_T_P64;                              
  uint32_t RMON_T_P65TO127;                         
  uint32_t RMON_T_P128TO255;                        
  uint32_t RMON_T_P256TO511;                        
  uint32_t RMON_T_P512TO1023;                       
  uint32_t RMON_T_P1024TO2047;                      
  uint32_t RMON_T_P_GTE2048;                        
  uint32_t RMON_T_OCTETS;                           
  uint32_t IEEE_T_DROP;                             
  uint32_t IEEE_T_FRAME_OK;                         
  uint32_t IEEE_T_1COL;                             
  uint32_t IEEE_T_MCOL;                             
  uint32_t IEEE_T_DEF;                              
  uint32_t IEEE_T_LCOL;                             
  uint32_t IEEE_T_EXCOL;                            
  uint32_t IEEE_T_MACERR;                           
  uint32_t IEEE_T_CSERR;                            
  uint32_t IEEE_T_SQE;                              
  uint32_t IEEE_T_FDXFC;                            
  uint32_t IEEE_T_OCTETS_OK;                        
  uint8_t RESERVED_14[12];
  uint32_t RMON_R_PACKETS;                          
  uint32_t RMON_R_BC_PKT;                           
  uint32_t RMON_R_MC_PKT;                           
  uint32_t RMON_R_CRC_ALIGN;                        
  uint32_t RMON_R_UNDERSIZE;                        
  uint32_t RMON_R_OVERSIZE;                         
  uint32_t RMON_R_FRAG;                             
  uint32_t RMON_R_JAB;                              
  uint32_t RMON_R_RESVD_0;                          
  uint32_t RMON_R_P64;                              
  uint32_t RMON_R_P65TO127;                         
  uint32_t RMON_R_P128TO255;                        
  uint32_t RMON_R_P256TO511;                        
  uint32_t RMON_R_P512TO1023;                       
  uint32_t RMON_R_P1024TO2047;                      
  uint32_t RMON_R_P_GTE2048;                        
  uint32_t RMON_R_OCTETS;                           
  uint32_t RMON_R_DROP;                             
  uint32_t RMON_R_FRAME_OK;                         
  uint32_t IEEE_R_CRC;                              
  uint32_t IEEE_R_ALIGN;                            
  uint32_t IEEE_R_MACERR;                           
  uint32_t IEEE_R_FDXFC;                            
  uint32_t IEEE_R_OCTETS_OK;                        
  uint8_t RESERVED_15[284];
  uint32_t ATCR;                                    
  uint32_t ATVR;                                    
  uint32_t ATOFF;                                   
  uint32_t ATPER;                                   
  uint32_t ATCOR;                                   
  uint32_t ATINC;                                   
  uint32_t ATSTMP;                                  
  uint8_t RESERVED_16[488];
  uint32_t TGSR;                                    
  struct {                                          
    uint32_t TCSR;                                    
    uint32_t TCCR;                                    
  } CHANNEL[4];
} volatile *ENET_MemMapPtr;



 

 
 


 
#line 4553 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 4597 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4630 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 


 


 
#line 4651 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4670 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4679 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4686 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4718 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4734 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 4745 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4752 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 





 



 



 



 



 



 



 



 



 



 



 



 



 
#line 4829 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4840 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4857 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 
#line 4880 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 4893 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 4903 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




   


 
 




 

 
 


 
 
#line 5027 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 



   


   




 

 
 

 
typedef struct EWM_MemMap {
  uint8_t CTRL;                                     
  uint8_t SERV;                                     
  uint8_t CMPL;                                     
  uint8_t CMPH;                                     
} volatile *EWM_MemMapPtr;



 

 
 


 





   




 

 
 

 
#line 5084 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 




   


 
 




 

 
 


 
 





   


   




 

 
 

 
typedef struct FB_MemMap {
  struct {                                          
    uint32_t CSAR;                                    
    uint32_t CSMR;                                    
    uint32_t CSCR;                                    
  } CS[6];
  uint8_t RESERVED_0[24];
  uint32_t CSPMCR;                                  
} volatile *FB_MemMapPtr;



 

 
 


 





   




 

 
 

 



 
#line 5179 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 5212 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 5228 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 5265 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 




   


   




 

 
 

 
typedef struct FMC_MemMap {
  uint32_t PFAPR;                                   
  uint32_t PFB0CR;                                  
  uint32_t PFB1CR;                                  
  uint8_t RESERVED_0[244];
  uint32_t TAGVD[4][8];                             
  uint8_t RESERVED_1[128];
  struct {                                          
    uint32_t DATA_U;                                  
    uint32_t DATA_L;                                  
  } SET[4][8];
} volatile *FMC_MemMapPtr;



 

 
 


 
#line 5313 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 5365 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 5393 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 5410 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 





 



 




   


 
 




 

 
 


 
 
#line 5541 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 




   


   




 

 
 

 
typedef struct FTFL_MemMap {
  uint8_t FSTAT;                                    
  uint8_t FCNFG;                                    
  uint8_t FSEC;                                     
  uint8_t FOPT;                                     
  uint8_t FCCOB3;                                   
  uint8_t FCCOB2;                                   
  uint8_t FCCOB1;                                   
  uint8_t FCCOB0;                                   
  uint8_t FCCOB7;                                   
  uint8_t FCCOB6;                                   
  uint8_t FCCOB5;                                   
  uint8_t FCCOB4;                                   
  uint8_t FCCOBB;                                   
  uint8_t FCCOBA;                                   
  uint8_t FCCOB9;                                   
  uint8_t FCCOB8;                                   
  uint8_t FPROT3;                                   
  uint8_t FPROT2;                                   
  uint8_t FPROT1;                                   
  uint8_t FPROT0;                                   
  uint8_t RESERVED_0[2];
  uint8_t FEPROT;                                   
  uint8_t FDPROT;                                   
} volatile *FTFL_MemMapPtr;



 

 
 


 
#line 5618 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 5640 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 5657 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 5670 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 



 



 



 



 



 



 



 



 



 



 



 



 



 



 




   


 
 




 

 
 


 
 
#line 5786 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct NV_MemMap {
  uint8_t BACKKEY3;                                 
  uint8_t BACKKEY2;                                 
  uint8_t BACKKEY1;                                 
  uint8_t BACKKEY0;                                 
  uint8_t BACKKEY7;                                 
  uint8_t BACKKEY6;                                 
  uint8_t BACKKEY5;                                 
  uint8_t BACKKEY4;                                 
  uint8_t FPROT3;                                   
  uint8_t FPROT2;                                   
  uint8_t FPROT1;                                   
  uint8_t FPROT0;                                   
  uint8_t FSEC;                                     
  uint8_t FOPT;                                     
  uint8_t FEPROT;                                   
  uint8_t FDPROT;                                   
} volatile *NV_MemMapPtr;



 

 
 


 
#line 5845 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 



 



 



 



 



 



 



 



 



 



 
#line 5917 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




 



 




   


 
 




 

 
 


 
 
#line 5964 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct FTM_MemMap {
  uint32_t SC;                                      
  uint32_t CNT;                                     
  uint32_t MOD;                                     
  struct {                                          
    uint32_t CnSC;                                    
    uint32_t CnV;                                     
  } CONTROLS[8];
  uint32_t CNTIN;                                   
  uint32_t STATUS;                                  
  uint32_t MODE;                                    
  uint32_t SYNC;                                    
  uint32_t OUTINIT;                                 
  uint32_t OUTMASK;                                 
  uint32_t COMBINE;                                 
  uint32_t DEADTIME;                                
  uint32_t EXTTRIG;                                 
  uint32_t POL;                                     
  uint32_t FMS;                                     
  uint32_t FILTER;                                  
  uint32_t FLTCTRL;                                 
  uint32_t QDCTRL;                                  
  uint32_t CONF;                                    
  uint32_t FLTPOL;                                  
  uint32_t SYNCONF;                                 
  uint32_t INVCTRL;                                 
  uint32_t SWOCTRL;                                 
  uint32_t PWMLOAD;                                 
} volatile *FTM_MemMapPtr;



 

 
 


 
#line 6043 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 6067 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 6090 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 6115 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6131 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6148 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6165 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6182 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6239 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6246 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6263 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6280 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6295 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6308 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6328 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6345 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6356 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6365 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6396 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6405 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6438 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6457 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 

 

 




 

 
 


 
 
#line 6518 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6546 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6574 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 6582 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct I2C_MemMap {
  uint8_t A1;                                       
  uint8_t F;                                        
  uint8_t C1;                                       
  uint8_t S;                                        
  uint8_t D;                                        
  uint8_t C2;                                       
  uint8_t FLT;                                      
  uint8_t RA;                                       
  uint8_t SMB;                                      
  uint8_t A2;                                       
  uint8_t SLTH;                                     
  uint8_t SLTL;                                     
} volatile *I2C_MemMapPtr;



 

 
 


 
#line 6633 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 
#line 6655 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6672 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6689 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 6707 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 6732 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 




   


 
 

 




 

 
 


 
 
#line 6776 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6789 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct I2S_MemMap {
  uint32_t TX0;                                     
  uint32_t TX1;                                     
  uint32_t RX0;                                     
  uint32_t RX1;                                     
  uint32_t CR;                                      
  uint32_t ISR;                                     
  uint32_t IER;                                     
  uint32_t TCR;                                     
  uint32_t RCR;                                     
  uint32_t TCCR;                                    
  uint32_t RCCR;                                    
  uint32_t FCSR;                                    
  uint8_t RESERVED_0[8];
  uint32_t ACNT;                                    
  uint32_t ACADD;                                   
  uint32_t ACDAT;                                   
  uint32_t ATAG;                                    
  uint32_t TMSK;                                    
  uint32_t RMSK;                                    
  uint32_t ACCST;                                   
  uint32_t ACCEN;                                   
  uint32_t ACCDIS;                                  
} volatile *I2S_MemMapPtr;



 

 
 


 
#line 6859 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 



 



 
#line 6912 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 6955 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7006 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7027 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7050 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7064 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7078 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7103 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7117 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 



 



 



 




   


 
 




 

 
 


 
 
#line 7188 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct LLWU_MemMap {
  uint8_t PE1;                                      
  uint8_t PE2;                                      
  uint8_t PE3;                                      
  uint8_t PE4;                                      
  uint8_t ME;                                       
  uint8_t F1;                                       
  uint8_t F2;                                       
  uint8_t F3;                                       
  uint8_t CS;                                       
} volatile *LLWU_MemMapPtr;



 

 
 


 
#line 7233 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 7257 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7270 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7283 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7296 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7313 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7330 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7347 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7364 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7371 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 7398 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct LPTMR_MemMap {
  uint32_t CSR;                                     
  uint32_t PSR;                                     
  uint32_t CMR;                                     
  uint32_t CNR;                                     
} volatile *LPTMR_MemMapPtr;



 

 
 


 





   




 

 
 

 
#line 7460 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7469 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 




   


 
 




 

 
 


 
 





   


   




 

 
 

 
typedef struct MC_MemMap {
  uint8_t SRSH;                                     
  uint8_t SRSL;                                     
  uint8_t PMPROT;                                   
  uint8_t PMCTRL;                                   
} volatile *MC_MemMapPtr;



 

 
 


 





   




 

 
 

 
#line 7552 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7565 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7576 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7585 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 





   


   




 

 
 

 
typedef struct MCG_MemMap {
  uint8_t C1;                                       
  uint8_t C2;                                       
  uint8_t C3;                                       
  uint8_t C4;                                       
  uint8_t C5;                                       
  uint8_t C6;                                       
  uint8_t S;                                        
  uint8_t RESERVED_0[1];
  uint8_t ATC;                                      
  uint8_t RESERVED_1[1];
  uint8_t ATCVH;                                    
  uint8_t ATCVL;                                    
} volatile *MCG_MemMapPtr;



 

 
 


 
#line 7656 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 7680 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7692 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 7707 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7715 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7725 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7741 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 7748 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 




   


 
 




 

 
 


 
 
#line 7784 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct MCM_MemMap {
  uint8_t RESERVED_0[8];
  uint16_t PLASC;                                   
  uint16_t PLAMC;                                   
  uint32_t SRAMAP;                                  
  uint32_t ISR;                                     
  uint32_t ETBCC;                                   
  uint32_t ETBRL;                                   
  uint32_t ETBCNT;                                  
} volatile *MCM_MemMapPtr;



 

 
 


 
#line 7826 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 
#line 7856 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




 
#line 7873 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 




   


 
 




 

 
 


 
 
#line 7906 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct MPU_MemMap {
  uint32_t CESR;                                    
  uint8_t RESERVED_0[12];
  struct {                                          
    uint32_t EAR;                                     
    uint32_t EDR;                                     
  } SP[5];
  uint8_t RESERVED_1[968];
  uint32_t WORD[12][4];                             
  uint8_t RESERVED_2[832];
  uint32_t RGDAAC[12];                              
} volatile *MPU_MemMapPtr;



 

 
 


 






   




 

 
 

 
#line 7974 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 7990 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 8039 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 8080 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 8169 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 





   


   




 

 
 

 
typedef struct NVIC_MemMap {
  uint32_t ISER[4];                                 
  uint8_t RESERVED_0[112];
  uint32_t ICER[4];                                 
  uint8_t RESERVED_1[112];
  uint32_t ISPR[4];                                 
  uint8_t RESERVED_2[112];
  uint32_t ICPR[4];                                 
  uint8_t RESERVED_3[112];
  uint32_t IABR[4];                                 
  uint8_t RESERVED_4[240];
  uint8_t IP[104];                                  
  uint8_t RESERVED_5[2712];
  uint32_t STIR[1];                                 
} volatile *NVIC_MemMapPtr;



 

 
 


 
#line 8222 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 



 



 



 
#line 8566 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




   


 
 




 

 
 


 
 
#line 8713 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 8722 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct OSC_MemMap {
  uint8_t CR;                                       
} volatile *OSC_MemMapPtr;



 

 
 


 


   




 

 
 

 
#line 8775 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 


   


   




 

 
 

 
typedef struct PDB_MemMap {
  uint32_t SC;                                      
  uint32_t MOD;                                     
  uint32_t CNT;                                     
  uint32_t IDLY;                                    
  struct {                                          
    uint32_t C1;                                      
    uint32_t S;                                       
    uint32_t DLY[2];                                  
    uint8_t RESERVED_0[24];
  } CH[2];
  uint8_t RESERVED_0[240];
  struct {                                          
    uint32_t INTC;                                    
    uint32_t INT;                                     
  } DAC[2];
  uint8_t RESERVED_1[48];
  uint32_t POEN;                                    
  uint32_t PODLY;                                   
} volatile *PDB_MemMapPtr;



 

 
 


 
#line 8850 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 8890 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 
#line 8912 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 8919 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 




 



 



 
#line 8943 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 8979 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 






   


   




 

 
 

 
typedef struct PIT_MemMap {
  uint32_t MCR;                                     
  uint8_t RESERVED_0[252];
  struct {                                          
    uint32_t LDVAL;                                   
    uint32_t CVAL;                                    
    uint32_t TCTRL;                                   
    uint32_t TFLG;                                    
  } CHANNEL[4];
} volatile *PIT_MemMapPtr;



 

 
 


 






   




 

 
 

 




 



 



 




 



   


 
 




 

 
 


 
 
#line 9093 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 





   


   




 

 
 

 
typedef struct PMC_MemMap {
  uint8_t LVDSC1;                                   
  uint8_t LVDSC2;                                   
  uint8_t REGSC;                                    
} volatile *PMC_MemMapPtr;



 

 
 


 




   




 

 
 

 
#line 9155 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9165 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9174 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 




   


   




 

 
 

 
typedef struct PORT_MemMap {
  uint32_t PCR[32];                                 
  uint32_t GPCLR;                                   
  uint32_t GPCHR;                                   
  uint8_t RESERVED_0[24];
  uint32_t ISFR;                                    
  uint8_t RESERVED_1[28];
  uint32_t DFER;                                    
  uint32_t DFCR;                                    
  uint32_t DFWR;                                    
} volatile *PORT_MemMapPtr;



 

 
 


 
#line 9238 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 9272 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9279 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9286 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 


 




   


 
 

 

 

 

 




 

 
 


 
 
#line 9365 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9404 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9443 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9482 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9521 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 






   


   




 

 
 

 
typedef struct GPIO_MemMap {
  uint32_t PDOR;                                    
  uint32_t PSOR;                                    
  uint32_t PCOR;                                    
  uint32_t PTOR;                                    
  uint32_t PDIR;                                    
  uint32_t PDDR;                                    
} volatile *GPIO_MemMapPtr;



 

 
 


 
#line 9567 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 



 



 



 




   


 
 

 

 

 

 




 

 
 


 
 
#line 9634 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9641 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9648 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9655 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9662 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct RFSYS_MemMap {
  uint32_t REG[8];                                  
} volatile *RFSYS_MemMapPtr;



 

 
 


 


   




 

 
 

 
#line 9715 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 9741 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 


   


   




 

 
 

 
typedef struct RFVBAT_MemMap {
  uint32_t REG[8];                                  
} volatile *RFVBAT_MemMapPtr;



 

 
 


 


   




 

 
 

 
#line 9797 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 9823 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 


   


   




 

 
 

 
typedef struct RNG_MemMap {
  uint32_t VER;                                     
  uint32_t CMD;                                     
  uint32_t CR;                                      
  uint32_t SR;                                      
  uint32_t ESR;                                     
  uint32_t OUT;                                     
} volatile *RNG_MemMapPtr;



 

 
 


 
#line 9865 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 9886 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9897 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9907 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9934 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 9945 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




   


 
 




 

 
 


 
 
#line 9973 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct RTC_MemMap {
  uint32_t TSR;                                     
  uint32_t TPR;                                     
  uint32_t TAR;                                     
  uint32_t TCR;                                     
  uint32_t CR;                                      
  uint32_t SR;                                      
  uint32_t LR;                                      
  uint32_t CCR;                                     
  uint8_t RESERVED_0[2016];
  uint32_t WAR;                                     
  uint32_t RAR;                                     
} volatile *RTC_MemMapPtr;



 

 
 


 
#line 10021 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 



 
#line 10057 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10078 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10087 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10094 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 10115 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10132 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 10160 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct SDHC_MemMap {
  uint32_t DSADDR;                                  
  uint32_t BLKATTR;                                 
  uint32_t CMDARG;                                  
  uint32_t XFERTYP;                                 
  uint32_t CMDRSP[4];                               
  uint32_t DATPORT;                                 
  uint32_t PRSSTAT;                                 
  uint32_t PROCTL;                                  
  uint32_t SYSCTL;                                  
  uint32_t IRQSTAT;                                 
  uint32_t IRQSTATEN;                               
  uint32_t IRQSIGEN;                                
  uint32_t AC12ERR;                                 
  uint32_t HTCAPBLT;                                
  uint32_t WML;                                     
  uint8_t RESERVED_0[8];
  uint32_t FEVT;                                    
  uint32_t ADMAES;                                  
  uint32_t ADSADDR;                                 
  uint8_t RESERVED_1[100];
  uint32_t VENDOR;                                  
  uint32_t MMCBOOT;                                 
  uint8_t RESERVED_2[52];
  uint32_t HOSTVER;                                 
} volatile *SDHC_MemMapPtr;



 

 
 


 
#line 10232 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 
#line 10254 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 10284 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10297 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 10333 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10365 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10391 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10428 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10465 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10502 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10515 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10533 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10543 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10576 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10584 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 10596 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10611 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10618 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 10660 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 


   


   




 

 
 

 
typedef struct SIM_MemMap {
  uint32_t SOPT1;                                   
  uint8_t RESERVED_0[4096];
  uint32_t SOPT2;                                   
  uint8_t RESERVED_1[4];
  uint32_t SOPT4;                                   
  uint32_t SOPT5;                                   
  uint32_t SOPT6;                                   
  uint32_t SOPT7;                                   
  uint8_t RESERVED_2[8];
  uint32_t SDID;                                    
  uint32_t SCGC1;                                   
  uint32_t SCGC2;                                   
  uint32_t SCGC3;                                   
  uint32_t SCGC4;                                   
  uint32_t SCGC5;                                   
  uint32_t SCGC6;                                   
  uint32_t SCGC7;                                   
  uint32_t CLKDIV1;                                 
  uint32_t CLKDIV2;                                 
  uint32_t FCFG1;                                   
  uint32_t FCFG2;                                   
  uint32_t UIDH;                                    
  uint32_t UIDMH;                                   
  uint32_t UIDML;                                   
  uint32_t UIDL;                                    
} volatile *SIM_MemMapPtr;



 

 
 


 
#line 10737 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 10760 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10783 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10806 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10819 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10826 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10841 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10851 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




 
#line 10863 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10876 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10901 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10918 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10947 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10954 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10967 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10979 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 10989 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11000 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 




   


 
 




 

 
 


 
 
#line 11056 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct SPI_MemMap {
  uint32_t MCR;                                     
  uint8_t RESERVED_0[4];
  uint32_t TCR;                                     
  union {                                           
    uint32_t CTAR[2];                                 
    uint32_t CTAR_SLAVE[1];                           
  };
  uint8_t RESERVED_1[24];
  uint32_t SR;                                      
  uint32_t RSER;                                    
  union {                                           
    uint32_t PUSHR;                                   
    uint32_t PUSHR_SLAVE;                             
  };
  uint32_t POPR;                                    
  uint32_t TXFR0;                                   
  uint32_t TXFR1;                                   
  uint32_t TXFR2;                                   
  uint32_t TXFR3;                                   
  uint8_t RESERVED_2[48];
  uint32_t RXFR0;                                   
  uint32_t RXFR1;                                   
  uint32_t RXFR2;                                   
  uint32_t RXFR3;                                   
} volatile *SPI_MemMapPtr;



 

 
 


 
#line 11124 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 11171 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 11211 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11219 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11246 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11263 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11279 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 11294 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11301 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11308 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11315 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 




   


 
 

 

 




 

 
 


 
 
#line 11371 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11390 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11409 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 11417 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct SysTick_MemMap {
  uint32_t CSR;                                     
  uint32_t RVR;                                     
  uint32_t CVR;                                     
  uint32_t CALIB;                                   
} volatile *SysTick_MemMapPtr;



 

 
 


 





   




 

 
 

 
#line 11472 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 11488 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 





   


   




 

 
 

 
typedef struct SCB_MemMap {
  uint8_t RESERVED_0[8];
  uint32_t ACTLR;                                   
  uint8_t RESERVED_1[3316];
  uint32_t CPUID;                                   
  uint32_t ICSR;                                    
  uint32_t VTOR;                                    
  uint32_t AIRCR;                                   
  uint32_t SCR;                                     
  uint32_t CCR;                                     
  uint32_t SHPR1;                                   
  uint32_t SHPR2;                                   
  uint32_t SHPR3;                                   
  uint32_t SHCSR;                                   
  uint32_t CFSR;                                    
  uint32_t HFSR;                                    
  uint32_t DFSR;                                    
  uint32_t MMFAR;                                   
  uint32_t BFAR;                                    
  uint32_t AFSR;                                    
} volatile *SCB_MemMapPtr;



 

 
 


 
#line 11573 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 11591 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11604 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11627 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 11646 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11653 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11666 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11676 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 11687 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11716 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11755 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11762 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11773 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 




   


 
 




 

 
 


 
 
#line 11820 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct TSI_MemMap {
  uint32_t GENCS;                                   
  uint32_t SCANC;                                   
  uint32_t PEN;                                     
  uint32_t STATUS;                                  
  uint8_t RESERVED_0[240];
  uint32_t CNTR1;                                   
  uint32_t CNTR3;                                   
  uint32_t CNTR5;                                   
  uint32_t CNTR7;                                   
  uint32_t CNTR9;                                   
  uint32_t CNTR11;                                  
  uint32_t CNTR13;                                  
  uint32_t CNTR15;                                  
  uint32_t THRESHLD[16];                            
} volatile *TSI_MemMapPtr;



 

 
 


 
#line 11874 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 11921 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11945 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 11981 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12046 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12053 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12060 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12067 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12074 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12081 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12088 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12095 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12102 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12109 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 12155 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 


   


   




 

 
 

 
typedef struct UART_MemMap {
  uint8_t BDH;                                      
  uint8_t BDL;                                      
  uint8_t C1;                                       
  uint8_t C2;                                       
  uint8_t S1;                                       
  uint8_t S2;                                       
  uint8_t C3;                                       
  uint8_t D;                                        
  uint8_t MA1;                                      
  uint8_t MA2;                                      
  uint8_t C4;                                       
  uint8_t C5;                                       
  uint8_t ED;                                       
  uint8_t MODEM;                                    
  uint8_t IR;                                       
  uint8_t RESERVED_0[1];
  uint8_t PFIFO;                                    
  uint8_t CFIFO;                                    
  uint8_t SFIFO;                                    
  uint8_t TWFIFO;                                   
  uint8_t TCFIFO;                                   
  uint8_t RWFIFO;                                   
  uint8_t RCFIFO;                                   
  uint8_t RESERVED_1[1];
  uint8_t C7816;                                    
  uint8_t IE7816;                                   
  uint8_t IS7816;                                   
  union {                                           
    uint8_t WP7816_T_TYPE0;                           
    uint8_t WP7816_T_TYPE1;                           
  };
  uint8_t WN7816;                                   
  uint8_t WF7816;                                   
  uint8_t ET7816;                                   
  uint8_t TL7816;                                   
} volatile *UART_MemMapPtr;



 

 
 


 
#line 12251 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 12270 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 12291 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12308 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12325 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12342 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12359 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 
#line 12381 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




 




 
#line 12400 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 





 
#line 12417 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12426 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12435 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 



 
#line 12462 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12477 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12492 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 
#line 12503 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 
#line 12518 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




   


 
 

 

 

 

 

 




 

 
 


 
 
#line 12581 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12604 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12627 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12650 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12673 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12696 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct USB_MemMap {
  uint8_t PERID;                                    
  uint8_t RESERVED_0[3];
  uint8_t IDCOMP;                                   
  uint8_t RESERVED_1[3];
  uint8_t REV;                                      
  uint8_t RESERVED_2[3];
  uint8_t ADDINFO;                                  
  uint8_t RESERVED_3[3];
  uint8_t OTGISTAT;                                 
  uint8_t RESERVED_4[3];
  uint8_t OTGICR;                                   
  uint8_t RESERVED_5[3];
  uint8_t OTGSTAT;                                  
  uint8_t RESERVED_6[3];
  uint8_t OTGCTL;                                   
  uint8_t RESERVED_7[99];
  uint8_t ISTAT;                                    
  uint8_t RESERVED_8[3];
  uint8_t INTEN;                                    
  uint8_t RESERVED_9[3];
  uint8_t ERRSTAT;                                  
  uint8_t RESERVED_10[3];
  uint8_t ERREN;                                    
  uint8_t RESERVED_11[3];
  uint8_t STAT;                                     
  uint8_t RESERVED_12[3];
  uint8_t CTL;                                      
  uint8_t RESERVED_13[3];
  uint8_t ADDR;                                     
  uint8_t RESERVED_14[3];
  uint8_t BDTPAGE1;                                 
  uint8_t RESERVED_15[3];
  uint8_t FRMNUML;                                  
  uint8_t RESERVED_16[3];
  uint8_t FRMNUMH;                                  
  uint8_t RESERVED_17[3];
  uint8_t TOKEN;                                    
  uint8_t RESERVED_18[3];
  uint8_t SOFTHLD;                                  
  uint8_t RESERVED_19[3];
  uint8_t BDTPAGE2;                                 
  uint8_t RESERVED_20[3];
  uint8_t BDTPAGE3;                                 
  uint8_t RESERVED_21[11];
  struct {                                          
    uint8_t ENDPT;                                    
    uint8_t RESERVED_0[3];
  } ENDPOINT[16];
  uint8_t USBCTRL;                                  
  uint8_t RESERVED_22[3];
  uint8_t OBSERVE;                                  
  uint8_t RESERVED_23[3];
  uint8_t CONTROL;                                  
  uint8_t RESERVED_24[3];
  uint8_t USBTRC0;                                  
} volatile *USB_MemMapPtr;



 

 
 


 
#line 12805 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 



 



 



 





 
#line 12847 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12860 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12873 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12882 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12899 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12916 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12931 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12946 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12954 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 12971 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 





 



 



 



 
#line 12996 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 



 



 



 
#line 13023 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 




 
#line 13035 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 


 
#line 13047 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 13107 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 


   


   




 

 
 

 
typedef struct USBDCD_MemMap {
  uint32_t CONTROL;                                 
  uint32_t CLOCK;                                   
  uint32_t STATUS;                                  
  uint8_t RESERVED_0[4];
  uint32_t TIMER0;                                  
  uint32_t TIMER1;                                  
  uint32_t TIMER2;                                  
} volatile *USBDCD_MemMapPtr;



 

 
 


 
#line 13150 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 13172 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 





 
#line 13191 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 13198 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 13205 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 
#line 13212 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 
#line 13236 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 

 
 

 
typedef struct VREF_MemMap {
  uint8_t RESERVED_0[1];
  uint8_t SC;                                       
} volatile *VREF_MemMapPtr;



 

 
 


 


   




 

 
 

 
#line 13287 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


 
 




 

 
 


 
 


   


   




 

 
 

 
typedef struct WDOG_MemMap {
  uint16_t STCTRLH;                                 
  uint16_t STCTRLL;                                 
  uint16_t TOVALH;                                  
  uint16_t TOVALL;                                  
  uint16_t WINH;                                    
  uint16_t WINL;                                    
  uint16_t REFRESH;                                 
  uint16_t UNLOCK;                                  
  uint16_t TMROUTH;                                 
  uint16_t TMROUTL;                                 
  uint16_t RSTCNT;                                  
  uint16_t PRESC;                                   
} volatile *WDOG_MemMapPtr;



 

 
 


 
#line 13357 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   




 

 
 

 
#line 13396 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
 


 



 



 



 



 



 



 



 



 



 




   


 
 




 

 
 


 
 
#line 13469 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

   


   




 




  #pragma language=default




   




 

 
 

 

   


#line 13511 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 11 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\common.h"
    
    
    



        
    
    typedef unsigned char	uint8;   
    typedef unsigned short int	uint16;  
    typedef unsigned long int	uint32;  
    
    typedef char		int8;    
    typedef short int	       	int16;   
    typedef int		       	int32;   
    
    typedef volatile int8	vint8;   
    typedef volatile int16	vint16;  
    typedef volatile int32	vint32;  
    
    typedef volatile uint8	vuint8;   
    typedef volatile uint16	vuint16;  
    typedef volatile uint32	vuint32;  
    

    
    
    
    
    
    
    
    
    void stop (void);
    
    
    
    
    
    
    
    
    void wait (void);
    
    
    
    
    
    
    
    
    void write_vtor (int);
    
    
    
    
    
    
    
    
    void enable_irq (int);
    
    
    
    
    
    
    
    
    void disable_irq (int);
    
    
    
    
    
    
    
    
    
    void set_irq_priority (int, int);
    
    
    
    
    
    
    
    
    void main(void);
#line 22 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\CameraSet.h"


 






 
 







#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\SCCB.h"


 






 
 







#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Component_H\\gpio.h"








    

    
    
    





    
    
    
    
    
    
    
    
    
    
    
    
    void gpio_init (GPIO_MemMapPtr port, int index, int dir,int data);
    
    
    
    
    
    
    
    
    
    
    void gpio_ctrl (GPIO_MemMapPtr port, int index, int data);
    
    
    
    
    
    
    
    
    
    void gpio_reverse (GPIO_MemMapPtr port, int index);

#line 21 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\SCCB.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\includes.h"








    
    

            
    
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Component_H\\light.h"








    


    
    
    



    
    


    
    
    
    
    
    
    
    
    
    
    
    
    void light_init(GPIO_MemMapPtr port,int name,int state);   
    
    
    
    
    
    
    
    
    
    
    void light_control(GPIO_MemMapPtr port,int name,int state);
    
    
    
    
    
    
    
    
    
    void light_change(GPIO_MemMapPtr port,int name);
    
#line 15 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\includes.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Component_H\\uart.h"







	
    

    
    
    
#line 20 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Component_H\\uart.h"

    
#line 28 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Component_H\\uart.h"


    
    
    
    
    
    
    
    
    
    
    void uart_init (UART_MemMapPtr uartch, uint32 sysclk, uint32 baud);
    
    
    
    
    
    
    
    
    
    uint8 uart_re1 (UART_MemMapPtr uartch,uint8 *ch);
    
    
    
    
    
    
    
    
    
    void uart_send1 (UART_MemMapPtr uartch, uint8 ch);
    
    
    
    
    
    
    
    
    
    
    uint8  uart_reN (UART_MemMapPtr uartch ,uint8* buff,uint16 len);
    
    
    
    
    
    
    
    
    
    
    void uart_sendN (UART_MemMapPtr uartch ,uint8* buff,uint16 len);

    
    
    
    
    
    
    
    
    void enableuartreint(UART_MemMapPtr uartch,uint8 irqno);
    
    
    
    
    
    
    
    
    
    void disableuartreint(UART_MemMapPtr uartch,uint8 irqno);
	
#line 16 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\includes.h"
    
    

#line 22 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\SCCB.h"




























extern void SCCBPortInit(void);
extern uint8 SCCBWriteByte(uint8 WriteAddress , uint8 SendByte);
extern uint8 SCCBReadByte(uint8 *pBuffer, uint16 length, uint8 ReadAddress);







#line 21 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\CameraSet.h"





























#line 198 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\CameraSet.h"


#line 208 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\CameraSet.h"




typedef struct
{
    uint8 addr;                  
    uint8 val;                    
} CameraRegs;




typedef enum
{
    IMG_NOTINIT = 0,
    ImgGetFinish,             
    ImgGetFail,               
    ImgGeting,             
    ImgGetStart,              
    ImgGetDis,               
} ImgStatusDef;




extern volatile ImgStatusDef ImgStatus;  
extern CameraRegs OV7725Regs[];     
extern CameraRegs OV7620Regs[];     
extern uint8 ImgStore1[60][320];    
extern uint8 ImgStore2[60][320];    




extern void CameraDelay(uint32 time);

extern uint8 CameraInit(void);

extern uint8 CameraRegInit(void);




extern void CameraPortInit(void);














#line 23 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImageGet.h"


 






 
 







#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\vectors.h"









    
#line 17 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\vectors.h"
    




    
    extern uint32 ErrorCountNow9;

    extern uint32 QuadLeftCount;       
    extern uint32 QuadRightCount;      
    extern volatile uint8 QuadDoneFlag;         
    
    extern uint16 DiffCountL;        
    extern uint16 DiffCountR;        

    extern uint8 PIT2_Isr_Change;    
    extern uint8 LightHouseWaitStartTooLongFlag;   
    
    
    extern void uart0_isr(void);
    extern void PIT0_Isr(void);
    extern void PIT1_Isr(void);
    extern void PIT2_Isr(void);
    extern void DMA0_Isr(void);
    extern void PORTA_Isr(void);
    extern void PORTB_Isr(void);
    extern void PORTC_Isr(void);
    extern void PORTD_Isr(void);
    extern void PORTE_Isr(void);
    
    
    void default_isr(void);
    void abort_isr(void);
    void hard_fault_handler_c(unsigned int * hardfault_args);
    
    typedef void pointer(void);
    
    extern void __startup(void);
    extern unsigned long __BOOT_STACK_ADDRESS[];
    extern void __iar_program_start(void);
                                  
#line 318 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\vectors.h"



#line 23 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImageGet.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"
#line 24 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImageGet.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Debug.h"


 






 
 

#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Ftm.h"



 






 
 










extern uint16 speedOfCar;




extern void MotorInit_JYB(void);
extern void MotorInit_SYJ(void);
extern void QuadInit3(void);
extern void ServoInit(void);













#line 14 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Debug.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Flash.h"
























#line 40 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Flash.h"







void FlashInit();







uint8 FlashEraseSector(uint16 sectorNo);










uint8 FlashWrite(uint16 sectNo,uint16 offset,uint16 cnt,uint8 buf[]);

#line 16 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Debug.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\LQ12864.h"










 extern uint8 longqiu96x64[768];
 void LCD_Init(void);
 void LCD_CLS(void);
 void LCD_P6x8Str(uint8 x,uint8 y,uint8 ch[]);
 void LCD_P8x16Str(uint8 x,uint8 y,uint8 ch[]);
 void LCD_P14x16Str(uint8 x,uint8 y,uint8 ch[]);
 void LCD_Print(uint8 x, uint8 y, uint8 ch[]);
 void LCD_PutPixel(uint8 x,uint8 y);
 void LCD_Rectangle(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 gif);
 void Draw_LQLogo(void);
 void Draw_LibLogo(void);
 void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 bmp[]); 
 void LCD_Fill(uint8 dat);


#line 17 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Debug.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\RunControl.h"


 






 
 







#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\VirtualScope.h"


 






 
 







#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\RunControl.h"
#line 23 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\VirtualScope.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Component_H\\adc.h"





















































































































































typedef struct adc_cfg {
  uint8_t  CONFIG1; 
  uint8_t  CONFIG2; 
  uint16_t COMPARE1; 
  uint16_t COMPARE2; 
  uint8_t  STATUS2;
  uint8_t  STATUS3; 
  uint8_t  STATUS1A; 
  uint8_t  STATUS1B;
  uint32_t PGA;
  } *tADC_ConfigPtr, tADC_Config ;  
  



typedef struct adc_cal {
 
uint16_t  OFS;
uint16_t  PG;
uint16_t  MG;
uint8_t   CLPD;
uint8_t   CLPS;
uint16_t  CLP4;
uint16_t  CLP3;
uint8_t   CLP2;
uint8_t   CLP1;
uint8_t   CLP0;
uint8_t   dummy;
uint8_t   CLMD;
uint8_t   CLMS;
uint16_t  CLM4;
uint16_t  CLM3;
uint8_t   CLM2;
uint8_t   CLM1;
uint8_t   CLM0;
} tADC_Cal_Blk ;  

   
























uint8 hw_adc_init(int MoudelNumber);











uint8 hw_adc_convertstop(int MoudelNumbe,int Channel);











uint8 hw_adc_convertstart(int MoudelNumber,int Channel,uint8 accuracy);











uint16 hw_ad_once(int MoudelNumber,int Channel,uint8 accuracy); 









uint16 hw_ad_mid(int MoudelNumber,int Channel,uint8 accuracy); 













uint16 hw_ad_ave(int MoudelNumber,int Channel,uint8 accuracy,uint8 N); 












void hw_adc_config_alt(ADC_MemMapPtr adcmap, tADC_ConfigPtr ADC_CfgPtr);










extern int16 ADResult0;
extern int16 ADResult1;
extern int16 ADResult2;
extern int16 ADResult3;
extern int16 ADResult4;
extern int16 ADResult5;

extern uint16 ADResultCom;
extern uint32 GryoFlatCount; 
extern uint8 GryoFlatFlag;   
extern int16 GyroResult[10];  
extern uint8 GyroResultFlag;   

extern uint8 GyroInit(void);
extern uint8 GryoDeal(void);

extern uint8 GyroResultForbidFlag;           
extern uint8 GyroResultForbidBackCount;      
extern uint8 GyroResultForbidBackCountNum;  









#line 25 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\VirtualScope.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\LightHouse.h"


 






 
 







#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

















































































 

 
 
 
 

 




 

 
#line 13504 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"
   
#line 13511 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Frame_H\\MK60N512VMD100.h"

 
#line 23 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\LightHouse.h"










extern uint8 LightHouseStateR0;    
extern uint8 LightHouseStateR1;    
extern uint8 LightHouseOn2OffFlag;  
extern uint8 LightHouseOff2OnFlag;  
extern uint8 LightHouseWaitStopFlag;

extern uint16 LightHouseWaitStartMaxTime;         
extern uint16 LightHouseWaitStopDelayCountLimit;  
extern uint16 LightHouseWaitStopGapCountLimit;   
extern uint16 LightHouseWaitStopOnCount;         
extern uint16 LightHouseWaitStopOnCountLimit;   
extern uint16 LightHouseNoStopFlag;              
extern uint8 LightHouseWaitStopLockFlag;   
extern uint8 LightHouseWaitStopDelayFlag;  



extern uint8 LightHouseInit(void);
extern uint8 LightHouseStateUpdate(void);
extern uint8 LightHouseWaitStart(void);
extern uint8 LightHouseWaitStop(void);



#line 26 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\VirtualScope.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Fuzzy.h"







 






 
 




















extern uint16 SpeedLastLeft;                 
extern uint16 SpeedLastRight;                
extern uint16 SpeedNowLeft;                
extern uint16 SpeedNowRight;               
extern int32 DeviFusemtr[11];             
extern int32 DeviFuse_dotmtr[9];         
extern int32 DeviFuse_dot;               

extern uint8 SpeedRealTimeGet(void);
extern int32 BiasCal(int32 row);
extern uint8 DeviationFuse(void);
extern uint8 MtrGet(void);

#line 27 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\VirtualScope.h"
#line 1 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\BatteryCheck.h"


 






 
 















extern uint16 BatteryCheckVal;   


uint8 BatteryCheckInit(void);   
uint8 BatteryCheckUpdate(void);   



#line 28 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\VirtualScope.h"








extern uint32 tic1;  
extern uint32 toc1;  
extern uint32 tic2;  
extern uint32 toc2;  
extern uint32 tic3;  
extern uint32 toc3;  
extern uint32 tic4;  
extern uint32 toc4;  
extern uint32 tic5;  
extern uint32 toc5;  
extern uint32 tic6;  
extern uint32 toc6;  
extern uint32 tic7;  
extern uint32 toc7;  


extern float VirtualOutData[4];


extern void VirtualOutPut_Data(void);
extern void VirtualScopeSend(void);
extern void Virtual2DataPush(uint8 chanel,uint16 data);
extern void Virtual2Send(void);
extern void Virtual2SendData(void);

#line 24 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\RunControl.h"















extern uint8 QuadSpeedLevel;
extern uint8 SlopeCLevel;







extern uint16 Steer_kp[8];

extern uint16 ServoPIDP;  
extern uint16 ServoPIDD;  
extern uint32 ServoPIDInputVal; 
extern int32 ServoPIDInputValP;   
extern int32 ServoPIDInputValD;   
extern uint32 ServoPIDInputValOld;

extern uint32 SpeedTargetVal;              
extern uint32 SpeedLastTargetVal;
extern uint16 SpeedTargetLeftVal;          
extern uint16 SpeedTargetRightVal;         
extern uint16 SpeedLastTargetLeftVal;     
extern uint16 SpeedLastTargetRightVal;    

extern uint16 SpeedPIDPVal;                  
extern uint16 SpeedPIDDVal;                
extern uint16 SpeedPIDIVal;                

extern int32 SpeedLeftVal;                
extern int32 SpeedRightVal;               
extern int32 SpeedLeftValP;                
extern int32 SpeedLeftValD;                
extern int32 SpeedRightValP;                
extern int32 SpeedRightValD;                
extern uint8 MotorTakeOffFlag;   



extern uint8 StopFlag;       
extern uint8 TimeOutFlag;



extern int32 speed_kp,speed_kd;
extern uint16 ServoPIDPMat[15];
extern uint16 ServoPIDDMat[7];
extern uint16 ServoPIDD2Mat[7];

extern int32 DeltaVelocity;
extern int32 ServoTemp;

extern int16 ErrorCountNow0;
extern int16 ErrorCountNow1;

extern int16 temptempSpeedLeftVal;

extern uint8 StrategyLoadSpeedIndex;      
extern uint8 SpeedTargetValGryoResult;    
extern uint8 SpeedTargetValAngle;         
extern uint16 SpeedBrick;

extern uint16 MotorTakeOffQuadCountLimit; 
extern uint16 SpeedStrategyChosen;     
extern uint16 SpeedTargetValStraight;      

extern uint8 StopRealFlag;     
extern uint16 SpeedTargetValWaitStop;     
extern uint16 StopFlagMaxCountNum;      
extern uint16 SpeedTargetValGryoUp;  
extern uint16 SpeedXiaoZhiDao;

extern uint16 SpeedTargetMat[9][11];

extern uint8 StopLineSpeedControlPauseFlag;




extern void SportControl(uint8 ImageProFlag);
extern uint8 ServoPID(void);
extern uint8 MotorPID(void);
extern uint8 StrategyLoadSpeed(void);


#line 19 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\Debug.h"











                                    













extern uint8 DebugSwitchFlag[4];    
extern uint8 DebugButtonFlag[6];    
extern uint16 TimeRealRun;                         
extern uint8 TimeRealRunFlag;                  


extern uint8 DebugInit(void);
extern uint8 DebugSwitchScan(void);
extern uint8 DebugDebug(void);
extern uint8 DebugButtonScan(void);
extern uint8 FlashWriteNow(uint32 tempsectorindex, uint32 num, uint32 tempelementsize, uint8 *pointeruint8);
extern uint8 FlashFinalWrite(void);



#line 25 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImageGet.h"









extern uint8 ModeFlag;                    
extern uint8 ImgPresent;   
extern uint16 LineCount;          
extern uint16 LineRealCount;      

extern uint8 ImgRaw[60][320];           


extern uint32 ErrorCountNow7;
extern uint32 ErrorCountNow8;



extern void ImageGet(void);

extern void FieldIsr(void);

extern void LineIsr(void);

#line 24 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"
#line 1 "D:\\quartus\\quartus\\cusp\\80\\synthinclude\\math.h"












typedef float float_t;
typedef double double_t;

























double acos(double x);
float acosf(float x);
long double acosl(long double x);
double asin(double x);
float asinf(float x);
long double asinl(long double x);
double atan(double x);
float atanf(float x);
long double atanl(long double x);
double atan2(double y, double x);
float atan2f(float y, float x);
long double atan2l(long double y, long double x);
double cos(double x) __attribute__((cusp_synth(native)));
float cosf(float x);
long double cosl(long double x);
double sin(double x) __attribute__((cusp_synth(native)));
float sinf(float x);
long double sinl(long double x);
double tan(double x) __attribute__((cusp_synth(native)));
float tanf(float x);
long double tanl(long double x);
double acosh(double x);
float acoshf(float x);
long double acoshl(long double x);
double asinh(double x);
float asinhf(float x);
long double asinhl(long double x);
double atanh(double x);
float atanhf(float x);
long double atanhl(long double x);
double cosh(double x);
float coshf(float x);
long double coshl(long double x);
double sinh(double x);
float sinhf(float x);
long double sinhl(long double x);
double tanh(double x);
float tanhf(float x);
long double tanhl(long double x);
double exp(double x);
float expf(float x);
long double expl(long double x);
double exp2(double x);
float exp2f(float x);
long double exp2l(long double x);
double expm1(double x);
float expm1f(float x);
long double expm1l(long double x);
double frexp(double value, int *exp);
float frexpf(float value, int *exp);
long double frexpl(long double value, int *exp);
int ilogb(double x);
int ilogbf(float x);
int ilogbl(long double x);
double ldexp(double x, int exp);
float ldexpf(float x, int exp);
long double ldexpl(long double x, int exp);
double log(double x);
float logf(float x);
long double logl(long double x);
double log10(double x);
float log10f(float x);
long double log10l(long double x);
double log1p(double x);
float log1pf(float x);
long double log1pl(long double x);
double log2(double x);
float log2f(float x);
long double log2l(long double x);
double logb(double x);
float logbf(float x);
long double logbl(long double x);
double modf(double value, double *iptr);
float modff(float value, float *iptr);
long double modfl(long double value, long double *iptr);
double scalbn(double x, int n);
float scalbnf(float x, int n);
long double scalbnl(long double x, int n);
double scalbln(double x, long int n);
float scalblnf(float x, long int n);
long double scalblnl(long double x, long int n);
double cbrt(double x);
float cbrtf(float x);
long double cbrtl(long double x);
double fabs(double x);
float fabsf(float x);
long double fabsl(long double x);
double hypot(double x, double y);
float hypotf(float x, float y);
long double hypotl(long double x, long double y);
double pow(double x, double y) __attribute__((cusp_synth(native)));
float powf(float x, float y);
long double powl(long double x, long double y);
double sqrt(double x);
float sqrtf(float x);
long double sqrtl(long double x);
double erf(double x);
float erff(float x);
long double erfl(long double x);
double erfc(double x);
float erfcf(float x);
long double erfcl(long double x);
double lgamma(double x);
float lgammaf(float x);
long double lgammal(long double x);
double tgamma(double x);
float tgammaf(float x);
long double tgammal(long double x);
double ceil(double x);
float ceilf(float x);
long double ceill(long double x);
double floor(double x);
float floorf(float x);
long double floorl(long double x);
double nearbyint(double x);
float nearbyintf(float x);
long double nearbyintl(long double x);
double rint(double x);
float rintf(float x);
long double rintl(long double x);
long int lrint(double x);
long int lrintf(float x);
long int lrintl(long double x);
long long int llrint(double x);
long long int llrintf(float x);
long long int llrintl(long double x);
double round(double x);
float roundf(float x);
long double roundl(long double x);
long int lround(double x);
long int lroundf(float x);
long int lroundl(long double x);
long long int llround(double x);
long long int llroundf(float x);
long long int llroundl(long double x);
double trunc(double x);
float truncf(float x);
long double truncl(long double x);
double fmod(double x, double y);
float fmodf(float x, float y);
long double fmodl(long double x, long double y);
double remainder(double x, double y);
float remainderf(float x, float y);
long double remainderl(long double x, long double y);
double remquo(double x, double y, int *quo);
float remquof(float x, float y, int *quo);
long double remquol(long double x, long double y, int *quo);
double copysign(double x, double y);
float copysignf(float x, float y);
long double copysignl(long double x, long double y);
double nan(const char *tagp);
float nanf(const char *tagp);
long double nanl(const char *tagp);
double nextafter(double x, double y);
float nextafterf(float x, float y);
long double nextafterl(long double x, long double y);
double nexttoward(double x, long double y);
float nexttowardf(float x, long double y);
long double nexttowardl(long double x, long double y);
double fdim(double x, double y);
float fdimf(float x, float y);
long double fdiml(long double x, long double y);
double fmax(double x, double y);
float fmaxf(float x, float y);
long double fmaxl(long double x, long double y);
double fmin(double x, double y);
float fminf(float x, float y);
long double fminl(long double x, long double y);
double fma(double x, double y, double z);
float fmaf(float x, float y, float z);
long double fmal(long double x, long double y, long double z);











#line 26 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"
















#line 53 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"





                                         
                                         
                                         



#line 78 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"
























































#line 143 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"


                                             
                                             


                                        
                                        
                                        
                                        
                                        





















#line 183 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"






                                    

#line 198 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"












#line 216 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\H\\Function_H\\ImagePro.h"














typedef struct
{
  int32 x;  
  int32 y;  
}LocationUdis;  



extern uint8 LimitLeftWMin;
extern uint8 LimitLeftWMax;
extern uint8 LimitLeftBMin;
extern uint8 LimitLeftBMax;
extern uint8 LimitLeftWBMin;
extern uint8 LimitLeftWBMax;

extern uint8 LimitRightWMin;
extern uint8 LimitRightWMax;
extern uint8 LimitRightBMin;
extern uint8 LimitRightBMax;
extern uint8 LimitRightWBMin;
extern uint8 LimitRightWBMax;

extern uint8 BlackLeftLoc[60][3];
extern uint8 BlackRightLoc[60][3];
extern int16 CenterLineLoc[60];      
extern int16 CURVEL;                          
extern int16 CURVEC;                          
extern int16 CURVER;                          
extern uint8 PathType;                        
extern uint8 BlackLeftCrossDone;              
extern uint8 BlackRightCrossDone;             
extern uint8 BlackLeftStep4Flag;              
extern uint8 BlackRightStep4Flag;             
extern uint8 BlackLeftHeadLine;
extern uint8 BlackRightHeadLine;
extern uint8 BlackLeftEndLine;
extern uint8 BlackRightEndLine;



extern uint8 DeviNowLevel;                    
extern uint8 DeviRowChosen;
extern int32 SlopeC;                  
extern uint8 ImgProSucceedFlag;
extern uint8 ImgBlackSucceedFlag;                 
extern uint8 ImgCenterSucceedFlag;                
extern uint8 SingleDoneFlag;              
extern uint8 SingleFloorFlag;             
extern uint8 SingleFloorConfirmCount;       
extern uint8 SingleFloorConfirmCountMax;   
extern uint8 PathSmallSDoneFlag;              
extern uint8 PathSmallSDir;                   
extern int32 DeviFuse;            
extern int32 Devi_near,Devi_far;      
extern int32 DeviPre;                  
extern int32 DeviPrePre;              
extern int32 DeviPrePrePre;              
extern uint8 FuzzyDegree;              



extern uint8 AngleZoneCheckRow0;     
extern uint8 AngleZoneCheckCol0L;    
extern uint8 AngleZoneCheckCol0R;    
extern uint8 AngleZoneCheckRow1;     
extern uint8 AngleZoneCheckCol1L;    
extern uint8 AngleZoneCheckCol1R;    
extern uint8 AngleZoneConfirmLockMeterCount; 

extern uint8 AngleZoneConfirmCount;   
extern uint8 AngleZoneConfirmLockFlag;    
                                       
extern uint8 AngleZoneConfirmMat[6];  
extern uint8 AngleZoneConfirmMatCollect;      


extern uint8 AngleConfirmCount;   
extern uint8 AngleSpeDealBackCount;  
extern uint8 AngleSpeDealDir;        
extern uint8 AngleSpeDealFlag;       
extern uint16 AngleConfirmCountMax;   
extern uint8 AngleConfirmLockFlag;    
                                   
extern uint8 AngleSpeDealExitJudgeFlag;  
extern uint8 AngleConfirmMat0[6];  
extern uint8 AngleConfirmMatCollect0;      
extern uint8 AngleConfirmMat1[6];  
extern uint8 AngleConfirmMatCollect1;      


extern uint8 BrickConfirmCount;   
extern uint8 BrickSpeDealBackCount;  
extern uint8 BrickSpeDealDir;        
extern uint8 BrickSpeDealFlag;       
extern uint16 BrickConfirmCountMax;   
extern uint8 BrickConfirmLockFlag;    
                                   
extern uint8 BrickSpeDealExitJudgeFlag;  
                                      
extern uint8 BrickConfirmMat[6];  
extern uint8 BrickConfirmMatCollect;      

extern uint8 BrickSpeDealStartJudgeCol;     
extern uint8 BrickEndCol;    
extern uint8 BrickHeadCol;   
extern uint8 BrickLeftCol;   
extern uint8 BrickRightCol;   

extern uint8 BrickLineCountNumRecord;

extern int16 ErrorCountNow5;
extern LocationUdis BlackUdisLeftLocation[60];  
extern LocationUdis BlackUdisRightLocation[60]; 
extern uint8 BlackLeftDone;
extern uint8 BlackRightDone;
extern uint8 BlackLeftLastEdgeStartCol;
extern uint8 BlackRightLastEdgeStartCol;
extern uint8 BlackLeftEdgeStartCol;
extern uint8 BlackRightEdgeStartCol;
extern uint8 BlackCenEdgeStartCol;             
extern uint8 flag000;
extern int32 flag111;
extern int flag222;

extern uint8 BlackLeftContinueFlag;
extern uint8 BlackRightContinueFlag;
extern uint8 LimitLeftHeadWB;    
extern uint8 LimitLeftHeadW;      
extern uint8 LimitLeftHeadB;   
extern uint8 LimitRightHeadWB;    
extern uint8 LimitRightHeadW;      
extern uint8 LimitRightHeadB;   
extern uint8 countcount;
extern uint8 BrickSpeDealCenFlag;


extern uint8 AngleZoneConfirmMatLimit;         

extern uint8 AngleConfirmMatLimit;         
extern uint8 AngleLongHeadLineStrategy;                
extern uint8 AngleHeadLineNum;              

extern uint8 BrickConfirmMatLimit;         
extern uint8 BrickConfirmFinalColCom;     

extern uint8 PathRealStraightFlag;        
extern uint8 PathRealStraightCountLimit;  

extern uint8 xiaoZhiDaoFlag;
extern uint8 ShiZhiFlag;
extern uint8 limitStopLineBlackXiu;













extern int32 SlopeL;                           
extern int32 SlopeC;                           
extern int32 SlopeR;                           

extern uint8 StopLineCheckFlag;             
extern uint8 RunOutFlag;                    
extern int32 DeviFuse_old;


extern uint8 ImgNew[60][250];
extern void ImaegExtract(uint8 *dst, uint8 *src, uint32 srclen);
extern uint8 ImagePro(void);
extern uint8 ImageSend(void);
extern uint8 VariablesInit(void);
extern int32 AbsInt(int32 val);
uint8 CurveSlopeGetLeft(void);
uint8 CurveSlopeGetRight(void);
uint8 BlackUdis(void);
extern uint8 BrickSpeDealServor(void);










#line 12 "C:\\Users\\Lenovo\\Desktop\\class3\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\\344\270\213\344\275\215\346\234\272\347\250\213\345\272\217_\346\221\204\345\203\217\345\244\2641\351\230\2373\346\234\21014\346\227\245\\src\\Sources\\C\\Function_C\\ImagePro.c"











uint8 limitStopLineBlackXiu = 30;       
uint8 ShiZhiFlag = 0;               
uint8 ShiZhiCount = 0;              
uint16 buXianCount = 0;             


uint8 xiaoZhiDaoFlag = 0;                 

uint8 ImgProFailCount = 0;          
uint8 RunOutFlag = 0;               

uint8 StopLineCheckBeginFlag = 0;       
uint8 StopLineCheckTimer = 0;           
uint8 StopLineCheckFlag = 0;            
int16 ErrorCountNow5 = 0;
uint8 flag000;
int32 flag111;
int flag222;


int ServoPIDDGetVal;
int ServoPIDDGetValOld;


uint8 const CenterLineHalfWidth[60] =  
{
64, 68, 72, 76, 80, 84, 88, 92, 96, 100,
104,108,112,116,120,124,128,132,136,140,
143,147,150,153,156,159,162,165,168,172,
177,179,181,183,185,187,189,191,193,195,
213,216,219,222,225,228,231,234,237,240,
100,100,100,100,100,100,100,100,100,100
};


uint8 const BlackLeftEdgeStartColOffset[60] = 
{
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,         
40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,         
43,43,45,45,48,48,50,50,53,53,55,55,58,58,60,60,63,63,65,65          
};


uint8 const BlackRightEdgeStartColOffset[60] = 
{
10,10,10,10,10,10,10,10,10,10,20,20,20,20,20,20,20,20,30,40,         
40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,         
43,43,45,45,48,48,50,50,53,53,55,55,58,58,60,60,63,63,65,65          
};





int16 const AngleSpeDealDeviNow[15] = 
{
  
  
50,100,130,130,130,
130,130,130,130,130,
130,130,100,100,100
};










 





int32 const AngleSpeDealSlopeC[15] = 
{
  
  
1500,2400,3000,3000,3000,
3000,3000,3000,2850,2550,
2250,2040,1950,1860,1800
};


uint8 const DeviNowArrayWight[3] = 
{
  0, 0, 100
};


int16 DeviNowArray[3] = 
{
  0, 0, 0
};




uint8 const SingleBlackWidthMin[60] = 
{
5,5,5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,5,5,
6,6,6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7
};


uint8 const SingleBlackWidthMax[60] = 
{
20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,20,20,
20,20,20,20,20,15,15,15,15,15    
};











 


 
int32 const BlackUdisMatrixFar[8] = 
{
        2950,
        4062,
     -243750,
           0,
       23420,
      -22387,
           0,
          32,
};
        
int32 const BlackUdisMatrixMiddle[8] = 
{
        2950,
        4062,
     -243750,
           0,
       23420,
      -22387,
           0,
          32,
};

        
int32 const BlackUdisMatrixLow[8] = 
{
       2950,
        4062,
     -243750,
           0,
       23420,
      -22387,
           0,
          32,
};


uint8 const LimitLeftWBAdjust[60] = 
{
10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
 5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};


uint8 const LimitRightWBAdjust[60] = 
{
10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
 5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};



uint8 CameraRealLeftCol = 320/2 - 250/2;    

uint8 ImgProSucceedFlag = 1;                 
uint8 ImgBlackSucceedFlag = 1;                 
uint8 ImgCenterSucceedFlag = 1;                

uint8 ImgNew[60][250];       
uint8 BlackLeftLoc[60][3];       
uint8 BlackRightLoc[60][3];      

uint8 CenterLineResult = 1;             
uint8 CenterKeyLine = 25;                  
uint8 CenterLocStore = 255;         
uint8 CenterHeadLine = 255;         
uint8 CenterEndLine = 255;          
uint8 BlackCenEdgeStartCol = 0;             
uint8 BlackGetPreDir;                       

uint8 CurveLineChosenC1 = 0;               
uint8 CurveLineChosenC2 = 0;               
uint8 CurveLineChosenC3 = 0;               
uint8 CurveLineChosenL1 = 0;               
uint8 CurveLineChosenL2 = 0;               
uint8 CurveLineChosenL3 = 0;               
uint8 CurveLineChosenR1 = 0;               
uint8 CurveLineChosenR2 = 0;               
uint8 CurveLineChosenR3 = 0;               
int16 SABCL = 0;                          
int16 SABCC = 0;                          
int16 SABCR = 0;                          
int16 CURVEL = 0;                          
int16 CURVEC = 0;                          
int16 CURVER = 0;                          






int32 SlopeL = 32767;                           
int32 SlopeC = 32767;                           
int32 SlopeR = 32767;                           

uint8 CurveSlopeFlagL = 1;                  
uint8 CurveSlopeFlagC = 1;                  
uint8 CurveSlopeFlagR = 1;                  

uint8 ErrorGetSelf;                 
uint8 ErrorGetCen;                 


uint8 BlackLeftRealWB[2];                  
uint8 BlackLeftRealB[2];                   
uint8 BlackLeftRealW[2];                   

uint8 LimitLeftWBMin = 35;
uint8 LimitLeftWBMax = 90;
uint8 LimitLeftWMin = 90;
uint8 LimitLeftWMax = 140;
uint8 LimitLeftBMin = 80;
uint8 LimitLeftBMax = 110;



uint8 BlackRightRealWB[2];                  
uint8 BlackRightRealB[2];                   
uint8 BlackRightRealW[2];                   

uint8 LimitRightWBMin = 35;
uint8 LimitRightWBMax = 90;
uint8 LimitRightWMin = 90;
uint8 LimitRightWMax = 140;
uint8 LimitRightBMin = 80;
uint8 LimitRightBMax = 110;

 


uint8 BlackLeft5SlopeIndex = 0;          
uint8 BlackLeft5SlopeRow[60];      
int32 BlackLeft5Slope[60];      

uint8 LimitLeftWB;    
uint8 LimitLeftW;      
uint8 LimitLeftB;      


uint8 LimitLeftHeadWB;    
uint8 LimitLeftHeadW;      
uint8 LimitLeftHeadB;      

uint8 BlackLeftCrossDone = 0;    
uint8 BlackLeftDone = 1;          
uint8 BlackLeft3ResetCount = 0;       
uint8 BlackLeftCrossTooLowLine = 3;    
uint8 BlackLeftStep4Flag = 0;          
uint8 BlackLeftStep4StartLine = 255;     
uint8 BlackLeftHeadLine = 255;   
uint8 BlackLeftEndLine = 255;    
uint8 BlackLeftWinPredictStore0 = 0;         
uint8 BlackLeftWinPredictStore1 = 0;         
uint8 BlackLeftWinPredictStore2 = 0;         
uint8 BlackLeftContinueFlag = 1;           
uint8 BlackLeftCrossConfirmFlag = 0;  
uint8 BlackLeftEdgeStartCol;      
uint8 BlackLeftLastEdgeStartCol;  
uint8 BlackLeftStep1ScanRow;      
uint8 BlackLeftRow1RealLastLine;       



uint8 BlackRight5SlopeIndex = 0;          
uint8 BlackRight5SlopeRow[60];      
int32 BlackRight5Slope[60];      

uint8 LimitRightWB;    
uint8 LimitRightW;      
uint8 LimitRightB;      


uint8 LimitRightHeadWB;    
uint8 LimitRightHeadW;      
uint8 LimitRightHeadB;      
uint8 BlackRightCrossDone = 0;   
uint8 BlackRightDone = 1;          
uint8 BlackRight3ResetCount = 0;       
uint8 BlackRightCrossTooLowLine = 3;    
uint8 BlackRightStep4Flag = 0;          
uint8 BlackRightStep4StartLine = 255;     
uint8 BlackRightHeadLine = 255;    
uint8 BlackRightEndLine = 255;     
uint8 BlackRightWinPredictStore0 = 0;         
uint8 BlackRightWinPredictStore1 = 0;         
uint8 BlackRightWinPredictStore2 = 0;         
uint8 BlackRightContinueFlag = 1;           
uint8 BlackRightCrossConfirmFlag = 0;  
uint8 BlackRightEdgeStartCol;      
uint8 BlackRightLastEdgeStartCol;  
uint8 BlackRightStep1ScanRow;      
uint8 BlackRightRow1RealLastLine;       


uint8 EmergencyStopCount = 0;     
uint8 EmergencyStopFlag = 0;      




uint8 DeviFlag = 0;                
uint8 DeviRowChosen = 0;               
uint8 DeviNowLevel = 0;      



uint8 AngleZoneJudgeRowL[5];  
uint8 AngleZoneJudgeColL[5];  
uint8 AngleZoneJudgeColLFlag[5]; 
uint8 AngleZoneJudgeCountColL[5]; 
uint8 AngleZoneJudgeRowR[5];  
uint8 AngleZoneJudgeColR[5];  
uint8 AngleZoneJudgeColRFlag[5]; 
uint8 AngleZoneJudgeCountColR[5]; 

uint8 AngleZoneConfirmLockMeterCount = 0; 
uint8 AngleZoneConfirmCount = 0;   
uint8 AngleZoneConfirmLockFlag = 0;    
                                       
uint8 AngleZoneConfirmMat[6];  
uint8 AngleZoneConfirmMatCollect = 0;      

uint8 AngleZoneConfirmMatLimit = 3;         


uint8 AngleConfirmCount = 0;   
uint8 AngleSpeDealBackCount = 0;  
uint8 AngleSpeDealDir = 0;        
uint8 AngleSpeDealFlag = 0;       
uint16 AngleConfirmCountMax = 0;   
uint8 AngleConfirmLockFlag = 0;    
                                   
uint8 AngleSpeDealExitJudgeFlag = 0;  
uint8 AngleConfirmMat[6];  
uint8 AngleConfirmMatCollect = 0;      

uint8 AngleConfirmMatLimit = 3;         
uint8 AngleLongHeadLineStrategy = 1;                
uint8 AngleHeadLineNum = 5;              



uint8 AngleStep1NotBrickEndColL;    
uint8 AngleStep1NotBrickBorderColL; 
uint8 AngleStep1NotBrickEndColR;    
uint8 AngleStep1NotBrickBorderColR; 


uint8 BrickConfirmCount = 0;   
uint8 BrickSpeDealBackCount = 0;  
uint8 BrickSpeDealDir = 0;        
uint8 BrickSpeDealFlag = 0;       
uint16 BrickConfirmCountMax = 0;   
uint8 BrickConfirmLockFlag = 0;    
                                   
uint8 BrickSpeDealExitJudgeFlag = 1;  
                                      
uint8 BrickConfirmMat0[6];  
uint8 BrickConfirmMatCollect0 = 0;      
uint8 BrickConfirmMat1[6];  
uint8 BrickConfirmMatCollect1 = 0;      

uint8 BrickSpeDealStartJudgeCol;     
uint8 BrickEndColL;    
uint8 BrickHeadColL;   
uint8 BrickBorderColL; 
uint8 BrickEndColR;    
uint8 BrickHeadColR;   
uint8 BrickBorderColR; 
uint8 BrickSpeDealCenFlag = 1; 
uint8 BrickLineCountNumRecord;

const int BrickSpeDealBias[20] = 
{
  30,30,30,25,25,  
  25,25,25,20, 20,
   20, 15, 5, 0, -2,
   -5, -10, -10, -19, -19
};

uint8 BrickConfirmMatLimit = 3;         
uint8 BrickConfirmFinalColCom = 50;     


uint8 SingleBlackAllFlag = 0;   
uint8 SingleBlackLastAllFlag = 0;      
uint8 SingleDoneFlag = 0;              
                         
uint8 SingleFloorFlag = 0;             
uint8 SingleFloorConfirmCount = 0;       
uint8 SingleFloorConfirmCountMax = 0;   
uint8 SingleBlackFlag[60];     


uint8 PathJudgeDone = 1;                   
uint8 PathType = 0;          
uint8 PathSmallSDoneFlag = 0;              
uint8 PathSmallSDir = 1;                   


int16 CenterLineLoc[60];      
LocationUdis BlackUdisLeftLocation[60];  
LocationUdis BlackUdisRightLocation[60]; 

int32 DeviFuse = 0;            
int32 DeviFuse_old = 0;
uint32 DeviFuseArray[10];
int32 Devi_near,Devi_far;      
int32 DeviPre = 0;                  
int32 DeviPrePre=0;              
int32 DeviPrePrePre=0;              
int16 ControlRowDeviInit[4];    
int16 ControlRowDeviOld[4]; 
uint8 BaseRowControlNum;        
uint8 FuzzyDegree;              
uint8 ControlRowWeight[4];      
uint16 Weight_sum = 0;            




uint8 BlackLeftBigChangeNumx[5];                     
uint8 BlackLeftBigChangeNumy[5];                     
uint8 BlackLeftBigChangeFlag = 0;              
int32 BlackLeftBigChangeSlopeStore = 32767;    
uint8 BlackLeftBigChangeJumpFlag = 0;                

uint8 BlackRightBigChangeNumx[5];                     
uint8 BlackRightBigChangeNumy[5];                     
uint8 BlackRightBigChangeFlag = 0;              
int32 BlackRightBigChangeSlopeStore = 32767;    
uint8 BlackRightBigChangeJumpFlag = 0;                

uint8 BlackLeftBigChangeCheckRow[60];   
uint8 BlackLeftBigChangeCheckAllRow;             
uint8 BlackRightBigChangeCheckRow[60];  
uint8 BlackRightBigChangeCheckAllRow;            


uint8 BlackLeftRollCheckFlag = 0;             
uint8 BlackRightRollCheckFlag = 0;             




uint8 BlackLeftCrossTailFlag = 2;       
uint8 BlackLeftCrossTailEndLine;        
uint8 BlackRightCrossTailFlag = 2;       
uint8 BlackRightCrossTailEndLine;        


uint8 BlackLeftPredictL[60];          
uint8 BlackLeftPredictR[60];          
uint8 BlackRightPredictL[60];          
uint8 BlackRightPredictR[60];          


uint8 RoadHalfWidth;                              
uint8 RoadHalfWidthLast;                          
uint8 RoadHalfWidthRecord[60];           
uint8 RoadHalfWidthSingle;                        
uint8 RoadHalfWidthWrongFlag = 2;                 
uint8 RoadHalfWidthWrongDir;                      
float RoadHalfWidthCompen;                        
uint8 RoadHalfWidthSwitch = 1;                        



uint8 BlackSingleFlag = 0;   
uint8 BlackSingleDir;        


uint8 BlackBigChangeFinalCheckFlag = 0;  


uint8 PathRealStraightCount = 0;   
uint8 PathRealStraightCountLimit = 10;  
uint8 PathRealStraightFlag = 0;        





int32 AbsInt(int32 val)
{
  if(val >= 0)
  {
    return val;
  }
  else
  {
    return (0-val);
  }
}


int32 BoundaryLimitRe(int32 x, int32 left, int32 right)
{
  if(x < left)
  {
    return left;
  }
  else if(x > right)
  {
    return right;
  }
  else
  {
    return x;
  }
}









int32 MaxRe(int32 a, int32 b)
{
  return (a > b ? a : b);
}









int32 MinRe(int32 a, int32 b)
{
  return (a < b ? a : b);
}









int32 AbsRe(int32 num1, int32 num2)
{
  if(num1 >= num2)
  {
    return (num1 - num2);  
  }
  else
  {
    return (num2 - num1);  
  }
}




int ShiZhiCheck()
{
    uint8 startRow = 59;
    uint8 row;
    uint8 col;
    uint32 limitL;
    uint32 limitR;
    uint32 limit;

    limitL = 0;
    limitR = 0;
    limit = 0;
    if(ShiZhiFlag==0)
    {
        
        if (BlackLeftDone != 1 || BlackRightDone != 1) { return 0; }
        
        if (AbsInt(SlopeL) < 1700 && AbsInt(SlopeR) < 1700
            && BlackRightCrossDone != 2 && BlackLeftCrossDone != 2
                && BlackRightEndLine > 57 && BlackLeftEndLine > 57)
        {
            if (BlackRightHeadLine >= 15 && BlackLeftHeadLine >= 15 && BlackRightHeadLine <= 59 && BlackLeftHeadLine <= 59 && AbsInt(BlackLeftHeadLine - BlackRightHeadLine) <= 10) { }
            else { return 0; }
        }
        else { return 0; }

        if (BlackLeftHeadLine >= BlackLeftEndLine) { return 0; }
        
        for (row = BlackLeftEndLine; row >= BlackLeftHeadLine; row--)
        {
            if (BlackLeftLoc[row][0] < 10 || BlackLeftLoc[row][0] > 240) { return 0; }
            else
            {
                limitL += ImgNew[row][BlackLeftLoc[row][0] - 9];
            }
        }
        for (row = BlackRightEndLine ; row >= BlackRightHeadLine; row--)
        {
            if (BlackRightLoc[row][0] < 10 || BlackRightLoc[row][0] > 240) { return 0; }
            else
            {
                limitR += ImgNew[row][BlackRightLoc[row][0] + 9];
            }
        }

        limit = (limitL + limitR) / (BlackLeftEndLine - BlackLeftHeadLine + 1) / 2;
        startRow = MinRe(BlackLeftHeadLine, BlackRightHeadLine) - 3;
        limit = MaxRe(limit, LimitLeftB) + 10;

        for (row = startRow; row > startRow - 3; row--)
        {
            for (col = 30; col <= 220; col++)
            {
                if (ImgNew[row][col] <= limit) { return 0; }
            }
        }
        ShiZhiCount = 0;
        return 1;
    }
    else
    {
        if(BlackLeftLoc[20][0]!=255 && BlackRightLoc[20][0]!=255){return 0;}
        else if(BlackRightHeadLine<15 && BlackLeftHeadLine<15){return 0;}
        else if(++ShiZhiCount>=6){return 0;}
        else{return 1;}
    }
}





uint8 StopLineCheck()
{
    uint8 row;
    uint8 col;
    uint16 leftCount = 0;
    uint16 rightCount = 0;
    uint16 centerErrorCount = 0;
    uint32 limitStopLineBlack = 0;
    
    
    if(StopLineCheckBeginFlag == 0)
    {
        if(++StopLineCheckTimer >= 50)
        {
            StopLineCheckBeginFlag = 1;
        }
        else {return 0;}
    }

    
    limitStopLineBlack = 0;
    centerErrorCount = 0;
    
    if (BlackLeftDone != 1 || BlackRightDone != 1) { return 0; }
    
    if (AbsInt(SlopeL) < 1500 && AbsInt(SlopeR) < 1500 && AbsInt(CURVEL) < 15 && AbsInt(CURVER) < 15
        && BlackRightCrossDone == 0 && BlackLeftCrossDone == 0
            && BlackRightHeadLine < 3 && BlackLeftHeadLine < 3 && BlackRightEndLine > 57 && BlackLeftEndLine > 57
                && BlackLeftCrossDone == 0 && BlackRightCrossDone == 0
                 && ShiZhiFlag == 0) { }
    else { return 0; }

    centerErrorCount = 0;
    
    for (row = 59; row >= 20; row--)
    {
        
        if (BlackLeftLoc[row][0] == 255 || BlackRightLoc[row][0] == 255)
        {
            centerErrorCount++;
            if (centerErrorCount > 5)
            {
                return 0;
            }
            continue;
        }
        limitStopLineBlack += ImgNew[row][BlackLeftLoc[row][0]];
        limitStopLineBlack += ImgNew[row][BlackRightLoc[row][0]];
    }
    limitStopLineBlack /= (59 - 20 + 1 - centerErrorCount)*2;

    centerErrorCount = 0;
    
    for (row = 55; row >= 40; row--)
    {
        
        if (ImgNew[row][BlackLeftLoc[row][0]] >= LimitLeftW || ImgNew[row][BlackRightLoc[row][0]] >= LimitRightW)
        {
            centerErrorCount++;
            if (centerErrorCount > 2)
            {
                return 0;
            }
            continue;
        }
    }

    centerErrorCount = 0;
    
    for (row = 59; row >= 20; row--)
    {
        
        if (BlackLeftLoc[row][0] == 255 || BlackRightLoc[row][0] == 255)
        {
            centerErrorCount++;
            if (centerErrorCount > 5)
            {
                return 0;
            }
            continue;
        }
        
        for (col = BlackLeftLoc[row][0] + 3; col <= (BlackLeftLoc[row][0] + BlackRightLoc[row][0]) / 2; col++)
        {
            if (ImgNew[row][col] < limitStopLineBlack+ limitStopLineBlackXiu)
            {
                leftCount++;
            }
        }

        
        for (col = BlackRightLoc[row][0] - 3; col >= (BlackLeftLoc[row][0] + BlackRightLoc[row][0]) / 2; col--)
        {
            if (ImgNew[row][col] < limitStopLineBlack + limitStopLineBlackXiu)
            {
                rightCount++;
            }
        }
    }


    
    if (leftCount + rightCount > 10 && leftCount >= 5 && rightCount >= 5)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
















int32 LeastSquareInt16a1(uint8 x[], int16 y[], uint8 num)
{
  int32 andxy = 0, andx = 0, andy = 0, andx2 = 0;
  int32 a1;
  uint8 i;
 
  for(i = 0; i < num; i++)
  {
    andxy += x[i] * y[i];
    andx += x[i];
    andy += y[i];
    andx2 += x[i] * x[i];
  }
  
  
  a1 = (int32)(1000 * (num * andxy - andx * andy) / (num * andx2 - andx * andx));    
  
  return a1;  
  
}











int32 LeastSquareInt16a0(uint8 x[], int16 y[], int32 a1, uint8 num)
{
  int32 andx = 0, andy = 0;
  int32 a0;
  uint8 i;
  for(i = 0; i < num; i++)
  {
    andx += x[i];
    andy += y[i];
  }
  
  
  a0 = (int32)(1000 * andy / num - a1 * andx / num);
  return a0;
}











int32 LeastSquarea1(uint8 x[], uint8 y[], uint8 num)
{
  int32 andxy = 0, andx = 0, andy = 0, andx2 = 0;
  int32 a1;
  uint8 i;
 
  for(i = 0; i < num; i++)
  {
    andxy += x[i] * y[i];
    andx += x[i];
    andy += y[i];
    andx2 += x[i] * x[i];
  }
  
  
  a1 = (int32)(1000 * (num * andxy - andx * andy) / (num * andx2 - andx * andx));    
  return a1;  
}












int32 LeastSquarea0(uint8 x[], uint8 y[], int32 a1, uint8 num)
{
  int32 andx = 0, andy = 0;
  int32 a0;
  uint8 i;
  for(i = 0; i < num; i++)
  {
    andx += x[i];
    andy += y[i];
  }
  
  
  a0 = (int32)(1000 * andy / num - a1 * andx / num);
  return a0;
}





























 














 











void SendCenterLineLoc(uint8 img[60])
{
    uint8 i;
    uint8 cmd[4] = {0, 255, 1, 255 };   
    uart_sendN(((UART_MemMapPtr)0x4006A000u), cmd, sizeof(cmd));    
    for(i = 0; i < 60; i++)
    {
      uart_send1(((UART_MemMapPtr)0x4006A000u), img[i]); 
    }
    
}














void SendImage(uint8 imgaddr[60][250])
{                            
    uint16 i, j;
    uint8 cmd[4] = {0, 255, 1, 0 };    

    
  
    uart_sendN(((UART_MemMapPtr)0x4006A000u), cmd, sizeof(cmd));    
    
    
    for(i = 0; i < 60; i++)
        for(j = 0; j < 250; j++)
            uart_send1(((UART_MemMapPtr)0x4006A000u), imgaddr[i][j]); 
}


















void BlackLeftRealClear(void)
{
    BlackLeftRealWB[0] = 0;
    BlackLeftRealWB[1] = 0;
    BlackLeftRealW[0] = 0;
    BlackLeftRealW[1] = 0;
    BlackLeftRealB[0] = 0;
    BlackLeftRealB[1] = 0;
}



uint8 BlackLeftHeadEndSearch(void)
{
  uint8 i;
  
  if(BlackLeftDone == 1)
  { 
    for(i = 0; ; i++)
    {
      if(BlackLeftLoc[i][0] != 255)
      { 
        BlackLeftHeadLine = i;
        break;
      }
      if(i == 60 - 1) 
      { 
        BlackLeftHeadLine = 255;
        break;
      }
    }
    
    
    if(BlackLeftHeadLine == 255)
    {
      BlackLeftEndLine = 255;
      BlackLeftDone = 0;
    }
    
    else
    {
      
      for(i = 60 - 1; ; i--)
      { 
        if(BlackLeftLoc[i][0] != 255)
        {
          BlackLeftEndLine = i;
          break;
        }
        
        if(i == BlackLeftHeadLine)
        {
          BlackLeftHeadLine = 255;
          BlackLeftEndLine = 255;
          break;
        }
      }
    }
  }
  
  else
  {
    BlackLeftHeadLine = 255;
    BlackLeftEndLine = 255;
  }
  
  
  if(SingleBlackAllFlag == 1)
  {
    BlackLeftLoc[BlackLeftHeadLine][0] = 255; 
    BlackLeftHeadLine += 1;
  }
  else
  {
  }
  
  return 1;
}


















uint8 BlackLeftBigChangeCheck(uint8 newrow, uint8 use)
{
  uint8 tempstorex, tempstorey;
  uint8 i;
  int32 tempslope1, tempslope2;
  
  
  tempstorex = BlackLeftBigChangeNumx[0];
  BlackLeftBigChangeNumx[0] = BlackLeftBigChangeNumx[1];
  BlackLeftBigChangeNumx[1] = BlackLeftBigChangeNumx[2];
  BlackLeftBigChangeNumx[2] = BlackLeftBigChangeNumx[3];
  BlackLeftBigChangeNumx[3] = BlackLeftBigChangeNumx[4];
  BlackLeftBigChangeNumx[4] = newrow;

  tempstorey = BlackLeftBigChangeNumy[0];
  BlackLeftBigChangeNumy[0] = BlackLeftBigChangeNumy[1];
  BlackLeftBigChangeNumy[1] = BlackLeftBigChangeNumy[2];
  BlackLeftBigChangeNumy[2] = BlackLeftBigChangeNumy[3];
  BlackLeftBigChangeNumy[3] = BlackLeftBigChangeNumy[4];
  BlackLeftBigChangeNumy[4] = BlackLeftLoc[newrow][0];
  
  
  if(BlackLeftBigChangeJumpFlag == 0)
  {
    
    for(i = 0; i <= 4; i++)
    {
      if(BlackLeftBigChangeNumx[i] == 255)
      {
        return 1;
      }
    }
    
    BlackLeftBigChangeJumpFlag = 1;
  }
  
  
  
  
  
  tempslope1 = (BlackLeftBigChangeNumy[2] - BlackLeftBigChangeNumy[0]) 
             * 1000   
             / (BlackLeftBigChangeNumx[2] - BlackLeftBigChangeNumx[0]);
  tempslope2 = (BlackLeftBigChangeNumy[4] - BlackLeftBigChangeNumy[2]) 
             * 1000   
             / (BlackLeftBigChangeNumx[4] - BlackLeftBigChangeNumx[2]);
  BlackLeftBigChangeSlopeStore = tempslope1;
  
  BlackLeft5Slope[BlackLeft5SlopeIndex] = BlackLeftBigChangeSlopeStore;
  BlackLeft5SlopeRow[BlackLeft5SlopeIndex] = newrow;  
  BlackLeft5SlopeIndex++;
  
  
  if(tempslope1 >= 0 && tempslope2 < 0)
  {
    
    if(tempslope1 >= tempslope2 + 4000)
    {
      
      
      
        
        BlackLeftBigChangeFlag = 1;
      
      
      
      
      
      BlackLeftBigChangeNumx[4] = BlackLeftBigChangeNumx[3];
      BlackLeftBigChangeNumx[3] = BlackLeftBigChangeNumx[2];
      BlackLeftBigChangeNumx[2] = BlackLeftBigChangeNumx[1];
      BlackLeftBigChangeNumx[1] = BlackLeftBigChangeNumx[0];
      BlackLeftBigChangeNumx[0] = tempstorex;
      BlackLeftBigChangeNumy[4] = BlackLeftBigChangeNumy[3];
      BlackLeftBigChangeNumy[3] = BlackLeftBigChangeNumy[2];
      BlackLeftBigChangeNumy[2] = BlackLeftBigChangeNumy[1];
      BlackLeftBigChangeNumy[1] = BlackLeftBigChangeNumy[0];
      BlackLeftBigChangeNumy[0] = tempstorey;
      
      
      BlackLeftLoc[BlackLeftBigChangeNumx[4]][0] = 255;
      BlackLeftLoc[BlackLeftBigChangeNumx[3]][0] = 255;
      
      
      return 0;
    }
    else
    {
      
      
      return 1;
    }
  }
  
  else if(tempslope1 < 0 && tempslope2 >= 0)
  {
    
    if(tempslope2 >= tempslope1 + 4000)
    {
      
      
      
        
        BlackLeftBigChangeFlag = 1;
      
      
      
      
      
      BlackLeftBigChangeNumx[4] = BlackLeftBigChangeNumx[3];
      BlackLeftBigChangeNumx[3] = BlackLeftBigChangeNumx[2];
      BlackLeftBigChangeNumx[2] = BlackLeftBigChangeNumx[1];
      BlackLeftBigChangeNumx[1] = BlackLeftBigChangeNumx[0];
      BlackLeftBigChangeNumx[0] = tempstorex;
      BlackLeftBigChangeNumy[4] = BlackLeftBigChangeNumy[3];
      BlackLeftBigChangeNumy[3] = BlackLeftBigChangeNumy[2];
      BlackLeftBigChangeNumy[2] = BlackLeftBigChangeNumy[1];
      BlackLeftBigChangeNumy[1] = BlackLeftBigChangeNumy[0];
      BlackLeftBigChangeNumy[0] = tempstorey;
      
      
      BlackLeftLoc[BlackLeftBigChangeNumx[4]][0] = 255;
      BlackLeftLoc[BlackLeftBigChangeNumx[3]][0] = 255;
      
      
      return 0;
    }
    else
    {
      
      
      return 1;
    }
  }
  
  else
  {
    
    
    return 1;
  }
  
}




uint8 BlackGetLeftJustWin(uint8 row, int32 colleft, int32 colright)
{
  uint8 temp1, abs1;
  uint8 tempadd1, tempadd2, tempadd3, tempadd4;
  
  
  colleft = BoundaryLimitRe(colleft, 0, 250 - 1);
  colright = BoundaryLimitRe(colright, 0, 250 - 1);
  
  
  for( ; colright > colleft; colright--) 
  {
    
    if(ImgNew[row][colright] > ImgNew[row][colright-1-3])
    {
      abs1 = ImgNew[row][colright] - ImgNew[row][colright-1-3];
    }
    else
    {
      abs1 = 0;
    }
   
    if( 
        
        
          (abs1 > LimitLeftWB - LimitLeftWBAdjust[row]) 
        &&(ImgNew[row][colright] > LimitLeftW)                     
        &&(ImgNew[row][colright-1-3] < LimitLeftB)                   
       )
    {
            
            if(colright < 250 - 1 - 6)
            {
              tempadd1 = (ImgNew[row][colright+3] > LimitLeftW);
              tempadd2 = (ImgNew[row][colright+4] > LimitLeftW);
              tempadd3 = (ImgNew[row][colright+5] > LimitLeftW);
              tempadd4 = (ImgNew[row][colright+6] > LimitLeftW);
            }
            else
            {
              tempadd1 = 1;
              tempadd2 = 1;
              tempadd3 = 1;
              tempadd4 = 1;
            }       
      
          
          if(row > 50)
          {                        
            temp1 = (
                      (ImgNew[row][colright-2-3] < LimitLeftB)
                    &&(ImgNew[row][colright-3-3] < LimitLeftB)
                    
                    &&(ImgNew[row][colright+1] > LimitLeftW)
                    &&(ImgNew[row][colright+2] > LimitLeftW)
                    &&(tempadd1 == 1)
                    &&(tempadd2 == 1)
                    &&(tempadd3 == 1)
                    &&(tempadd4 == 1)
                    );
          }
          else
          {
            
            if(row > 40)
            {
              temp1 = (
                        (ImgNew[row][colright-2-3] < LimitLeftB)
                      
                      &&(ImgNew[row][colright+1] > LimitLeftW)
                      &&(tempadd1 == 1)
                      &&(tempadd2 == 1)
                      &&(tempadd3 == 1)
                      &&(tempadd4 == 1)                        
                      );
            }
            else
            {
              if(row > 20)
              {
                
                temp1 = (
                        
                        (tempadd1 == 1)
                      &&(tempadd2 == 1)
                      &&(tempadd3 == 1)
                      &&(tempadd4 == 1)
                        );                   
              }
              else
              {
                
                temp1 = (
                        (tempadd1 == 1)
                      &&(tempadd2 == 1)
                      &&(tempadd3 == 1)
                      &&(tempadd4 == 1)
                        );    
              }
                    
            }
          }
          
          
          if(temp1 == 1)
          {
            
            return colright;              
            
            
          }
    }
  }
  
  
  
  
  return 255;  
  
}

















uint8 BlackGetLeftStep1Edge(uint8 row, uint8 use, uint8 preflag)
{
  uint8 index, col, temp1;
  uint8 abs1;
  uint8 tempadd1, tempadd2, tempadd3, tempadd4;
  uint8 avgr1, avgl1;
  uint8 i;
  
  
  col = (uint8)MinRe((int32)BlackLeftEdgeStartCol+10, 250 - 1);

  
  
  if((BlackGetPreDir == 1)
  &&(BlackRightLoc[row][0] != 255)
  &&(preflag == 0)
    )
  {
    
    if(
      (row > 60 - 5)
    &&(SingleBlackLastAllFlag == 1)
       )
    {
      col = MaxRe(col, MinRe(250 - 1, BlackRightLoc[row][0] + SingleBlackWidthMax[row]));
    }
    
    else if(
           (row <= 60 - 5)
         
            )
    {
      col = MinRe(col, BlackRightLoc[row][0]);
    }
    else
    {
      col = MinRe(col, BlackRightLoc[row][0]);
    }
  }
  else
  {    
  }
  
  
  BlackLeftPredictL[row] = 4 + 3;
  BlackLeftPredictR[row] = col;
  
  index = 0;         
  
  for(; col >= 4+3; col--) 
  {
      
      if(ImgNew[row][col] > ImgNew[row][col-1-3])
      {
        abs1 = ImgNew[row][col] - ImgNew[row][col-1-3];
      }
      else
      {
        abs1 = 0;
      }
      
      if( 
          
          
          (abs1 > LimitLeftWB - LimitLeftWBAdjust[row]) 
        
        &&(ImgNew[row][col] > LimitLeftW)                     
        &&(ImgNew[row][col-1-3] < LimitLeftB)                   
         )
      {
            
            if(col < 250 - 1 - 6)
            {
              tempadd1 = (ImgNew[row][col+3] > LimitLeftW);
              tempadd2 = (ImgNew[row][col+4] > LimitLeftW);
              tempadd3 = (ImgNew[row][col+5] > LimitLeftW);
              tempadd4 = (ImgNew[row][col+6] > LimitLeftW);
            }
            else
            {
              tempadd1 = 1;
              tempadd2 = 1;
              tempadd3 = 1;
              tempadd4 = 1;
            }       
          
          
          if(row > 50)
          {                                
            temp1 = (
                      (ImgNew[row][col-2-3] < LimitLeftB)
                    &&(ImgNew[row][col-3-3] < LimitLeftB)
                    &&(ImgNew[row][col-4-3] < LimitLeftB)
                    &&(ImgNew[row][col+1] > LimitLeftW)
                    &&(ImgNew[row][col+2] > LimitLeftW)
                    &&(tempadd1 == 1)
                    &&(tempadd2 == 1)
                    &&(tempadd3 == 1)
                    &&(tempadd4 == 1)
                    );
          }          
          else
          {
            
            if(row > 40)
            {
              temp1 = (
                        (ImgNew[row][col-2-3] < LimitLeftB)
                      &&(ImgNew[row][col-3-3] < LimitLeftB)
                      &&(ImgNew[row][col+1] > LimitLeftW)
                      &&(tempadd1 == 1)
                      &&(tempadd2 == 1)
                      &&(tempadd3 == 1)
                      &&(tempadd4 == 1)
                      );
            }            
            else
            {
              if(row > 20)
              {
                
                temp1 = (
                        (ImgNew[row][col-2-3] < LimitLeftB)
                      &&(tempadd1 == 1)
                      &&(tempadd2 == 1)
                      &&(tempadd3 == 1)
                      &&(tempadd4 == 1)
                        );
              }
              else
              {
                
                temp1 = (
                        (tempadd1 == 1)
                      &&(tempadd2 == 1)
                      &&(tempadd3 == 1)
                      &&(tempadd4 == 1)
                        );
              }
            }
          }

          if(temp1)
          {            
              
              BlackLeftLoc[row][index] = col - 1 - 3;          
              index++;
              break;
            
          }    
      }   
  }
  
  
  if(index == 0)
  {
    
    if(preflag == 0)
    {
      
      BlackLeftRealClear();
    }
    
    BlackLeftLoc[row][0] = 255;
    return 0;
  }
  
  
  if(preflag == 0)
  {
    
    if(BlackLeftBigChangeCheck(row, use) == 1)
    {
      
      
      if(
        (SingleBlackAllFlag == 0) 
      &&(BlackGetPreDir == 1)   
        )
      {
        
        if((BlackLeftLoc[row][0] != 255)
         &&(BlackRightLoc[row][0] != 255)
         &&(BlackRightLoc[row][0] < BlackLeftLoc[row][0])
         &&(BlackRightLoc[row][0] - BlackLeftLoc[row][0] < SingleBlackWidthMax[row]) 
        )
        {
          
          if(
            (BlackRightLoc[row][0] - 1 - 3 - 5 < 0)
          ||(BlackLeftLoc[row][0] + 1 + 3 + 5 > 250 - 1)
            )
          {
            
            
            if(row > 60 - 5)
            {
                for(i = 0; i <= 4; i++)
                {
                    BlackLeftBigChangeNumx[i] = 255;
                    BlackLeftBigChangeNumy[i] = 255;
                }
                BlackLeftBigChangeJumpFlag = 0;
            }
            else
            {
            }
            
            
            BlackLeftLoc[row][0] = 255;
            return 0;
          }
          else
          {
            
            avgr1 = (ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 1]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 2]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 3]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 4]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 5])
                   / 5;
            
            avgl1 = (ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 1]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 2]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 3]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 4]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 5])
                   / 5;    
            if(AbsInt(avgr1 - avgl1) < 20)
            {
              
              SingleBlackFlag[row] = 1;      
              
            }
            else
            {
              
              
              if(row > 60 - 5)
              {
                  for(i = 0; i <= 4; i++)
                  {
                      BlackLeftBigChangeNumx[i] = 255;
                      BlackLeftBigChangeNumy[i] = 255;
                  }
                  BlackLeftBigChangeJumpFlag = 0;
              }
              else
              {
              }             
              
              
              BlackLeftLoc[row][0] = 255;
              return 0;              
            }
          }          
        }
        else
        {
          
          SingleBlackFlag[row] = 0;
        }
      }
      
      else
      {
      }
      
      
      
    }
    else
    {
      
      BlackLeftBigChangeCheckRow[row] = 1;
      BlackLeftBigChangeCheckAllRow = 1;
      
      
      
      
      
      BlackLeftLoc[row][0] = 255;
      return 0;    
    }
  }
  
  else
  {
    
  }
  
  
  if(preflag == 0)
  {
    
    
    if(use == 1)
    {
      BlackLeftRealWB[0] = ImgNew[row][col] - ImgNew[row][col-1-3]; 
      BlackLeftRealW[0] = ImgNew[row][col];
      BlackLeftRealB[0] = ImgNew[row][col-1-3];
    }
    else if(use == 2)
    {
      BlackLeftRealWB[1] = ImgNew[row][col] - ImgNew[row][col-1-3]; 
      BlackLeftRealW[1] = ImgNew[row][col];
      BlackLeftRealB[1] = ImgNew[row][col-1-3];
    }
    else
    {
    }
  }
  else
  {
  }
  
  return 1;
  
}













uint8 BlackGetLeftStep2Win(uint8 row, uint8 win, uint8 predict, uint8 use)
{
  uint8 col, temp;
  
  
  
  
  
  if(predict <= win)
  {
    temp = 4 + 3;
  }  
  else
  {
    temp = predict - win;
    if(temp < 4 + 3)
    {
      temp = 4 + 3;
    }
    else 
    {
    } 
  }
  
  
  if(predict + win > 250 - 1)
  {
    col = 250 - 1;  
  }
  else
  {
    col = predict + win;  
  }
  
  
  if((BlackGetPreDir == 1)
  &&(SingleBlackAllFlag == 0)   
  &&(BlackRightLoc[row][0] != 255)
    )
  {
    col = MinRe(col, BlackRightLoc[row][0]);
  }
  else
  {
  }
  
  
  BlackLeftPredictL[row] = temp;
  BlackLeftPredictR[row] = col;
  
  
  if(col <= temp) return 0;
  
  
  col = BlackGetLeftJustWin(row, temp, col);
  if(col != 255)
  {
    
    BlackLeftLoc[row][0] = col - 1 - 3;

    
    if(BlackLeftBigChangeCheck(row, use) == 0)
    {              
      
      BlackLeftBigChangeCheckRow[row] = 1;
      BlackLeftBigChangeCheckAllRow = 1;
   
      
      
      BlackLeftLoc[row][0] = 255;
      return 0;
    }
    else
    {
    }
    
    
    
    if(use == 1)
    {
      BlackLeftRealWB[0] = ImgNew[row][col] - ImgNew[row][col-1-3]; 
      BlackLeftRealW[0] = ImgNew[row][col];
      BlackLeftRealB[0] = ImgNew[row][col-1-3];
    }
    else if(use == 2)
    {
      BlackLeftRealWB[1] = ImgNew[row][col] - ImgNew[row][col-1-3]; 
      BlackLeftRealW[1] = ImgNew[row][col];
      BlackLeftRealB[1] = ImgNew[row][col-1-3];
    }
    else
    {
    }     
    
    return 1;                  
  }
  else
  {
    
    BlackLeftLoc[row][0] = 255;
    return 0;   
  }
  
}













uint8 BlackGetLeftStep1Scan(uint8 FirstLine, uint8 LastLine, uint8 CrossFlag)
{
    uint8 row, temp1, temp2;
    uint8 abs1;
    uint8 tempWB, tempW, tempB;
    uint8 flag, i;
    
    flag = 0;
    
    for(row = FirstLine; row > LastLine; row -= 2)
    {
      
      temp1 = BlackGetLeftStep1Edge(row, 1, 0);
      temp2 = BlackGetLeftStep1Edge(row-1, 2, 0);
      if(temp1 == 1 && temp2 == 1)
      {
        abs1 = AbsRe(BlackLeftLoc[row-1][0], BlackLeftLoc[row][0]);
        
        if(abs1 < 8)
        {
          
          
          if(CrossFlag == 1)
            {
              
              tempWB = (BlackLeftRealWB[0] + BlackLeftRealWB[1]) / 2 - 20; 
              if(tempWB < LimitLeftWBMin) tempWB = LimitLeftWBMin;
              else if(tempWB > LimitLeftWBMax) tempWB = LimitLeftWBMax;
              else ;
              LimitLeftWB = tempWB;
              
              
              tempW = (BlackLeftRealW[0] + BlackLeftRealW[1]) / 2 - 40;
              if(tempW < LimitLeftWMin) tempW = LimitLeftWMin;
              else if(tempW > LimitLeftWMax) tempW = LimitLeftWMax;
              else ;
              LimitLeftW = tempW;
              
              
              tempB = (BlackLeftRealB[0] + BlackLeftRealB[1]) / 2 + 35;
              if(tempB < LimitLeftBMin) tempB = LimitLeftBMin;
              else if(tempB > LimitLeftBMax) tempB = LimitLeftBMax;
              else ;
              
              if(tempB >= LimitLeftW)
              {
                tempB = LimitLeftW - 1;
              }
              else
              {
              }
              
              LimitLeftB = tempB;
            }
          break;
        }
        else
        {
          
          BlackLeftLoc[row][0] = 255;
          BlackLeftLoc[row-1][0] = 255;
          
          BlackLeftBigChangeNumx[3] = 255;
          BlackLeftBigChangeNumx[4] = 255;
          BlackLeftBigChangeNumy[3] = 255;
          BlackLeftBigChangeNumy[4] = 255;
          BlackLeftBigChangeJumpFlag = 0;
        }
      }
      else if(temp1 == 0 && temp2 == 1)
      {
        
        flag = 1;
      }
      else if(temp1 == 1 && temp2 == 0)
      {
        
        flag = 1;
      }
      else
      {
      }
    }   
    
    
    if(row <= LastLine)
    {
      return 255;
    }               
    else
    {
        
        if(flag == 1)
        {
            
            for(i = FirstLine; ; i--)
            {
                if(i == row) break;
                BlackLeftLoc[i][0] = 255;                
            }
            
            
            if(CrossFlag == 1)
            {
              
              for(i = 0; i <= 2; i++)
              {
                  BlackLeftBigChangeNumx[i] = 255;
                  BlackLeftBigChangeNumy[i] = 255;
                  BlackLeftBigChangeJumpFlag = 0;   
              }
            }
            else
            {
            }
        }
        else
        {

        }
        
        return row;
    }
  
}











uint8 BlackLeftCrossStep3(uint8 FirstLine, uint8 LastLine)
{
  int32 delta_x, delta_y, delta, index;
  uint8 row, temp1, temp2;
  uint8 i;
  
  
  
  if(LastLine >= FirstLine)
  {
    
    return 0;  
  }
  
  
  if(BlackLeftLoc[LastLine][0] == 255)
  {
    
    for(i = FirstLine - 1; ; i--)
    {
      BlackLeftLoc[i][0] = 255;
      if(i == 0) break;
    }
    
    return 0;
  }
  else
  {
  }
  
  temp1 = BlackLeftLoc[FirstLine][0];
  temp2 = BlackLeftLoc[LastLine][0];
  
  


































 
  
  delta_y = FirstLine - LastLine;
  
  
  
  if(temp1 < temp2)
  {
    
    delta_x = temp2 - temp1;  
    delta = delta_x * 1000 / delta_y; 
    
    index = 1;
    for(row = FirstLine - 1; row >= LastLine + 1; row-- )
    {
      
      BlackLeftLoc[row][0] = (uint8)(BlackLeftLoc[FirstLine][0] + delta * index / 1000);
      index += 1;
    }
  }
  
  else if(temp1 > temp2)
  {
    
    delta_x = temp1 - temp2;
    delta = delta_x * 1000 / delta_y;
    
    index = 1;
    for(row = FirstLine - 1; row >= LastLine + 1; row-- )
    {
      
      BlackLeftLoc[row][0] = (uint8)(BlackLeftLoc[FirstLine][0] - delta * index / 1000);
      index += 1;
    }
  }
  
  else
  {
    for(row = FirstLine - 1; row >= LastLine + 1; row-- )
    {
      
      BlackLeftLoc[row][0] = temp1;
    }
  }
  
  return 1;
    
}











uint8 BlackLeftCrossConfirm(uint8 Row1RealLastLine, uint8 Row2RealFirstLine)
{
  uint8 row, index;
  uint8 x[4];
  uint8 y[4];
  
  int32 a0, a1, temp;

  
  if(BlackLeftLoc[Row2RealFirstLine][0] > BlackLeftLoc[Row2RealFirstLine-1][0]) 
  {
    return 0;
  }
  
  else if((BlackLeftLoc[Row2RealFirstLine][0] < BlackLeftLoc[Row2RealFirstLine-1][0])
   &&(BlackLeftLoc[Row2RealFirstLine-1][0] - BlackLeftLoc[Row2RealFirstLine][0] >= 3)
     )
  {
    return 0;
  }
  
  else if((SlopeR > 3000) 
   &&(BlackRightHeadLine < 40) 
     )
  {
    return 0;
  }
  else
  {
  }
  
  
  
  
  
  
  index = 0;
  for(row = Row1RealLastLine; ; row++)
  {
    
    if(BlackLeftLoc[row][0] != 255)
    {
      y[index] = BlackLeftLoc[row][0];
      x[index] = row;
      index++;
    }
    
    if(index == 4) break;
    
    if(row == 60 - 1) 
    {
      if(index == 0) return 0;
      
      if(BlackLeftLoc[Row2RealFirstLine][0] > y[0] && BlackLeftLoc[Row2RealFirstLine][0] - y[0] < 50)
      {
        return 1;
      }
      else
      {
        return 0;
      }      
    }
    else
    {
    }
  }
  
  
  
  a1 = LeastSquarea1(x, y, 4);
  
  
  if(a1 > 1100) return 0;
  
  a0 = LeastSquarea0(x, y, a1, 4);
  
  
  temp = (a0 + a1 * Row2RealFirstLine) / 1000;

  
  if(
    (BlackLeftLoc[Row2RealFirstLine][0] > temp - 40) 
  &&(BlackLeftLoc[Row2RealFirstLine][0] < temp + 40)  
    )
  {
    return 1;
  }
  else
  {
    return 0;
  }
    
   
}














uint8 BlackGetLeftCrossSpeWin(uint8 row, uint8 colleft, uint8 colright, uint8 use)
{
  uint8 col;
  
  
  
  
  
  if(colleft < 4 + 3)
  {
    colleft = 4 + 3;
  }
  else 
  {
  } 

  
  if(colright > 250 - 1)
  {
    colright = 250 - 1;  
  }
  else
  {
  }
  
  
  if((BlackGetPreDir == 1)
   &&(BlackRightLoc[row][0] != 255)
     )
  {
    colright = MinRe(colright, BlackRightLoc[row][0]);
  }
  else
  {
  }
  
  
  BlackLeftPredictL[row] = colleft;
  BlackLeftPredictR[row] = colright;
  
  
  if(colleft >= colright) return 0;
  
  
  col = BlackGetLeftJustWin(row, colleft, colright);
  if(col != 255)
  {
    
    BlackLeftLoc[row][0] = col - 1 - 3;

    
    if(BlackLeftBigChangeCheck(row, use) == 0)
    {              
      
      BlackLeftBigChangeCheckRow[row] = 1;
      BlackLeftBigChangeCheckAllRow = 1;
   
      
      
      BlackLeftLoc[row][0] = 255;
      return 0;
    }
    else
    {
    }
    
    
    
    if(use == 1)
    {
      BlackLeftRealWB[0] = ImgNew[row][col] - ImgNew[row][col-1-3]; 
      BlackLeftRealW[0] = ImgNew[row][col];
      BlackLeftRealB[0] = ImgNew[row][col-1-3];
    }
    else if(use == 2)
    {
      BlackLeftRealWB[1] = ImgNew[row][col] - ImgNew[row][col-1-3]; 
      BlackLeftRealW[1] = ImgNew[row][col];
      BlackLeftRealB[1] = ImgNew[row][col-1-3];
    }
    else
    {
    }     
    
    return 1;   
  }
  else
  {
    
    BlackLeftLoc[row][0] = 255;
    return 0; 
  }
}














uint8 BlackGetLeftCrossSpeScan(uint8 Row2FirstLine, uint8 Row2LastLine, uint8 LastWinPredict)
{
  uint8 row;
  uint8 temp1, temp2, temppredict, tempminus;
  uint8 colleft, colright;
  uint8 i;
  
  
  temppredict = LastWinPredict;
  
  
  
  
  for(i = Row2FirstLine+1; ; i++)
  {
    if(BlackLeftLoc[i][0] != 255)
    {
      colleft = BlackLeftLoc[i][0];
      break;
    }
    else
    {
    }
    
    if(i == 60 - 1) return 255;
  }
  




















  
  for(row = Row2FirstLine; ; row -= 2)
  {
    
    colright = BoundaryLimitRe(temppredict + 15 * 2,
                               0,
                               250 - 1);        
    
    
    colright = MaxRe(colright, 250 / 2 - 1 + BlackLeftEdgeStartColOffset[row]);
    
    
    temp1 = BlackGetLeftCrossSpeWin(row, colleft, colright, 1);
    temp2 = BlackGetLeftCrossSpeWin(row-1, colleft, colright, 2);
    
    if(temp1 == 1 && temp2 == 1)
    {
      return row;
    }
    
    else if(temp1 == 0 && temp2 == 0)
    {
      
      tempminus = BoundaryLimitRe(BlackLeftWinPredictStore2 + BlackLeftWinPredictStore2 - BlackLeftWinPredictStore1,
                                  0,
                                  250 - 1);
      
      temppredict = tempminus;
      BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
      BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
      BlackLeftWinPredictStore2 = temppredict;      
    }
    
    else
    {
      
      BlackLeftLoc[row][0] = 255;
      BlackLeftLoc[row-1][0] = 255;
      
      
      tempminus = BoundaryLimitRe(BlackLeftWinPredictStore2 + BlackLeftWinPredictStore2 - BlackLeftWinPredictStore1,
                                  0,
                                  250 - 1);
      
      temppredict = tempminus;
      BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
      BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
      BlackLeftWinPredictStore2 = temppredict;        
    }
      
      
      
    
    if(row == Row2LastLine) 
    {
      return 255;
    }
    else
    {
    }
  }
 



}












uint8 BlackLeftAgainForCross(uint8 Row2FirstLine, uint8 Row2LastLine, uint8 Row1RealLastLine, uint8 LastWinPredict)
{
    uint8 row, temp, temp1, temp2;
    uint8 Row2RealFirstLine; 
    uint8 i;
    
    uint8 tempWB, tempW, tempB;
    uint8 tempminus;
    
    
    for(i = Row1RealLastLine; i <= 60 - 1; i++)
    {
      if(BlackLeftLoc[i][0] != 255)
      {
        Row1RealLastLine = i;
        break;
      }
      else
      {
      }
    }
    
    
    for(i = 0; i <= 5; i++)
    {
      if(ImgNew[Row1RealLastLine - 4][BlackLeftLoc[Row1RealLastLine][0] + 5 + i] < LimitLeftB) 
      {
        return 0;
      }
      else if(ImgNew[Row1RealLastLine - 5][BlackLeftLoc[Row1RealLastLine][0] + 5 + i] < LimitLeftB) 
      {
        return 0;
      }
      else
      {
      }      
    }
    
    
    
    
    
    temp = BlackGetLeftCrossSpeScan(Row2FirstLine, Row2LastLine, LastWinPredict);
    
    
    if(
      (temp == 255)
    ||(temp <= 1)
    ||(1 == 1 && temp <= 9)  
      )
    {
      
      for(i = Row2FirstLine; ; i--)
      {
        BlackLeftLoc[i][0] = 255;
        if(i == 0) break;
      }
      return 0;  
    }
    else 
    {
      
      
      
      if(BlackLeftCrossConfirm(Row1RealLastLine+1, temp) == 0)
      { 
        BlackLeftCrossConfirmFlag = 1;  
        for(i = Row2FirstLine; ; i--)
        {
          BlackLeftLoc[i][0] = 255;
          if(i == 0) break;
        }
        return 0;
      }
      
      else
      {
        BlackLeftCrossConfirmFlag = 2;  
        row = temp;
      }
      
      
      
      
      
    }
    
    Row2RealFirstLine = row; 
    
    
    
    temp = BoundaryLimitRe(BlackLeftLoc[row-1][0] + BlackLeftLoc[row-1][0] - BlackLeftLoc[row][0],
                           0,
                           250 - 1);
    
    BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
    BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
    BlackLeftWinPredictStore2 = temp;    
    
    
    for(row -= 2; ; row -= 2)
    {
      
      temp1 = BlackGetLeftStep2Win(row, 15, temp, 1);
      temp2 = BlackGetLeftStep2Win(row-1, 15, temp, 2);
      
      
      if(temp1 && temp2) 
      {
        
        tempWB = (BlackLeftRealWB[0] + BlackLeftRealWB[1]) / 2 - 20; 
        if(tempWB < LimitLeftWBMin) tempWB = LimitLeftWBMin;
        else if(tempWB > LimitLeftWBMax) tempWB = LimitLeftWBMax;
        else ;
        LimitLeftWB = tempWB;
        
        
        tempW = (BlackLeftRealW[0] + BlackLeftRealW[1]) / 2 - 40;
        if(tempW < LimitLeftWMin) tempW = LimitLeftWMin;
        else if(tempW > LimitLeftWMax) tempW = LimitLeftWMax;
        else ;
        LimitLeftW = tempW;
        
        
        tempB = (BlackLeftRealB[0] + BlackLeftRealB[1]) / 2 + 35;
        if(tempB < LimitLeftBMin) tempB = LimitLeftBMin;
        else if(tempB > LimitLeftBMax) tempB = LimitLeftBMax;
        else ;
        
        if(tempB >= LimitLeftW)
        {
          tempB = LimitLeftW - 1;
        }
        else
        {
        }
        LimitLeftB = tempB;
        
        
        temp = BoundaryLimitRe(BlackLeftLoc[row-1][0] + BlackLeftLoc[row-1][0] - BlackLeftLoc[row][0],
                               0,
                               250 - 1);
        
        BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
        BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
        BlackLeftWinPredictStore2 = temp;
      }
      
      else
      {
        
        tempminus = BoundaryLimitRe(BlackLeftWinPredictStore2 + BlackLeftWinPredictStore2 - BlackLeftWinPredictStore1,
                                    0,
                                    250 - 1);
        
        temp = tempminus;
        BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
        BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
        BlackLeftWinPredictStore2 = temp;
      }       
      
      if((row == Row2LastLine) || (row == Row2LastLine+1)) break;      
    }
    
    
    if (BlackLeftLoc[Row1RealLastLine][0] == 255)
    {

        
        for (i = Row1RealLastLine; ; i++)
        {
            if (BlackLeftLoc[i][0] != 255)
            {
                Row1RealLastLine = i;
                break;
            }
            else
            {
            }
            
            if (i == 60 - 1) return 1;
        }

        
        if (BlackLeftCrossStep3(Row1RealLastLine, Row2RealFirstLine) == 0)
        {
            return 0;
        }

    }
    else
    {
        
        
        if (BlackLeftCrossStep3(Row1RealLastLine, Row2RealFirstLine) == 0)
        {
            return 0;
        }
    }

    
    return 1;
        
}











uint8 BlackLeftStep4BackLine(uint8 Step4StartLine, uint8 flag)
{
  uint8 row;
  uint8 i, index;
  uint8 x[4];   
  uint8 y[4];
  uint8 j;
  uint8 temp1;
  uint8 tempend;
  
  int32 temp;
  int32 a0;
  int32 a1;
  
  
  if(flag == 0)
  {
    
    
    if(BlackLeftStep1ScanRow < 50)
    {
      
      
      if(BlackLeft5Slope[0] + 3400 < 0 || AbsInt(BlackLeft5Slope[0])>3400)
      {
        
        BlackLeftCrossTailFlag = 1;
        BlackLeftHeadEndSearch();
        if (BlackLeftEndLine - BlackLeftHeadLine<=8 && BlackLeftHeadLine!=255 && BlackLeftEndLine!=255)
        {
            
            for (i = BlackLeftHeadLine; i <= BlackLeftEndLine; i++)
            {
                BlackLeftLoc[i][0] = 255;
            }
            return 0;
        }
        else if (BlackLeft5Slope[0] == 32767)
        {
            
            for (i = 0; i <= 59; i++)
            {
                BlackLeftLoc[i][0] = 255;
            }
            return 0;
        }
        
        if(BlackLeftEndLine - BlackLeftHeadLine - 4 < 0 || BlackLeft5SlopeIndex - 1 < 0)
        {
          return 0;
        }
        else
        {
        }        
        tempend = MinRe(BlackLeftEndLine - BlackLeftHeadLine - 4, BlackLeft5SlopeIndex - 1);
        
        for(i = 0; ; i++)
        {
          
          if(BlackLeft5Slope[i] + 2100 > 0)
          {
            BlackLeftCrossTailEndLine = BlackLeft5SlopeRow[i];
            break;
          }
          
          if(i == tempend) return 0;  
          
        }
        
        BlackLeftCrossTailEndLine += 4;
        
        i = MinRe(BlackLeft5SlopeRow[0] + 4, 60 - 1);
        i = MaxRe(BlackLeftStep1ScanRow, i);
        if(i >= BlackLeftCrossTailEndLine)
        {
          
          for(; ; i--)
          {
            BlackLeftLoc[i][0] = 255;
            if(i == BlackLeftCrossTailEndLine) break;
          }
          
          Step4StartLine = BlackLeftCrossTailEndLine - 1;
        }
        else
        {
        }
      }
      else
      {
        
        BlackLeftCrossTailFlag = 0;      
      }
    }
    else
    {    
      
      BlackLeftCrossTailFlag = 0;
    }
  }
  
  else
  {
  }
 
  
  if(Step4StartLine - 4 - 4 < 0)
  {
    temp1 = 0;    
  }
  else
  {
    temp1 = Step4StartLine - 4 - 4;
  }
  
  
  
  index = 0;
  for(i = Step4StartLine; ; i--)
  {
    if(BlackLeftLoc[i][0] != 255)
    {
      y[index] = BlackLeftLoc[i][0];
      x[index] = i;
      index++;
    }
    if(index == 4)
    {
      break;  
    }
    if(i == temp1)
    {
      return 0;
    }
  }
  
  
  
  a1 = LeastSquarea1(x, y, 4);
  














 
  
  
  
  




 
  
  
  a0 = LeastSquarea0(x, y, a1, 4);
  
  for(row = Step4StartLine + 1; row <= 60 - 1; row++)
  {
    
    temp = (a0 + a1 * row) / 1000;
    if(temp >= 250-1)
    {
      
      
      for(j = row; ; j++)
      {
        BlackLeftLoc[j][0] = 250-1;
        if(j == 60 - 1) break;
      }
      break;
    }
    else if(temp <= 0)
    {
      
      
      for(j = row; ; j++)
      {
        BlackLeftLoc[j][0] = 0;
        if(j == 60 - 1) break;
      }
      break;
    }
    else
    {
      BlackLeftLoc[row][0] = (uint8)(temp); 
    }
  }
  
  
  
  return 1;
  
}





uint8 BlackLeftContinueAdd(void)
{
    uint8 row, i, j;
    uint8 tempfirst, templast;
    uint8 fangHuiWanFlag =0;
    uint8 fangDuanLieFlag = 0;
    
    
    
    if(BlackLeftDone == 1)
    {        
        
        for(row = 60 - 1; ; row--)
        {
          if(BlackLeftLoc[row][0] != 255)
          {
            break;
          }
          else
          {
          }
          
          if(row == 0)
          {
            BlackLeftDone = 0;
            return 0;
          }
        }
        
        
        tempfirst = 255;
        templast = 255;
                
        
        for (; ; row--)
        {
            if (BlackLeftLoc[row][0] == 255)
            {
                if (tempfirst == 255)
                {
                    
                    tempfirst = row + 1;
                }
                else
                {
                }
            }
            else
            {
                if (tempfirst != 255)
                {
                    
                    templast = row;
                    if(templast > 5)
                    {
                        if (BlackLeftLoc[templast - 1][0] != 255 && BlackLeftLoc[templast - 2][0] != 255 && BlackLeftLoc[templast - 3][0] != 255
                            && BlackLeftLoc[templast - 4][0] != 255)
                        {
                            fangDuanLieFlag = 0;
                        }
                        else
                        {
                            fangDuanLieFlag = 1;
                        }
                    }
                    else
                    {
                        fangDuanLieFlag = 1;
                    }
                    
                    if (templast >= 8)
                    {
                        if (BlackLeftLoc[templast - 1][0] != 255 && BlackLeftLoc[templast - 2][0] != 255 && BlackLeftLoc[templast - 3][0] != 255
                            && BlackLeftLoc[templast - 4][0] != 255 && BlackLeftLoc[templast - 5][0] != 255
                                && BlackLeftLoc[templast - 6][0] != 255 && BlackLeftLoc[templast - 7][0] != 255 && BlackLeftLoc[templast - 8][0] != 255)
                        {
                            fangHuiWanFlag = 0;
                        }
                        else
                        {
                            fangHuiWanFlag = 1;
                        }
                    }
                    else
                    {
                        fangHuiWanFlag = 1;
                    }
                    
                    if ((BlackLeftLoc[tempfirst][0]<=15 && BlackLeftLoc[templast][0]<=15) && (tempfirst - templast) <= 12)
                    {
                        
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackLeftLoc[j][0] = (BlackLeftLoc[tempfirst][0] + BlackLeftLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    else if ((BlackLeftLoc[tempfirst][0] <= 15 && BlackLeftLoc[templast][0] <= 15) && (tempfirst - templast) <20
                                && (BlackLeftLoc[10][0] != 255 || BlackLeftLoc[9][0] != 255 || BlackLeftLoc[8][0] != 255 || BlackLeftLoc[7][0] != 255 || BlackLeftLoc[6][0] != 255)
                                && fangHuiWanFlag == 0)
                    {
                        
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackLeftLoc[j][0] = (BlackLeftLoc[tempfirst][0] + BlackLeftLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    else if ((BlackLeftLoc[tempfirst][0] <= 15 && BlackLeftLoc[templast][0] <= 15) && (tempfirst - templast) <= 35
                                && (BlackLeftLoc[6][0] != 255 || BlackLeftLoc[7][0] != 255 || BlackLeftLoc[8][0] != 255 || BlackLeftLoc[10][0] != 255 || BlackLeftLoc[9][0] != 255)
                                && fangHuiWanFlag == 0)
                    {
                        
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackLeftLoc[j][0] = (BlackLeftLoc[tempfirst][0] + BlackLeftLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    
                    else if (tempfirst - templast <= 5 && fangDuanLieFlag == 0)
                    {
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackLeftLoc[j][0] = (BlackLeftLoc[tempfirst][0] + BlackLeftLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    else if(tempfirst - templast >= 3) 
                    {
                      
                      for(i = tempfirst - 1; ; i--)
                      {
                        BlackLeftLoc[i][0] = 255;
                        if(i == 0) break;
                      }
                      
                      BlackLeftContinueFlag = 2;
                      return 0;
                    }
                    else
                    {
                      
                      for(j = tempfirst - 1; ; j--)
                      {
                        BlackLeftLoc[j][0] = (BlackLeftLoc[tempfirst][0] + BlackLeftLoc[templast][0]) / 2;
                        if(j == templast + 1) break;
                      }
                    }
                    tempfirst = 255;
                    templast = 255;
                    
                    BlackLeftContinueFlag = 0;
                }
                else
                {
                }
            }

            if (row == 0) break;
        }
    }
    else
    {
    }    
    
    return 1;
}








uint8 BlackLeftRollCheck(void)
{
  uint8 temp1, temp2, temp3;
  
  
  if(SingleBlackAllFlag == 1) return 1;
  
  
  
  if(SlopeL == 32767)
  {
    temp1 = 1;
  }
  else
  {
    
    if(SlopeL + 2000 < 0)
    {
      temp1 = 1;
    }
    
    else
    {
      temp1 = 0;
    }
  }
  
  
  
  if(BlackLeftHeadLine == 255 || BlackLeftEndLine == 255)
  {
    temp2 = 1;
  }
  else
  {
    
    if(BlackLeftEndLine - BlackLeftHeadLine < 12)
    {
      temp2 = 1;
    }
    
    else
    {
      temp2 = 0;
    }
  }
  
  

















 
  temp3 = 1;

  if(
    (BlackLeftStep4Flag == 3 || SingleBlackLastAllFlag == 1)   
  &&(BlackLeftCrossDone == 1 || BlackLeftCrossDone == 0)   
  &&(temp1 == 1)                
  &&(temp2 == 1)                
  &&(temp3 == 1)                
    )
  {
    
    return 0;   
  }
  else
  {
    
    return 1;
  }

}


uint8 BlackLeftStep4ErrorCheck(void)
{
  uint8 i;
  
  
  for(i = 0; ; i++)
  {
    if(BlackLeft5Slope[i] == 32767) return 0;
    
    if(AbsInt(BlackLeft5Slope[i]) > 2100)
    {
      return 0;
    }
    else
    {      
    }
    
    if(i == 5) break;
  }
  
  return 1;
  
}



uint8 BlackGetLeftParaInit(void)
{
  uint8 i;
  
  
  BlackLeftContinueFlag = 1;  
  
  
  BlackLeftDone = 1;  
 
  
  BlackLeftCrossConfirmFlag = 0;  
  
  
  BlackLeft5SlopeIndex = 0;  
  for(i = 0; ; i++)
  {
      BlackLeft5Slope[i] = 32767;
      BlackLeft5SlopeRow[i] = 255;
      if(i == 60 - 1) break;
  }  
  
  
  BlackLeftRollCheckFlag = 0;        
  BlackLeftBigChangeJumpFlag = 0;    

  
  for(i = 0; i <= 4; i++)
  {
    BlackLeftBigChangeNumx[i] = 255;
    BlackLeftBigChangeNumy[i] = 255; 
  }
  BlackLeftBigChangeFlag = 0;
  BlackLeftBigChangeSlopeStore = 32767;

  
  for(i = 0; ; i++)
  {
    BlackLeftBigChangeCheckRow[i] = 0;
    if(i == 60 - 1) break;
  }
  BlackLeftBigChangeCheckAllRow = 0;

  
  for(i = 0; ; i++)
  {
    BlackLeftLoc[i][0] = 255;
    if(i == 60 - 1) break;
  }

  
  BlackLeftCrossTailFlag = 2;       

  
  for(i = 0; ; i++)
  {
    BlackLeftPredictL[i] = 255;
    BlackLeftPredictR[i] = 255; 
    if(i == 60 - 1) break;
  }
  
  
  BlackLeftWinPredictStore0 = 255;
  BlackLeftWinPredictStore1 = 255;
  BlackLeftWinPredictStore2 = 255;

  
  BlackLeftStep4Flag = 0;
  BlackLeftStep4StartLine = 255;
  
  BlackLeftCrossDone = 0;
  
  return 1;
}


















uint8 BlackGetLeft(void)
{
    uint8 row, temp, temp1, temp2, temp3, i;
    uint8 GapCount, Row1RealLastLine, index, index1;
    uint8 tempWB, tempW, tempB;
    uint8 tempminus;
    uint8 successRow = 255;
    
    int temp001;
    
    
    BlackGetLeftParaInit();
    
    
    
    
    LimitLeftWB = LimitLeftHeadWB;
    LimitLeftW = LimitLeftHeadW;
    LimitLeftB = LimitLeftHeadB;
    
    temp = BlackGetLeftStep1Scan(60 - 1, 60 - 48 - 1, 1);
    BlackLeftStep1ScanRow = temp;
    
    
    if(
       (BlackGetPreDir == 1)
     &&(temp <= BlackRightHeadLine)
     &&(BlackRightHeadLine < 60 - 7)
      )
    {
        BlackLeftLoc[temp][0] = 255;
        BlackLeftLoc[temp - 1][0] = 255;
        return 0;
    }
    else
    {
    }
    
    if(temp == 255)
    {
      return 0;
    }    
    else 
    {     
              
      
      LimitLeftHeadWB = LimitLeftWB;
      LimitLeftHeadW = LimitLeftW;
      LimitLeftHeadB = LimitLeftB;
      
      row = temp;
      
      if(row < 60 - 48)
      {
        BlackLeftStep4Flag = 1;               
        BlackLeftStep4StartLine = row;
      }
    }
    
    
    

    
    temp = BoundaryLimitRe(BlackLeftLoc[row-1][0] + BlackLeftLoc[row-1][0] - BlackLeftLoc[row][0], 
                           0, 
                           250 - 1);
    
    BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
    BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
    BlackLeftWinPredictStore2 = temp;

    index = 0;
    index1 = 0;
    
    GapCount = 0;  
    successRow = 255; 
    
    for(row -= 2; ; row -= 2)
    {      
      
      temp1 = BlackGetLeftStep2Win(row, 15, temp, 1);
      temp2 = BlackGetLeftStep2Win(row-1, 15, temp, 2);
      
      temp3 = (
              (temp1 == 0)
            &&(temp2 == 0)
            
              );
      
      
      if(temp1 == 1 && temp2 == 1) 
      {
        
        index = 0;
        index1 = 0;
        successRow = row;
        
        
        tempWB = (BlackLeftRealWB[0] + BlackLeftRealWB[1]) / 2 - 20; 
        if(tempWB < LimitLeftWBMin) tempWB = LimitLeftWBMin;
        else if(tempWB > LimitLeftWBMax) tempWB = LimitLeftWBMax;
        else ;
        LimitLeftWB = tempWB;
        
        
        tempW = (BlackLeftRealW[0] + BlackLeftRealW[1]) / 2 - 40;
        if(tempW < LimitLeftWMin) tempW = LimitLeftWMin;
        else if(tempW > LimitLeftWMax) tempW = LimitLeftWMax;
        else ;
        LimitLeftW = tempW;
        
        
        tempB = (BlackLeftRealB[0] + BlackLeftRealB[1]) / 2 + 35;
        if(tempB < LimitLeftBMin) tempB = LimitLeftBMin;
        else if(tempB > LimitLeftBMax) tempB = LimitLeftBMax;
        else ;
        
        if(tempB >= LimitLeftW)
        {
          tempB = LimitLeftW - 1;
        }
        else
        {
        }
        LimitLeftB = tempB; 
         
        
        temp = BoundaryLimitRe(BlackLeftLoc[row-1][0] + BlackLeftLoc[row-1][0] - BlackLeftLoc[row][0], 
                               0, 
                               250 - 1);
        
        
        BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
        BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
        BlackLeftWinPredictStore2 = temp;
      }
      
      
      
      else if(temp3 == 1)
      {        
        
        if(SingleBlackLastAllFlag == 1) break;        
        
        if(AngleZoneConfirmLockFlag == 1) break;
        
        
        if(index1 == 0)
        {
          
          if(row <= 60 - 3)
          {
              
              if (BlackLeftLoc[row + 1][0] != 255 && BlackLeftLoc[row + 2][0] != 255)
              {


                  
                  tempminus = BoundaryLimitRe(BlackLeftLoc[row + 1][0] * 3 - BlackLeftLoc[row + 2][0] * 2,
                                              0,
                                              250 - 1);
                  
                  tempminus = MaxRe(tempminus, BlackLeftLoc[row + 1][0]);
              }
              else
              {
                  temp001 = BlackLeftWinPredictStore1 - BlackLeftWinPredictStore0;
                  BlackLeftWinPredictStore0 += temp001;
                  BlackLeftWinPredictStore1 += temp001;
                  BlackLeftWinPredictStore2 = BlackLeftWinPredictStore1 + BlackLeftWinPredictStore1 - BlackLeftWinPredictStore0;
                  tempminus = BoundaryLimitRe(BlackLeftWinPredictStore2 + BlackLeftWinPredictStore2 - BlackLeftWinPredictStore1,
                                              0,
                                              250 - 1);       
              }
          }
          else
          {
              
              return 0;
          }
          
          
          index1++;          
        }
        else
        {
          
          tempminus = BoundaryLimitRe(BlackLeftWinPredictStore2 + BlackLeftWinPredictStore2 - BlackLeftWinPredictStore1,
                                      0,
                                      250 - 1);          
        }
        
        temp = tempminus;
        BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
        BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
        BlackLeftWinPredictStore2 = temp;
              
        
        if(index == 0)
        {
          
          index++;
          for(i = row; i <= 60 - 1; i++)
          {
            if(BlackLeftLoc[i][0] != 255)
            {
              Row1RealLastLine = i;
              break;
            }
          }
          if(Row1RealLastLine >= 60 - 1)
          {
            Row1RealLastLine = 60 - 1;
          }
          else
          {
          }
          
          BlackLeftRow1RealLastLine = Row1RealLastLine;
        }
        
        GapCount += 2;
        if (successRow != 255 && BlackLeftLoc[successRow][0]<10 && BlackLeftLoc[successRow - 1][0]<10) { }
        
        else if(GapCount > 12)
        {
          
          if(row < BlackLeftCrossTooLowLine)
          {
            
            for(i = row; ; i--)
            {
              BlackLeftLoc[i][0] = 255;
              if(i == 0) break;
            }
            
            break;
          }
          else
          {
          }
          
          
          if(BlackLeftStep4Flag == 1)
          {
            BlackLeftStep4Flag = 3;   
          }
          else
          {
          }
          
          
          
          if(BlackLeftStep1ScanRow >= 60 - 3 && row > 3)
          {            
            
            if(BlackLeftAgainForCross(row - 2, 1, Row1RealLastLine, temp) == 0)
            {
              BlackLeftCrossDone = 1;  
            }
            else
            {
              BlackLeftCrossDone = 2;  
            }
            break;  
          }
          
          else
          {
            break;
          }
          
        }
        else
        {
          BlackLeftCrossDone = 0;   
        }
      }
      
      else if((temp1 == 1 && temp2 == 0) || (temp1 == 0 && temp2 == 1)) 
      {        
        
        
        if(index1 == 0)
        {
          
          if(row <= 60 - 3)
          {
              
              if (BlackLeftLoc[row + 1][0] != 255 && BlackLeftLoc[row + 2][0] != 255)
              {


                  
                  tempminus = BoundaryLimitRe(BlackLeftLoc[row + 1][0] * 3 - BlackLeftLoc[row + 2][0] * 2,
                                              0,
                                              250 - 1);
                  
                  tempminus = MaxRe(tempminus, BlackLeftLoc[row + 1][0]);
              }
              else
              {
                  temp001 = BlackLeftWinPredictStore1 - BlackLeftWinPredictStore0;
                  BlackLeftWinPredictStore0 += temp001;
                  BlackLeftWinPredictStore1 += temp001;
                  BlackLeftWinPredictStore2 = BlackLeftWinPredictStore1 + BlackLeftWinPredictStore1 - BlackLeftWinPredictStore0;
                  tempminus = BoundaryLimitRe(BlackLeftWinPredictStore2 + BlackLeftWinPredictStore2 - BlackLeftWinPredictStore1,
                                              0,
                                              250 - 1);       
              }
          }
          else
          {
              
              return 0;
          }
          
          
          index1++;          
        }
        else
        {
          
          tempminus = BoundaryLimitRe(BlackLeftWinPredictStore2 + BlackLeftWinPredictStore2 - BlackLeftWinPredictStore1,
                                      0,
                                      250 - 1);          
        }
        
        temp = tempminus;
        BlackLeftWinPredictStore0 = BlackLeftWinPredictStore1;
        BlackLeftWinPredictStore1 = BlackLeftWinPredictStore2;
        BlackLeftWinPredictStore2 = temp;
      }
      
      else
      {
      }
      
      if((row == 0) || (row == 1)) break;
      
    }
    
    
    
    if(BlackLeftStep4Flag == 1)
    {
      if(BlackLeftStep4BackLine(BlackLeftStep4StartLine, 0) == 0)
      {
        BlackLeftStep4Flag = 1;    
        
      }
      else
      {
        BlackLeftStep4Flag = 2;    
      }
    }
    
    else if(BlackLeftStep4Flag == 3)
    {
      
      if(BlackLeftStep4ErrorCheck() == 1)
      {        
        if(BlackLeftStep4BackLine(BlackLeftStep4StartLine, 0) == 0)
        {
          
          
        }
        else
        {
          BlackLeftStep4Flag = 2;    
        }
      }
      else
      {
      }
      
    }
    
    else
    {       
    }

    return 1;
}















void BlackRightRealClear(void)
{
    BlackRightRealWB[0] = 0;
    BlackRightRealWB[1] = 0;
    BlackRightRealW[0] = 0;
    BlackRightRealW[1] = 0;
    BlackRightRealB[0] = 0;
    BlackRightRealB[1] = 0;
}





uint8 BlackRightHeadEndSearch(void)
{
  uint8 i;
  
  if(BlackRightDone == 1)
  { 
    for(i = 0; ; i++)
    { 
      if(BlackRightLoc[i][0] != 255)
      {
        BlackRightHeadLine = i;
        break;
      }
      
      if(i == 60 - 1) 
      {
        BlackRightHeadLine = 255;
        break;
      }
    }
    
    if(BlackRightHeadLine == 255)
    {
      BlackRightEndLine = 255;
      BlackRightDone = 0;
    }
    
    else
    {
      for(i = 60 - 1; ; i--)
      { 
        if(BlackRightLoc[i][0] != 255)
        {
          BlackRightEndLine = i;
          break;
        }
        
        if(i == BlackRightHeadLine) 
        {
          BlackRightHeadLine = 255;
          BlackRightEndLine = 255;
          break;
        }
      }
    }
  }
  
  else
  {
    BlackRightHeadLine = 255;
    BlackRightEndLine = 255;
  }
  
  
  if(SingleBlackAllFlag == 1)
  {
    BlackRightLoc[BlackRightHeadLine][0] = 255; 
    BlackRightHeadLine += 1;
  }
  else
  {
  }
  
  return 1;
}












uint8 BlackRightBigChangeCheck(uint8 newrow, uint8 use)
{
  uint8 tempstorex, tempstorey;
  uint8 i;
  int32 tempslope1, tempslope2;
  
  
  tempstorex = BlackRightBigChangeNumx[0];
  BlackRightBigChangeNumx[0] = BlackRightBigChangeNumx[1];
  BlackRightBigChangeNumx[1] = BlackRightBigChangeNumx[2];
  BlackRightBigChangeNumx[2] = BlackRightBigChangeNumx[3];
  BlackRightBigChangeNumx[3] = BlackRightBigChangeNumx[4];
  BlackRightBigChangeNumx[4] = newrow;

  tempstorey = BlackRightBigChangeNumy[0];
  BlackRightBigChangeNumy[0] = BlackRightBigChangeNumy[1];
  BlackRightBigChangeNumy[1] = BlackRightBigChangeNumy[2];
  BlackRightBigChangeNumy[2] = BlackRightBigChangeNumy[3];
  BlackRightBigChangeNumy[3] = BlackRightBigChangeNumy[4];
  BlackRightBigChangeNumy[4] = BlackRightLoc[newrow][0];

  
  if(BlackRightBigChangeJumpFlag == 0)
  {  
    
    for(i = 0; i <= 4; i++)
    {
      if(BlackRightBigChangeNumx[i] == 255)
      {
        return 1;
      }
    }
    
    BlackRightBigChangeJumpFlag = 1;   
  }
  
  
  
  
  tempslope1 = (BlackRightBigChangeNumy[2] - BlackRightBigChangeNumy[0]) 
            * 1000   
            / (BlackRightBigChangeNumx[2] - BlackRightBigChangeNumx[0]);
  tempslope2 = (BlackRightBigChangeNumy[4] - BlackRightBigChangeNumy[2]) 
            * 1000   
            / (BlackRightBigChangeNumx[4] - BlackRightBigChangeNumx[2]);
  BlackRightBigChangeSlopeStore = tempslope1;
  
  BlackRight5Slope[BlackRight5SlopeIndex] = BlackRightBigChangeSlopeStore;
  BlackRight5SlopeRow[BlackRight5SlopeIndex] = newrow;
  BlackRight5SlopeIndex++;  
  
  if(tempslope1 >= 0 && tempslope2 < 0)
  {
    
    if(tempslope1 >= tempslope2 + 4000)
    {
      
      
      
        
        BlackRightBigChangeFlag = 1;
      
      
      
      
      
      BlackRightBigChangeNumx[4] = BlackRightBigChangeNumx[3];
      BlackRightBigChangeNumx[3] = BlackRightBigChangeNumx[2];
      BlackRightBigChangeNumx[2] = BlackRightBigChangeNumx[1];
      BlackRightBigChangeNumx[1] = BlackRightBigChangeNumx[0];
      BlackRightBigChangeNumx[0] = tempstorex;
      BlackRightBigChangeNumy[4] = BlackRightBigChangeNumy[3];
      BlackRightBigChangeNumy[3] = BlackRightBigChangeNumy[2];
      BlackRightBigChangeNumy[2] = BlackRightBigChangeNumy[1];
      BlackRightBigChangeNumy[1] = BlackRightBigChangeNumy[0];
      BlackRightBigChangeNumy[0] = tempstorey;

      
      BlackRightLoc[BlackRightBigChangeNumx[4]][0] = 255;
      BlackRightLoc[BlackRightBigChangeNumx[3]][0] = 255;
      
      
      return 0;
    }
    else
    {
      
      
      return 1;
    }
  }
  
  else if(tempslope1 < 0 && tempslope2 >= 0)
  {
    
    if(tempslope2 >= tempslope1 + 4000)
    {
      
      
      
        
        BlackRightBigChangeFlag = 1;
      
      
      
      
      
      BlackRightBigChangeNumx[4] = BlackRightBigChangeNumx[3];
      BlackRightBigChangeNumx[3] = BlackRightBigChangeNumx[2];
      BlackRightBigChangeNumx[2] = BlackRightBigChangeNumx[1];
      BlackRightBigChangeNumx[1] = BlackRightBigChangeNumx[0];
      BlackRightBigChangeNumx[0] = tempstorex;
      BlackRightBigChangeNumy[4] = BlackRightBigChangeNumy[3];
      BlackRightBigChangeNumy[3] = BlackRightBigChangeNumy[2];
      BlackRightBigChangeNumy[2] = BlackRightBigChangeNumy[1];
      BlackRightBigChangeNumy[1] = BlackRightBigChangeNumy[0];
      BlackRightBigChangeNumy[0] = tempstorey;
      
      
      BlackRightLoc[BlackRightBigChangeNumx[4]][0] = 255;
      BlackRightLoc[BlackRightBigChangeNumx[3]][0] = 255;
      
      
      return 0;
    }
    else
    {
      
      
      return 1;
    }    
  }
  
  else
  {
    
    
    return 1;
  }
  
}




uint8 BlackGetRightJustWin(uint8 row, int32 colleft, int32 colright)
{
  uint8 abs1;
  uint8 tempwhite;
  uint8 temp1;
  
  
  colleft = BoundaryLimitRe(colleft, 0, 250 - 1);
  colright = BoundaryLimitRe(colright, 0, 250 - 1);
  
  for(; colleft < colright; colleft++) 
  {
    
    if(ImgNew[row][colleft] > ImgNew[row][colleft+1+3])
    {
      abs1 = ImgNew[row][colleft] - ImgNew[row][colleft+1+3];
    }
    else
    {
      abs1 = 0;
    }

    if( 
        
        
          (abs1 > LimitRightWB - LimitRightWBAdjust[row]) 
        &&(ImgNew[row][colleft] > LimitRightW)                     
        &&(ImgNew[row][colleft+1+3] < LimitRightB)                   
       )
    {
          
          if(colleft > 2)
          {
            tempwhite = ((ImgNew[row][colleft-1] > LimitRightW) && (ImgNew[row][colleft-2] > LimitRightW));
          }
          else
          {
            tempwhite = 1;
          }
          
          
          if(row > 50)
          {
            temp1 = (
                      (ImgNew[row][colleft+2+3] < LimitRightB)
                    &&(ImgNew[row][colleft+3+3] < LimitRightB)
                    
                    &&(tempwhite == 1)
                    );
          }
          else
          {
            
            if(row > 40)
            {
              temp1 = (
                        (ImgNew[row][colleft+2+3] < LimitRightB)
                      
                      &&(tempwhite == 1)
                      );
            }          
            else
            {
              
              if(row > 20)
              {
                
                temp1 = 1;
              }
              
              else
              {
                temp1 = 1;
              }
            }
          }
          
          
          if(temp1 == 1)
          {
            
            return colleft;
            
          
          }
    }
    
    
    
  }
  
  
  return 255;
    
}















uint8 BlackGetRightStep1Edge(uint8 row, uint8 use, uint8 preflag)
{
  uint8 index, col, temp1;
  uint8 abs1;
  uint8 RightBeginCol; 
  uint8 tempwhite;
  uint8 avgr1, avgl1;
  uint8 i;
    
  
  RightBeginCol = (uint8)MaxRe((int32)BlackRightEdgeStartCol-10,0);
  
  
  
  if((BlackGetPreDir == 0 || BlackGetPreDir == 2)
  &&(BlackLeftLoc[row][0] != 255)
  &&(preflag == 0)
    )
  {
    
    if(
      (row > 60 - 5)
    &&(SingleBlackLastAllFlag == 1)
       )
    {
      RightBeginCol = MinRe(RightBeginCol, MaxRe(0, BlackLeftLoc[row][0] - SingleBlackWidthMax[row]));
    }
    
    else if(
           (row <= 60 - 5)
         
            )
    {
      RightBeginCol = MaxRe(RightBeginCol, BlackLeftLoc[row][0]);
    }
    else
    {
      RightBeginCol = MaxRe(RightBeginCol, BlackLeftLoc[row][0]);
    }
    
  }
  else
  {    
  }
  
  
  BlackRightPredictL[row] = RightBeginCol;
  BlackRightPredictR[row] = 250 - 5 - 3;
  
  index = 0;         
  
  for(col = RightBeginCol; col <= 250 - 5 - 3; col++) 
  {
      
      if(ImgNew[row][col] > ImgNew[row][col+1+3])
      {
        abs1 = ImgNew[row][col] - ImgNew[row][col+1+3];
      }
      else
      {
        abs1 = 0;
      }
      
      if( 
          
          
          (abs1 > LimitRightWB - LimitRightWBAdjust[row]) 
        &&(ImgNew[row][col] > LimitRightW)                     
        &&(ImgNew[row][col+1+3] < LimitRightB) 
         )
      {         
          
          if(col > 2)
          {
            tempwhite = ((ImgNew[row][col-1] > LimitRightW) && (ImgNew[row][col-2] > LimitRightW));
          }
          else
          {
            tempwhite = 1;
          }
          
          
          
          if(row > 50)
          {
            temp1 = (
                      (ImgNew[row][col+2+3] < LimitRightB)
                    &&(ImgNew[row][col+3+3] < LimitRightB)
                    &&(ImgNew[row][col+4+3] < LimitRightB)
                    &&(tempwhite == 1)
                    );
          }
          else
          {
            if(row > 40)
            {
              
              temp1 = (
                        (ImgNew[row][col+2+3] < LimitRightB)
                      &&(ImgNew[row][col+3+3] < LimitRightB)
                      &&(tempwhite == 1)
                      );
            }
            else
            {
              
              if(row > 20)
              {
                temp1 = (ImgNew[row][col+2+3] < LimitRightB);
              }
              
              else
              {
                temp1 = 1;
              }             
            }
          }
          
          if(temp1)
          {
              
              BlackRightLoc[row][index] = col + 1 + 3;          
              index++;
              break;
            
          }    
      }   
  }
  
  
  if(index == 0)
  {
    
    if(preflag == 0)
    {
      
      BlackRightRealClear();
    }
      
    
    BlackRightLoc[row][0] = 255;
    return 0;
  }
  
  
  if(preflag == 0)
  {
    
    if(BlackRightBigChangeCheck(row, use) == 1)
    {
      
      
      if(
        (SingleBlackAllFlag == 0) 
      &&(BlackGetPreDir == 0 || BlackGetPreDir == 2)   
        )
      {
        
        if((BlackLeftLoc[row][0] != 255)
         &&(BlackRightLoc[row][0] != 255)
         &&(BlackRightLoc[row][0] < BlackLeftLoc[row][0])
         &&(BlackRightLoc[row][0] - BlackLeftLoc[row][0] < SingleBlackWidthMax[row]) 
        )
        {
          
          if(
            (BlackRightLoc[row][0] - 1 - 3 - 5 < 0)
          ||(BlackLeftLoc[row][0] + 1 + 3 + 5 > 250 - 1)
            )
          {
            
            
            if(row > 60 - 5)
            {
                for(i = 0; i <= 4; i++)
                {
                    BlackRightBigChangeNumx[i] = 255;
                    BlackRightBigChangeNumy[i] = 255;
                }
                BlackRightBigChangeJumpFlag = 0;
            }
            else
            {
            }
            
            BlackRightLoc[row][0] = 255;
            return 0;
          }
          else
          {
            
            avgr1 = (ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 1]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 2]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 3]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 4]
                   + ImgNew[row][BlackRightLoc[row][0] - 1 - 3 - 5])
                   / 5;
            
            avgl1 = (ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 1]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 2]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 3]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 4]
                   + ImgNew[row][BlackLeftLoc[row][0] + 1 + 3 + 5])
                   / 5;    
            if(AbsInt(avgr1 - avgl1) < 20)
            {
              
              SingleBlackFlag[row] = 1;      
              
            }
            else
            {
              
              
              if(row > 60 - 5)
              {
                  for(i = 0; i <= 4; i++)
                  {
                      BlackRightBigChangeNumx[i] = 255;
                      BlackRightBigChangeNumy[i] = 255;
                  }
                  BlackRightBigChangeJumpFlag = 0;
              }
              else
              {
              }
              
              
              BlackRightLoc[row][0] = 255;
              return 0;              
            }
          }          
        }
        else
        {
          
          SingleBlackFlag[row] = 0;
        }
      }
      
      else
      {
      }
      
      
      
    }
    else
    {
      
      BlackRightBigChangeCheckRow[row] = 1;
      BlackRightBigChangeCheckAllRow = 1;
      
      
      
      
      BlackRightLoc[row][0] = 255;
      return 0;
    }
  }
  
  else
  {
    
  }

  
  if(preflag == 0)
  {
    
    
    if(use == 1)
    {
      BlackRightRealWB[0] = ImgNew[row][col] - ImgNew[row][col+1+3]; 
      BlackRightRealW[0] = ImgNew[row][col];
      BlackRightRealB[0] = ImgNew[row][col+1+3];
    }
    else if(use == 2)
    {
      BlackRightRealWB[1] = ImgNew[row][col] - ImgNew[row][col+1+3]; 
      BlackRightRealW[1] = ImgNew[row][col];
      BlackRightRealB[1] = ImgNew[row][col+1+3];
    }
    else
    {
    }
  }
  
  return 1;
}












uint8 BlackGetRightStep2Win(uint8 row, uint8 win, uint8 predict, uint8 use)
{
  uint8 col, temp;

  
  
  
  if((predict + win) >= (250 - 5 - 3)) 
  {
    temp = 250 - 5 - 3;
  }  
  else
  {
    temp = predict + win;
  }
  
  if(predict <= win)
  {
    col = 0;
  }
  else
  {
    col = predict - win;  
  }
  
  if((BlackGetPreDir == 0 || BlackGetPreDir == 2)
  &&(SingleBlackAllFlag == 0)
  &&(BlackLeftLoc[row][0] != 255)
    )
  {
    col = MaxRe(col, BlackLeftLoc[row][0]);
  }
  else
  {
  }
  
  
  BlackRightPredictL[row] = col;
  BlackRightPredictR[row] = temp;
  
  
  if(col >= temp) return 0;
   
  
  col = BlackGetRightJustWin(row, col, temp);
  if(col != 255)
  {
    
    BlackRightLoc[row][0] = col + 1 + 3;
             
    
    if(BlackRightBigChangeCheck(row, use) == 0)
    {
      
      BlackRightBigChangeCheckRow[row] = 1;
      BlackRightBigChangeCheckAllRow = 1;             
      
      BlackRightLoc[row][0] = 255;
      return 0;
    }
    else
    {
    }
    
    
    
    if(use == 1)
    {
      BlackRightRealWB[0] = ImgNew[row][col] - ImgNew[row][col+1+3]; 
      BlackRightRealW[0] = ImgNew[row][col];
      BlackRightRealB[0] = ImgNew[row][col+1+3];
    }
    else if(use == 2)
    {
      BlackRightRealWB[1] = ImgNew[row][col] - ImgNew[row][col+1+3]; 
      BlackRightRealW[1] = ImgNew[row][col];
      BlackRightRealB[1] = ImgNew[row][col+1+3];
    }
    else
    {
    }
      
    return 1;   
  }
  else
  {
    
    BlackRightLoc[row][0] = 255;
    return 0;
  }
}














uint8 BlackGetRightStep1Scan(uint8 FirstLine, uint8 LastLine, uint8 CrossFlag)
{
    uint8 row, temp1, temp2;
    uint8 abs1;
    uint8 tempWB, tempW, tempB;
    uint8 flag, i;
    
    flag = 0;
    
    for(row = FirstLine; row > LastLine; row -= 2)
    {
      
      temp1 = BlackGetRightStep1Edge(row, 1, 0);
      temp2 = BlackGetRightStep1Edge(row-1, 2, 0);
      if(temp1 == 1 && temp2 == 1)
      {
        abs1 = AbsRe(BlackRightLoc[row-1][0], BlackRightLoc[row][0]);
        
        if(abs1 < 8)
        {
          
          
          if(CrossFlag == 1)
            {           
              
              tempWB = (BlackRightRealWB[0] + BlackRightRealWB[1]) / 2 - 20; 
              if(tempWB < LimitRightWBMin) tempWB = LimitRightWBMin;
              else if(tempWB > LimitRightWBMax) tempWB = LimitRightWBMax;
              else ;
              LimitRightWB = tempWB;
              
              
              tempW = (BlackRightRealW[0] + BlackRightRealW[1]) / 2 - 40;
              if(tempW < LimitRightWMin) tempW = LimitRightWMin;
              else if(tempW > LimitRightWMax) tempW = LimitRightWMax;
              else ;
              LimitRightW = tempW;
              
              
              tempB = (BlackRightRealB[0] + BlackRightRealB[1]) / 2 + 35;
              if(tempB < LimitRightBMin) tempB = LimitRightBMin;
              else if(tempB > LimitRightBMax) tempB = LimitRightBMax;
              else ;
              
              if(tempB >= LimitRightW)
              {
                tempB = LimitRightW - 1;
              }
              else
              {
              }             
              LimitRightB = tempB;           
            }
          break;
        }
        else
        {
          
          BlackRightLoc[row][0] = 255;
          BlackRightLoc[row-1][0] = 255;
          
          BlackRightBigChangeNumx[3] = 255;
          BlackRightBigChangeNumx[4] = 255;
          BlackRightBigChangeNumy[3] = 255;
          BlackRightBigChangeNumy[4] = 255;
          BlackRightBigChangeJumpFlag = 0;
        }
      }
      else if(temp1 == 0 && temp2 == 1)
      {
        
        flag = 1;
      }
      else if(temp1 == 1 && temp2 == 0)
      {
        
        flag = 1;
      }
      else
      {
      }
    }   
    
    
    if(row <= LastLine)
    {
      return 255;
    }               
    else
    {
        
        if(flag == 1)
        {
            
            for(i = FirstLine; ; i--)
            {
                if(i == row) break;
                BlackRightLoc[i][0] = 255;
                
            }
            
            
            if(CrossFlag == 1)
            {
              
              for(i = 0; i <= 2; i++)
              {
                  BlackRightBigChangeNumx[i] = 255;
                  BlackRightBigChangeNumy[i] = 255;
                  BlackRightBigChangeJumpFlag = 0; 
              }
            }
            else
            {
            }
            
        }
        else
        {

        }
        
        return row;
    }
  
}












uint8 BlackRightCrossStep3(uint8 FirstLine, uint8 LastLine)
{
  int32 delta_x, delta_y, delta, index;
  uint8 row, temp1, temp2;
  uint8 i;
  
  
  
  if(LastLine >= FirstLine)
  {
    
    return 0;  
  }
  
  
  if(BlackRightLoc[LastLine][0] == 255)
  {
    
    for(i = FirstLine - 1; ; i--)
    {
      BlackRightLoc[i][0] = 255;
      if(i == 0) break;
    }
    
    return 0;
  }
  else
  {
  }
  
  temp1 = BlackRightLoc[FirstLine][0];
  temp2 = BlackRightLoc[LastLine][0];
  
  


































 
  
  delta_y = FirstLine - LastLine;
  
  
  
  if(temp1 < temp2)
  {
    
    delta_x = temp2 - temp1;
    delta = delta_x * 1000 / delta_y; 
    
    index = 1;
    for(row = FirstLine - 1; row >= LastLine + 1; row-- )
    {
      
      BlackRightLoc[row][0] = (uint8)(BlackRightLoc[FirstLine][0] + delta * index / 1000);
      index += 1;
    }
  }
  
  else if(temp1 > temp2)
  {
    
    delta_x = temp1 - temp2;
    delta = delta_x * 1000 / delta_y;
    
    index = 1;
    for(row = FirstLine - 1; row >= LastLine + 1; row-- )
    {
      
      BlackRightLoc[row][0] = (uint8)(BlackRightLoc[FirstLine][0] - delta * index / 1000);
      index += 1;
    }
  }
  
  else
  {
    for(row = FirstLine - 1; row >= LastLine + 1; row-- )
    {
      
      BlackRightLoc[row][0] = temp1;
    }
  }
  
  return 1;
    
}











uint8 BlackRightCrossConfirm(uint8 Row1RealLastLine, uint8 Row2RealFirstLine)
{
  uint8 row, index;
  uint8 x[4];
  uint8 y[4];
  
  int32 a0, a1, temp;
  
  
  if(BlackRightLoc[Row2RealFirstLine][0] < BlackRightLoc[Row2RealFirstLine-1][0]) 
  {
    return 0;
  }
  
  else if((BlackRightLoc[Row2RealFirstLine][0] > BlackRightLoc[Row2RealFirstLine-1][0])
   &&(BlackRightLoc[Row2RealFirstLine][0] - BlackRightLoc[Row2RealFirstLine-1][0] >= 3)
    )
  {
    return 0;
  }
  
  else if((SlopeL + 3000 < 0) 
   &&(BlackLeftHeadLine < 40) 
     )
  {
    return 0;
  }
  else
  {
  }
  
  
  
  
  
  
  index = 0;
  for(row = Row1RealLastLine; ; row++)
  {
    
    if(BlackRightLoc[row][0] != 255)
    {
      y[index] = BlackRightLoc[row][0];
      x[index] = row;
      index++;
    }
    
    if(index == 4) break;
    
    if(row == 60 - 1) 
    {
      if(index == 0) return 0;
      
      if(BlackRightLoc[Row2RealFirstLine][0] < y[0] && y[0] - BlackRightLoc[Row2RealFirstLine][0] < 50)
      {
        return 1;
      }
      else
      {
        return 0;
      }      
    }
    else
    {
    }
  }
  
  
  
  a1 = LeastSquarea1(x, y, 4);
  
  
  if(a1 + 1100 < 0) return 0;
  
  a0 = LeastSquarea0(x, y, a1, 4);
  
  
  temp = (a0 + a1 * Row2RealFirstLine) / 1000;

  
  if(
    (BlackRightLoc[Row2RealFirstLine][0] > temp - 40)  
  &&(BlackRightLoc[Row2RealFirstLine][0] < temp + 40)  
    )
  {
    return 1;
  }
  else
  {
    return 0;
  }
    
  
}













uint8 BlackGetRightCrossSpeWin(uint8 row, uint8 colleft, uint8 colright, uint8 use)
{
  uint8 col;

  
  
  
  if(colright >= (250 - 5 - 3)) 
  {
    colright = 250 - 5 - 3;
  }  
  else
  {
  }
  
  
  if((BlackGetPreDir == 0 || BlackGetPreDir == 2)
   &&(SingleBlackAllFlag == 0)
   &&(BlackLeftLoc[row][0] != 255)
     )
  {
    colleft = MaxRe(colleft, BlackLeftLoc[row][0]);
  }
  else
  {
  }
  
  
  BlackRightPredictL[row] = colleft;
  BlackRightPredictR[row] = colright;
  
  
  if(colleft >= colright) return 0;
  
  
  col = BlackGetRightJustWin(row, colleft, colright);
  if(col != 255)
  {
    
    BlackRightLoc[row][0] = col + 1 + 3;
    
    
    if(BlackRightBigChangeCheck(row, use) == 0)
    {
      
      BlackRightBigChangeCheckRow[row] = 1;
      BlackRightBigChangeCheckAllRow = 1;             
      
      BlackRightLoc[row][0] = 255;
      return 0;
    }
    else
    {
    }
    
    
    if(use == 1)
    {
      BlackRightRealWB[0] = ImgNew[row][col] - ImgNew[row][col+1+3]; 
      BlackRightRealW[0] = ImgNew[row][col];
      BlackRightRealB[0] = ImgNew[row][col+1+3];
    }
    else if(use == 2)
    {
      BlackRightRealWB[1] = ImgNew[row][col] - ImgNew[row][col+1+3]; 
      BlackRightRealW[1] = ImgNew[row][col];
      BlackRightRealB[1] = ImgNew[row][col+1+3];
    }
    else
    {
    }
      
    return 1;
  }
  else
  {
    
    BlackRightLoc[row][0] = 255;
    return 0;   
  }

}














uint8 BlackGetRightCrossSpeScan(uint8 Row2FirstLine, uint8 Row2LastLine, uint8 LastWinPredict)
{
  uint8 row;
  uint8 temp1, temp2, temppredict, tempminus;
  uint8 colleft, colright;
  uint8 i;
  
  
  temppredict = LastWinPredict;
  
  
  
  
  for(i = Row2FirstLine+1; ; i++)
  {
    if(BlackRightLoc[i][0] != 255)
    {
      colright = BlackRightLoc[i][0];
      break;
    }
    else
    {
    }
    
    if(i == 60 - 1) return 255;
  }
  



















  
  for(row = Row2FirstLine; ; row -= 2)
  {
    
    colleft = BoundaryLimitRe(temppredict - 15 * 2,
                              0,
                              250 - 1); 
    
    colleft = MinRe(colleft, 250 / 2 - 1 - BlackRightEdgeStartColOffset[row]);
    
    
    temp1 = BlackGetRightCrossSpeWin(row, colleft, colright, 1);
    temp2 = BlackGetRightCrossSpeWin(row-1, colleft, colright, 2);
    
    if(temp1 == 1 && temp2 == 1)
    {
      return row;
    }
    
    else if(temp1 == 0 && temp2 == 0)
    {
      
      tempminus = BoundaryLimitRe(BlackRightWinPredictStore2 + BlackRightWinPredictStore2 - BlackRightWinPredictStore1,
                                  0,
                                  250 - 1);
      
      temppredict = tempminus;
      BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
      BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
      BlackRightWinPredictStore2 = temppredict;      
    }
    
    else
    {
      
      BlackRightLoc[row][0] = 255;
      BlackRightLoc[row-1][0] = 255;
      
      
      tempminus = BoundaryLimitRe(BlackRightWinPredictStore2 + BlackRightWinPredictStore2 - BlackRightWinPredictStore1,
                                  0,
                                  250 - 1);
      
      temppredict = tempminus;
      BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
      BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
      BlackRightWinPredictStore2 = temppredict;         
    }
      
      
      
    
    if(row == Row2LastLine) 
    {
      return 255;
    }
    else
    {
    }
  }
 

}















uint8 BlackRightAgainForCross(uint8 Row2FirstLine, uint8 Row2LastLine, uint8 Row1RealLastLine, uint8 LastWinPredict)
{
    uint8 row, temp, temp1, temp2;
    uint8 Row2RealFirstLine; 
    uint8 i;
    
    uint8 tempWB, tempW, tempB;
    uint8 tempminus;
    
    
    for(i = Row1RealLastLine; i <= 60 - 1; i++)
    {
      if(BlackRightLoc[i][0] != 255)
      {
        Row1RealLastLine = i;
        break;
      }
      else
      {
      }
    }
    
    
    for(i = 0; i <= 5; i++)
    {
      if(ImgNew[Row1RealLastLine - 4][BlackRightLoc[Row1RealLastLine][0] - 5 - i] < LimitRightB) 
      {
        return 0;
      }
      else if(ImgNew[Row1RealLastLine - 5][BlackRightLoc[Row1RealLastLine][0] - 5 - i] < LimitRightB) 
      {
        return 0;
      }
      else
      {
      }      
    }
    
    
    
    
    
    temp = BlackGetRightCrossSpeScan(Row2FirstLine, Row2LastLine, LastWinPredict);
    
    
    if(
      (temp == 255)
    ||(temp <= 1)
    ||(1 == 1 && temp <= 9)  
      )
    {
      
      for(i = Row2FirstLine; ; i--)
      {
        BlackRightLoc[i][0] = 255;
        if(i == 0) break;
      }
      return 0;  
    }
    else 
    {
      
      
      
      if(BlackRightCrossConfirm(Row1RealLastLine+1, temp) == 0)
      { 
        BlackRightCrossConfirmFlag = 1;  
        for(i = Row2FirstLine; ; i--)
        {
          BlackRightLoc[i][0] = 255;
          if(i == 0) break;
        }
        return 0;
      }
      
      else
      {
        BlackRightCrossConfirmFlag = 2;  
        row = temp;
      }
      
      
      
      
      
    }
    
    Row2RealFirstLine = row; 
    
    
    
    temp = BoundaryLimitRe(BlackRightLoc[row-1][0] + BlackRightLoc[row-1][0] - BlackRightLoc[row][0],
                           0,
                           250 - 1);
    
    BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
    BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
    BlackRightWinPredictStore2 = temp;
    
    
    for(row -= 2; ; row -= 2)
    {
      
      temp1 = BlackGetRightStep2Win(row, 15, temp, 1);
      temp2 = BlackGetRightStep2Win(row-1, 15, temp, 2);
      
      
      if(temp1 && temp2) 
      {
        
        tempWB = (BlackRightRealWB[0] + BlackRightRealWB[1]) / 2 - 20; 
        if(tempWB < LimitRightWBMin) tempWB = LimitRightWBMin;
        else if(tempWB > LimitRightWBMax) tempWB = LimitRightWBMax;
        else ;
        LimitRightWB = tempWB;
        
        
        tempW = (BlackRightRealW[0] + BlackRightRealW[1]) / 2 - 40;
        if(tempW < LimitRightWMin) tempW = LimitRightWMin;
        else if(tempW > LimitRightWMax) tempW = LimitRightWMax;
        else ;
        LimitRightW = tempW;
        
        
        tempB = (BlackRightRealB[0] + BlackRightRealB[1]) / 2 + 35;
        if(tempB < LimitRightBMin) tempB = LimitRightBMin;
        else if(tempB > LimitRightBMax) tempB = LimitRightBMax;
        else ;
        
        if(tempB >= LimitRightW)
        {
          tempB = LimitRightW - 1;
        }
        else
        {
        }              
        LimitRightB = tempB;     
        
        
        temp = BoundaryLimitRe(BlackRightLoc[row - 1][0] + BlackRightLoc[row - 1][0] - BlackRightLoc[row][0],
                               0,
                               250 - 1);
        
        BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
        BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
        BlackRightWinPredictStore2 = temp;
      }
      
      else
      {        
        
        tempminus = BoundaryLimitRe(BlackRightWinPredictStore2 + BlackRightWinPredictStore2 - BlackRightWinPredictStore1,
                                    0,
                                    250 - 1);
        
        temp = tempminus;
        BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
        BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
        BlackRightWinPredictStore2 = temp;
      }
      
      if((row == Row2LastLine) || (row == Row2LastLine+1)) break;      
    }
    
    
    if (BlackRightLoc[Row1RealLastLine][0] == 255)
    {

        
        for (i = Row1RealLastLine; ; i++)
        {
            if (BlackRightLoc[i][0] != 255)
            {
                Row1RealLastLine = i;
                break;
            }
            else
            {
            }
            
            if (i == 60 - 1) return 1;
        }

        
        if (BlackRightCrossStep3(Row1RealLastLine, Row2RealFirstLine) == 0)
        {
            return 0;
        }

    }
    else
    {
        
        
        if (BlackRightCrossStep3(Row1RealLastLine, Row2RealFirstLine) == 0)
        {
            return 0;
        }
    }
    
    return 1;
        
}












uint8 BlackRightStep4BackLine(uint8 Step4StartLine, uint8 flag)
{
  uint8 row;
  uint8 i, index;
  uint8 x[4];   
  uint8 y[4];
  uint8 j;
  uint8 temp1;
  uint8 tempend;
  
  int32 temp;
  int32 a0;
  int32 a1;
  
  
  if(flag == 0)
  {
    
    
    if(BlackRightStep1ScanRow < 50)
    {
      
      
      if(BlackRight5Slope[0] > 3400)
      {
        
        BlackRightCrossTailFlag = 1;
        BlackRightHeadEndSearch();
        if (BlackRightEndLine - BlackRightHeadLine <= 5 && BlackLeftHeadLine != 255 && BlackLeftEndLine != 255)
        {
            
            for (i = BlackRightHeadLine; i <= BlackRightEndLine; i++)
            {
                BlackRightLoc[i][0] = 255;
            }
            return 0;
        }
        else if (BlackRight5Slope[0] == 32767)
        {
            
            for (i = 0; i <= 59; i++)
            {
                BlackRightLoc[i][0] = 255;
            }
            return 0;
        }
        
        if(BlackRightEndLine - BlackRightHeadLine - 4 < 0 || BlackRight5SlopeIndex - 1 < 0)
        {
          return 0;
        }
        else
        {
        }        
        tempend = MinRe(BlackRightEndLine - BlackRightHeadLine - 4, BlackRight5SlopeIndex - 1);
        
        for(i = 0; ; i++)
        {
          
          if(BlackRight5Slope[i] < 2100)
          {
            BlackRightCrossTailEndLine = BlackRight5SlopeRow[i];
            break;
          }
          
          if(i == tempend) return 0;  
          
        }
        
        BlackRightCrossTailEndLine += 4;
        
        i = MinRe(BlackRight5SlopeRow[0] + 4, 60 - 1);
        i = MaxRe(BlackRightStep1ScanRow, i);
        if(i >= BlackRightCrossTailEndLine)
        {
          
          for(; ; i--)
          {
            BlackRightLoc[i][0] = 255;
            if(i == BlackRightCrossTailEndLine) break;
          }
          
          Step4StartLine = BlackRightCrossTailEndLine - 1;
        }
        else
        {
        }
      }
      else
      {
        
        BlackRightCrossTailFlag = 0;      
      }
    }
    else
    {    
      
      BlackRightCrossTailFlag = 0;
    }
  }
  
  else
  {
  }  
  

  
  if(Step4StartLine - 4 - 4 < 0)
  {
    temp1 = 0;  
  }
  else
  {
    temp1 = Step4StartLine - 4 - 4;
  }
  
  
  
  index = 0;
  for(i = Step4StartLine; ; i--)
  {
    if(BlackRightLoc[i][0] != 255)
    {
      y[index] = BlackRightLoc[i][0];
      x[index] = i;
      index++;
    }
    if(index == 4)
    {
      break;  
    }
    if(i == temp1)
    {
      return 0;
    }
  }
  
  
  
  a1 = LeastSquarea1(x, y, 4);
  














 
  
  
  




 
  
  
  a0 = LeastSquarea0(x, y, a1, 4);
  
  for(row = Step4StartLine + 1; row <= 60 - 1; row++)
  {
    
    temp = (a0 + a1 * row) / 1000;
    if(temp >= 250-1)
    {
      
      
      for(j = row; ; j++)
      {
        BlackRightLoc[j][0] = 250-1;
        if(j == 60 - 1) break;
      }
      break;
    }
    else if(temp <= 0)
    {
      
      
      for(j = row; ; j++)
      {
        BlackRightLoc[j][0] = 0;
        if(j == 60 - 1) break;
      }
      break;
    }
    else
    {
      BlackRightLoc[row][0] = (uint8)(temp); 
    }
  }
  
  
  
  return 1;
  
}





uint8 BlackRightContinueAdd(void)
{
    uint8 row, i, j;
    uint8 tempfirst, templast;
    uint8 fangHuiWanFlag = 0;
    uint8 fangDuanLieFlag = 0;
    
    
    
    if(BlackRightDone == 1)
    {        
        
        for(row = 60 - 1; ; row--)
        {
          if(BlackRightLoc[row][0] != 255)
          {
            break;
          }
          else
          {
          }
          
          if(row == 0)
          {
            BlackRightDone = 0;
            return 0;
          }
        }
        
        
        tempfirst = 255;
        templast = 255;
                
        
        for (; ; row--)
        {
            if (BlackRightLoc[row][0] == 255)
            {
                if (tempfirst == 255)
                {
                    
                    tempfirst = row + 1;
                    break;
                }
                else
                {
                }
            }
            else
            {
                if (tempfirst != 255)
                {
                    
                    templast = row;
                    
                    if (templast > 5)
                    {
                        if (BlackRightLoc[templast - 1][0] != 255 && BlackRightLoc[templast - 2][0] != 255 && BlackRightLoc[templast - 3][0] != 255
                            && BlackRightLoc[templast - 4][0] != 255 )
                        {
                            fangDuanLieFlag = 0;
                        }
                        else
                        {
                            fangDuanLieFlag = 1;
                        }
                    }
                    else
                    {
                        fangDuanLieFlag = 1;
                    }
                    if (templast >= 8)
                    {
                        if (BlackRightLoc[templast - 1][0] != 255 && BlackRightLoc[templast - 2][0] != 255 && BlackRightLoc[templast - 3][0] != 255
                            && BlackRightLoc[templast - 4][0] != 255 && BlackRightLoc[templast - 5][0] != 255
                                && BlackRightLoc[templast - 6][0] != 255 && BlackRightLoc[templast - 7][0] != 255 && BlackRightLoc[templast - 8][0] != 255)
                        {
                            fangHuiWanFlag = 0;
                        }
                        else
                        {
                            fangHuiWanFlag = 1;
                        }
                    }
                    else
                    {
                        fangHuiWanFlag = 1;
                    }
                    
                    if((BlackRightLoc[tempfirst][0]>=235&&BlackRightLoc[templast][0]>=235) && (tempfirst - templast) <= 12)
                    {
                        
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackRightLoc[j][0] = (BlackRightLoc[tempfirst][0] + BlackRightLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    else if ((BlackRightLoc[tempfirst][0] >= 235 && BlackRightLoc[templast][0] >= 235) && (tempfirst - templast) <20
                             && (BlackRightLoc[10][0] != 255 || BlackRightLoc[9][0] != 255 || BlackRightLoc[8][0] != 255 || BlackRightLoc[7][0] != 255 || BlackRightLoc[6][0] != 255)
                             && fangHuiWanFlag == 0)
                    {
                        
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackRightLoc[j][0] = (BlackRightLoc[tempfirst][0] + BlackRightLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    else if ((BlackRightLoc[tempfirst][0] >= 235 && BlackRightLoc[templast][0] >= 235) && (tempfirst - templast) <= 35
                             && (BlackRightLoc[6][0] != 255 || BlackRightLoc[7][0] != 255 || BlackRightLoc[8][0] != 255 || BlackRightLoc[10][0] != 255 || BlackRightLoc[9][0] != 255)
                             && fangHuiWanFlag == 0)
                    {
                        
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackRightLoc[j][0] = (BlackRightLoc[tempfirst][0] + BlackRightLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    
                    else if (tempfirst - templast <= 5 && fangDuanLieFlag == 0)
                    {
                        for (j = tempfirst - 1; ; j--)
                        {
                            BlackRightLoc[j][0] = (BlackRightLoc[tempfirst][0] + BlackRightLoc[templast][0]) / 2;
                            if (j == templast + 1) break;
                        }
                    }
                    else if(tempfirst - templast >= 3) 
                    {
                      
                      for(i = tempfirst - 1; ; i--)
                      {
                        BlackRightLoc[i][0] = 255;
                        if(i == 0) break;
                      }
                      
                      BlackRightContinueFlag = 2;
                      return 0;
                    }
                    else
                    {
                      
                      for(j = tempfirst - 1; ; j--)
                      {
                        BlackRightLoc[j][0] = (BlackRightLoc[tempfirst][0] + BlackRightLoc[templast][0]) / 2;
                        if(j == templast + 1) break;
                      }
                    }
                    tempfirst = 255;
                    templast = 255;
                    
                    BlackRightContinueFlag = 0;
                }
                else
                {
                }
            }

            if (row == 0) break;
        }
    }
    else
    {
    }    
    
    return 1;
}





uint8 BlackRightRollCheck(void)
{
  uint8 temp1, temp2, temp3;
  
  
  if(SingleBlackAllFlag == 1) return 1;
  
  
  
  if(SlopeR == 32767)
  {
    temp1 = 1;
  }
  else
  {
    
    if(SlopeR > 2000)
    {
      temp1 = 1;
    }
    
    else
    {
      temp1 = 0;
    }
  }
  
  
  
  if(BlackRightHeadLine == 255 || BlackRightEndLine == 255)
  {
    temp2 = 1;
  }
  else
  {
    
    if(BlackRightEndLine - BlackRightHeadLine < 8)
    {
      temp2 = 1;
    }
    
    else
    {
      temp2 = 0;
    }
  }
  
  

















 
  temp3 = 1;
  
  if(
    (BlackRightStep4Flag == 3 || SingleBlackLastAllFlag == 1)   
  &&(BlackRightCrossDone == 1 || BlackRightCrossDone == 0)   
  &&(temp1 == 1)                
  &&(temp2 == 1)                
  &&(temp3 == 1)                
    )
  {
    
    return 0;   
  }
  else
  {
    
    return 1;
  }

}


uint8 BlackRightStep4ErrorCheck(void)
{
  uint8 i;
  
  
  for(i = 0; ; i++)
  {
    if(BlackRight5Slope[i] == 32767) return 0;
    
    if(AbsInt(BlackRight5Slope[i]) > 2100)
    {
      return 0;
    }
    else
    {      
    }
    
    if(i == 5) break;
  }
  
  return 1;
  
}




uint8 BlackGetRightParaInit(void)
{
  uint8 i;  
  
  
  BlackRightContinueFlag = 1;  
  
  
  BlackRightDone = 1;  
 
  
  BlackRightCrossConfirmFlag = 0;  
  
  
  BlackRight5SlopeIndex = 0;  
  for(i = 0; ; i++)
  {
      BlackRight5Slope[i] = 32767;
      BlackRight5SlopeRow[i] = 255;
      if(i == 60 - 1) break;
  }  
  
  
  BlackRightRollCheckFlag = 0;        
  BlackRightBigChangeJumpFlag = 0;    

  
  for(i = 0; i <= 4; i++)
  {
    BlackRightBigChangeNumx[i] = 255;
    BlackRightBigChangeNumy[i] = 255; 
  }
  BlackRightBigChangeFlag = 0;
  BlackRightBigChangeSlopeStore = 32767;

  
  for(i = 0; ; i++)
  {
    BlackRightBigChangeCheckRow[i] = 0;
    if(i == 60 - 1) break;
  }
  BlackRightBigChangeCheckAllRow = 0;

  
  for(i = 0; ; i++)
  {
    BlackRightLoc[i][0] = 255;
    if(i == 60 - 1) break;
  }

  
  BlackRightCrossTailFlag = 2;       

  
  for(i = 0; ; i++)
  {
    BlackRightPredictL[i] = 255;
    BlackRightPredictR[i] = 255; 
    if(i == 60 - 1) break;
  }

  
  BlackRightWinPredictStore0 = 255;
  BlackRightWinPredictStore1 = 255;
  BlackRightWinPredictStore2 = 255;
  
  
  BlackRightStep4Flag = 0;
  BlackRightStep4StartLine = 255;
  
  BlackRightCrossDone = 0;
    
  return 1;
}















uint8 BlackGetRight(void)
{
    uint8 row, temp, temp1, temp2, temp3, i;
    uint8 GapCount, Row1RealLastLine, index, index1;
    uint8 tempWB, tempW, tempB;
    uint8 tempminus;
    uint8 successRow = 255;
    
    int temp001;
    
    
    BlackGetRightParaInit();     
    
    
    
    
    LimitRightWB = LimitRightHeadWB;
    LimitRightW = LimitRightHeadW;
    LimitRightB = LimitRightHeadB;
            
    temp = BlackGetRightStep1Scan(60 - 1, 60 - 48 - 1, 1);
    BlackRightStep1ScanRow = temp;
    
    













    
    if(temp == 255)
    {
      return 0;
    }
    else
    {   
      
      LimitRightHeadWB = LimitRightWB;
      LimitRightHeadW = LimitRightW;
      LimitRightHeadB = LimitRightB;
      
      row = temp;
      
      if(row < 60 - 48)
      {
        BlackRightStep4Flag = 1;             
        BlackRightStep4StartLine = row;
      }

    }
      
    
    
    
    
    
    
    
    temp = BoundaryLimitRe(BlackRightLoc[row - 1][0] + BlackRightLoc[row - 1][0] - BlackRightLoc[row][0],
                           0,
                           250 - 1);    
    
    BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
    BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
    BlackRightWinPredictStore2 = temp;
        
    index = 0;
    index1 = 0;
    
    GapCount = 0;  
    successRow = 255; 
    
    for(row -= 2; ; row -= 2)
    {  
      
      
      if(SingleBlackAllFlag == 1 && row < BlackLeftHeadLine) return 1;
      temp1 = BlackGetRightStep2Win(row, 15, temp, 1);
      if(SingleBlackAllFlag == 1 && row - 1 < BlackLeftHeadLine) return 1;
      temp2 = BlackGetRightStep2Win(row-1, 15, temp, 2);
      
      temp3 = (
              (temp1 == 0)
            &&(temp2 == 0)
            
              );
      
      if(temp1 == 1 && temp2 == 1) 
      {
        
        index = 0;
        index1 = 0;
        successRow = row;
      
        
        tempWB = (BlackRightRealWB[0] + BlackRightRealWB[1]) / 2 - 20; 
        if(tempWB < LimitRightWBMin) tempWB = LimitRightWBMin;
        else if(tempWB > LimitRightWBMax) tempWB = LimitRightWBMax;
        else ;
        LimitRightWB = tempWB;
        
        
        tempW = (BlackRightRealW[0] + BlackRightRealW[1]) / 2 - 40;
        if(tempW < LimitRightWMin) tempW = LimitRightWMin;
        else if(tempW > LimitRightWMax) tempW = LimitRightWMax;
        else ;
        LimitRightW = tempW;
        
        
        tempB = (BlackRightRealB[0] + BlackRightRealB[1]) / 2 + 35;
        if(tempB < LimitRightBMin) tempB = LimitRightBMin;
        else if(tempB > LimitRightBMax) tempB = LimitRightBMax;
        else ;
        
        if(tempB >= LimitRightW)
        {
          tempB = LimitRightW - 1;
        }
        else
        {
        }             
        LimitRightB = tempB;   
         
        
        temp = BoundaryLimitRe(BlackRightLoc[row - 1][0] + BlackRightLoc[row - 1][0] - BlackRightLoc[row][0],
                               0,
                               250 - 1); 
        
        BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
        BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
        BlackRightWinPredictStore2 = temp;        
      }
      
      
      
      else if(temp3 == 1)
      {
        
        if(SingleBlackLastAllFlag == 1) break;        
        
        if(AngleZoneConfirmLockFlag == 1) break;
        
        
        if(index1 == 0)
        {
          
          if(row <= 60 - 3)
          {
              if (BlackRightLoc[row + 1][0] != 255 && BlackRightLoc[row + 2][0] != 255)
              {
                  
                  tempminus = BoundaryLimitRe(BlackRightLoc[row + 1][0] * 3 - BlackRightLoc[row + 2][0] * 2,
                                              0,
                                              250 - 1);
                  
                  tempminus = MinRe(tempminus, BlackRightLoc[row + 1][0]);
              }
              else
              {
                  temp001 = BlackRightWinPredictStore1 - BlackRightWinPredictStore0;
                  BlackRightWinPredictStore0 += temp001;
                  BlackRightWinPredictStore1 += temp001;
                  BlackRightWinPredictStore2 = BlackRightWinPredictStore1 + BlackRightWinPredictStore1 - BlackRightWinPredictStore0;
                  tempminus = BoundaryLimitRe(BlackRightWinPredictStore2 + BlackRightWinPredictStore2 - BlackRightWinPredictStore1,
                                              0,
                                              250 - 1);
              }
          }
          else
          {
              
              return 0;
              
              







 
          }
          
          
          index1++;          
        }
        else
        {
          
          tempminus = BoundaryLimitRe(BlackRightWinPredictStore2 + BlackRightWinPredictStore2 - BlackRightWinPredictStore1,
                                      0,
                                      250 - 1);          
        }
        
        temp = tempminus;
        BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
        BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
        BlackRightWinPredictStore2 = temp;        
        
        
        if(index == 0)
        {          
          
          index++;
          for(i = row; i <= 60 - 1; i++)
          {
            if(BlackRightLoc[i][0] != 255)
            {
              Row1RealLastLine = i;
              break;
            }
          }
          if(Row1RealLastLine >= 60 - 1)
          {
            Row1RealLastLine = 60 - 1;
          }
          else
          {
          }
          
          BlackRightRow1RealLastLine = Row1RealLastLine;
        }
        
        GapCount += 2;
        if (successRow != 255 && BlackRightLoc[successRow][0] >240 && BlackRightLoc[successRow - 1][0] >240) { }
        
        else if(GapCount > 12)
        {
          
          if(row < BlackRightCrossTooLowLine)
          {
            
            for(i = row; ; i--)
            {
              BlackRightLoc[i][0] = 255;
              if(i == 0) break;
            }
            
            break;
          }
          else
          {
          }
          
          
          if(BlackRightStep4Flag == 1)
          {
            
            
            
            









 
          }
          else
          {
          }
          
          
          
          if(BlackRightStep1ScanRow >= 60 - 3 && row > 3)
          {
            
            if(BlackRightAgainForCross(row - 2, 1, Row1RealLastLine, temp) == 0)
            {
              BlackRightCrossDone = 1;  
            }
            else
            {
              BlackRightCrossDone = 2;  
            }
            break;  
          }
          
          else
          {
            break;
          }
        }
        else
        {
           BlackRightCrossDone = 0;    
        }
      
      }
      
      else if((temp1 == 1 && temp2 == 0) || (temp1 == 0 && temp2 == 1)) 
      {   
        
        if(index1 == 0)
        {
          
          if(row <= 60 - 3)
          {
              if (BlackRightLoc[row + 1][0] != 255 && BlackRightLoc[row + 2][0] != 255)
              {
                  
                  tempminus = BoundaryLimitRe(BlackRightLoc[row + 1][0] * 3 - BlackRightLoc[row + 2][0] * 2,
                                              0,
                                              250 - 1);
                  
                  tempminus = MinRe(tempminus, BlackRightLoc[row + 1][0]);
              }
              else
              {
                  temp001 = BlackRightWinPredictStore1 - BlackRightWinPredictStore0;
                  BlackRightWinPredictStore0 += temp001;
                  BlackRightWinPredictStore1 += temp001;
                  BlackRightWinPredictStore2 = BlackRightWinPredictStore1 + BlackRightWinPredictStore1 - BlackRightWinPredictStore0;
                  tempminus = BoundaryLimitRe(BlackRightWinPredictStore2 + BlackRightWinPredictStore2 - BlackRightWinPredictStore1,
                                              0,
                                              250 - 1);
              }
          }
          else
          {
              
              return 0;
              
              







 
          }
          
          
          index1++;          
        }
        else
        {
          
          tempminus = BoundaryLimitRe(BlackRightWinPredictStore2 + BlackRightWinPredictStore2 - BlackRightWinPredictStore1,
                                      0,
                                      250 - 1);          
        }
        
        temp = tempminus;
        BlackRightWinPredictStore0 = BlackRightWinPredictStore1;
        BlackRightWinPredictStore1 = BlackRightWinPredictStore2;
        BlackRightWinPredictStore2 = temp;
      }
      
      else
      {       
      }
      
      
      if((row == 0) || (row == 1)) break;
      
    }
    
    
    
    if(BlackRightStep4Flag == 1)
    {
      if(BlackRightStep4BackLine(BlackRightStep4StartLine, 0) == 0)
      {
        BlackRightStep4Flag = 1;   
        
      }
      else
      {
        BlackRightStep4Flag = 2;   
      }
    }
    
    else if(BlackRightStep4Flag == 3)
    {
      
      if(BlackRightStep4ErrorCheck() == 1)
      {      
        if(BlackRightStep4BackLine(BlackRightStep4StartLine, 0) == 0)
        {
          
          
        }
        else
        {
          BlackRightStep4Flag = 2;   
        }
      }
      else
      {
      }
    }
    
    else
    {
    }

    return 1;

}





uint8 BlackGetPre(void)
{
  uint8 temp1, temp2;
  
  
  if(BrickSpeDealFlag == 1)
  {
    
    if(BrickSpeDealDir == 0)
    {
      BlackGetPreDir = 1;
    }
    
    else
    {
      BlackGetPreDir = 0;
    }
    
    return 1;
  }
  else
  {
  }
  
  
  BlackGetLeftParaInit();  
  temp1 = BlackGetLeftStep1Edge(60 - 1, 1, 1);  
  temp2 = BlackGetLeftStep1Edge(60 - 2, 2, 1);  
  if(
    (temp1 == 1)
  &&(temp2 == 1)
  &&(AbsInt(BlackLeftLoc[60 - 1][0] - BlackLeftLoc[60 - 2][0]) < 8)  
    )
  {
    
    BlackGetPreDir = 0;
    return 1;
  }
  else
  {
    
    BlackLeftLoc[60 - 1][0] = 255;
    BlackLeftLoc[60 - 2][0] = 255;
  }
  
  
  BlackGetRightParaInit();  
  temp1 = BlackGetRightStep1Edge(60 - 1, 1, 1);  
  temp2 = BlackGetRightStep1Edge(60 - 2, 2, 1);  
  if(
    (temp1 == 1)
  &&(temp2 == 1)
  &&(AbsInt(BlackRightLoc[60 - 1][0] - BlackRightLoc[60 - 2][0]) < 8)  
    )
  {
    
    BlackGetPreDir = 1;
    return 1;    
  }
  else
  {
    
    BlackRightLoc[60 - 1][0] = 255;
    BlackRightLoc[60 - 2][0] = 255;    
    
    
    BlackGetPreDir = 2;
    return 1;
  }
}





uint8 BlackSingleSpeCheck(void)   
{
  uint8 temp1, temp2, index1;
  uint8 tempstep1row = 255;
  int avgr1, avgr2, avgl1, avgl2;
  int i;
  
  
  if(
     (BlackLeftDone == 1)
   &&(BlackRightDone == 1)
     )
  {
    
    if(
       (BlackRightStep1ScanRow == 60 - 1 && BlackLeftStep1ScanRow < 60 - 1) 
     &&(BlackRightLoc[BlackRightStep1ScanRow][0] != 255 && BlackLeftLoc[BlackLeftStep1ScanRow][0] != 255) 
     &&(BlackRightLoc[BlackRightStep1ScanRow-1][0] != 255 && BlackLeftLoc[BlackLeftStep1ScanRow-1][0] != 255) 
     &&(BlackRightLoc[BlackRightStep1ScanRow-2][0] != 255 && BlackLeftLoc[BlackLeftStep1ScanRow-2][0] != 255) 
       )
    {
      
      if(
        (BlackLeftLoc[BlackLeftStep1ScanRow-1][0] > SingleBlackWidthMax[BlackLeftStep1ScanRow-1] * 1)
      &&(BlackLeftLoc[BlackLeftStep1ScanRow-2][0] > SingleBlackWidthMax[BlackLeftStep1ScanRow-2] * 1) 
      &&(BlackLeftLoc[BlackLeftStep1ScanRow-1][0] < 250 / 2 + 60)  
      &&(BlackLeftLoc[BlackLeftStep1ScanRow-2][0] < 250 / 2 + 60)  
        )
      {
        
        temp1 = BlackGetRightJustWin(BlackLeftStep1ScanRow-1, 
                                     BlackLeftLoc[BlackLeftStep1ScanRow-1][0] - SingleBlackWidthMax[BlackLeftStep1ScanRow-1], 
                                     BlackLeftLoc[BlackLeftStep1ScanRow-1][0]);
        temp2 = BlackGetRightJustWin(BlackLeftStep1ScanRow-2, 
                                     BlackLeftLoc[BlackLeftStep1ScanRow-2][0] - SingleBlackWidthMax[BlackLeftStep1ScanRow-2], 
                                     BlackLeftLoc[BlackLeftStep1ScanRow-2][0]);
        
        if(temp1 != 255 && temp2 != 255 && AbsInt(temp1 - temp2) < 8)
        {          
          
          avgr1 = (ImgNew[BlackLeftStep1ScanRow-1][temp1 - 1]
                 + ImgNew[BlackLeftStep1ScanRow-1][temp1 - 2]
                 + ImgNew[BlackLeftStep1ScanRow-1][temp1 - 3]
                 + ImgNew[BlackLeftStep1ScanRow-1][temp1 - 4]
                 + ImgNew[BlackLeftStep1ScanRow-1][temp1 - 5])
                 / 5;
          
          avgl1 = (ImgNew[BlackLeftStep1ScanRow-1][BlackLeftLoc[BlackLeftStep1ScanRow-1][0] + 1 + 3 + 1]
                 + ImgNew[BlackLeftStep1ScanRow-1][BlackLeftLoc[BlackLeftStep1ScanRow-1][0] + 1 + 3 + 2]
                 + ImgNew[BlackLeftStep1ScanRow-1][BlackLeftLoc[BlackLeftStep1ScanRow-1][0] + 1 + 3 + 3]
                 + ImgNew[BlackLeftStep1ScanRow-1][BlackLeftLoc[BlackLeftStep1ScanRow-1][0] + 1 + 3 + 4]
                 + ImgNew[BlackLeftStep1ScanRow-1][BlackLeftLoc[BlackLeftStep1ScanRow-1][0] + 1 + 3 + 5])
                 / 5;          
          
          avgr2 = (ImgNew[BlackLeftStep1ScanRow-2][temp2 - 1]
                 + ImgNew[BlackLeftStep1ScanRow-2][temp2 - 2]
                 + ImgNew[BlackLeftStep1ScanRow-2][temp2 - 3]
                 + ImgNew[BlackLeftStep1ScanRow-2][temp2 - 4]
                 + ImgNew[BlackLeftStep1ScanRow-2][temp2 - 5])
                 / 5;
          
          avgl2 = (ImgNew[BlackLeftStep1ScanRow-2][BlackLeftLoc[BlackLeftStep1ScanRow-2][0] + 1 + 3 + 1]
                 + ImgNew[BlackLeftStep1ScanRow-2][BlackLeftLoc[BlackLeftStep1ScanRow-2][0] + 1 + 3 + 2]
                 + ImgNew[BlackLeftStep1ScanRow-2][BlackLeftLoc[BlackLeftStep1ScanRow-2][0] + 1 + 3 + 3]
                 + ImgNew[BlackLeftStep1ScanRow-2][BlackLeftLoc[BlackLeftStep1ScanRow-2][0] + 1 + 3 + 4]
                 + ImgNew[BlackLeftStep1ScanRow-2][BlackLeftLoc[BlackLeftStep1ScanRow-2][0] + 1 + 3 + 5])
                 / 5;          
          
          
          if(AbsInt(avgr1 - avgl1) < 15 && AbsInt(avgr2 - avgl2) < 15)
          {
            BlackSingleFlag = 1;        
            BlackSingleDir = 0;         
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
      
      
      if(BlackSingleFlag == 1)
      {
        
        for(i = 0; ; i++)
        {
          BlackRightLoc[i][0] = 255;           
          if(i == 60 - 1) break;
        }
        
        index1 = 0;
        
        for(i = BlackLeftStep1ScanRow; ; i--)
        {
          temp1 = BlackGetRightJustWin(i, 
                                       BlackLeftLoc[i][0] - SingleBlackWidthMax[i], 
                                       BlackLeftLoc[i][0]);            
          if(temp1 != 255)
          {
            
            BlackRightLoc[i][0] = temp1 + 1 + 3;
            
            if(index1 == 0)
            {
              tempstep1row = i;
              index1++;
            }
            else
            {
            }
          }
          else
          {
            
            break;
          }
          
          if(i == BlackLeftHeadLine) break;
        }
        
        
        if(tempstep1row == 255) return 0;
        
        
        
        if(BlackLeftStep4BackLine(BlackLeftStep1ScanRow - 2, 1) == 1 && BlackRightStep4BackLine(tempstep1row - 2, 1) == 1)
        {
        }
        else
        {
          
          return 0;
        }           
        
        
        
        
      }
      
      else
      {
      }
        
    }
    
    else if(
       (BlackLeftStep1ScanRow == 60 - 1 && BlackRightStep1ScanRow < 60 - 1) 
     &&(BlackRightLoc[BlackRightStep1ScanRow][0] != 255 && BlackLeftLoc[BlackLeftStep1ScanRow][0] != 255) 
     &&(BlackRightLoc[BlackRightStep1ScanRow-1][0] != 255 && BlackLeftLoc[BlackLeftStep1ScanRow-1][0] != 255) 
     &&(BlackRightLoc[BlackRightStep1ScanRow-2][0] != 255 && BlackLeftLoc[BlackLeftStep1ScanRow-2][0] != 255) 
       )
    {
      
      if(
        (BlackRightLoc[BlackRightStep1ScanRow-1][0] < 250 - 1 - SingleBlackWidthMax[BlackRightStep1ScanRow-1] * 1)
      &&(BlackRightLoc[BlackRightStep1ScanRow-2][0] < 250 - 1 - SingleBlackWidthMax[BlackRightStep1ScanRow-2] * 1) 
      &&(BlackRightLoc[BlackRightStep1ScanRow-1][0] > 250 / 2 - 60)  
      &&(BlackRightLoc[BlackRightStep1ScanRow-2][0] > 250 / 2 - 60)  
        )
      {
        
        temp1 = BlackGetLeftJustWin(BlackRightStep1ScanRow-1, 
                                     BlackRightLoc[BlackRightStep1ScanRow-1][0], 
                                     BlackRightLoc[BlackRightStep1ScanRow-1][0] + SingleBlackWidthMax[BlackRightStep1ScanRow-1]);
        temp2 = BlackGetLeftJustWin(BlackRightStep1ScanRow-2, 
                                     BlackRightLoc[BlackRightStep1ScanRow-2][0], 
                                     BlackRightLoc[BlackRightStep1ScanRow-2][0] + SingleBlackWidthMax[BlackRightStep1ScanRow-2]);
        
        if(temp1 != 255 && temp2 != 255 && AbsInt(temp1 - temp2) < 8)
        {          
          
          avgr1 = (ImgNew[BlackRightStep1ScanRow-1][temp1 + 1]
                 + ImgNew[BlackRightStep1ScanRow-1][temp1 + 2]
                 + ImgNew[BlackRightStep1ScanRow-1][temp1 + 3]
                 + ImgNew[BlackRightStep1ScanRow-1][temp1 + 4]
                 + ImgNew[BlackRightStep1ScanRow-1][temp1 + 5])
                 / 5;
          
          avgl1 = (ImgNew[BlackRightStep1ScanRow-1][BlackRightLoc[BlackRightStep1ScanRow-1][0] - 1 - 3 - 1]
                 + ImgNew[BlackRightStep1ScanRow-1][BlackRightLoc[BlackRightStep1ScanRow-1][0] - 1 - 3 - 2]
                 + ImgNew[BlackRightStep1ScanRow-1][BlackRightLoc[BlackRightStep1ScanRow-1][0] - 1 - 3 - 3]
                 + ImgNew[BlackRightStep1ScanRow-1][BlackRightLoc[BlackRightStep1ScanRow-1][0] - 1 - 3 - 4]
                 + ImgNew[BlackRightStep1ScanRow-1][BlackRightLoc[BlackRightStep1ScanRow-1][0] - 1 - 3 - 5])
                 / 5;
          
          avgr2 = (ImgNew[BlackRightStep1ScanRow-2][temp2 + 1]
                 + ImgNew[BlackRightStep1ScanRow-2][temp2 + 2]
                 + ImgNew[BlackRightStep1ScanRow-2][temp2 + 3]
                 + ImgNew[BlackRightStep1ScanRow-2][temp2 + 4]
                 + ImgNew[BlackRightStep1ScanRow-2][temp2 + 5])
                 / 5;
          
          avgl2 = (ImgNew[BlackRightStep1ScanRow-2][BlackRightLoc[BlackRightStep1ScanRow-2][0] - 1 - 3 - 1]
                 + ImgNew[BlackRightStep1ScanRow-2][BlackRightLoc[BlackRightStep1ScanRow-2][0] - 1 - 3 - 2]
                 + ImgNew[BlackRightStep1ScanRow-2][BlackRightLoc[BlackRightStep1ScanRow-2][0] - 1 - 3 - 3]
                 + ImgNew[BlackRightStep1ScanRow-2][BlackRightLoc[BlackRightStep1ScanRow-2][0] - 1 - 3 - 4]
                 + ImgNew[BlackRightStep1ScanRow-2][BlackRightLoc[BlackRightStep1ScanRow-2][0] - 1 - 3 - 5])
                 / 5;      
          
          
          if(AbsInt(avgr1 - avgl1) < 15 && AbsInt(avgr2 - avgl2) < 15)
          {
            BlackSingleFlag = 1;        
            BlackSingleDir = 1;         
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
      
      
      if(BlackSingleFlag == 1)
      {
        
        for(i = 0; ; i++)
        {
          BlackLeftLoc[i][0] = 255;           
          if(i == 60 - 1) break;
        }
        
        index1 = 0;
        
        for(i = BlackRightStep1ScanRow; ; i--)
        {
          temp1 = BlackGetLeftJustWin(i, 
                                      BlackRightLoc[i][0], 
                                      BlackRightLoc[i][0] + SingleBlackWidthMax[i]);            
          if(temp1 != 255)
          {
            
            BlackLeftLoc[i][0] = temp1 - 1 - 3;
            
            if(index1 == 0)
            {
              tempstep1row = i;
              index1++;
            }
            else
            {
            }
          }
          else
          {
            
            break;
          }
          
          if(i == BlackRightHeadLine) break;
        }
        
        
        if(tempstep1row == 255) return 0;
         
        
        
        if(BlackRightStep4BackLine(BlackRightStep1ScanRow - 2, 1) == 1 && BlackLeftStep4BackLine(tempstep1row - 2, 1) == 1)
        {
        }
        else
        {
          
          return 0;
        }           
        
        
        
        
      }
      
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
  
  return 1;
}
 










uint8 BlackBigChangeFinalCheck(void)
{
  
  
  uint8 i, row;
  uint8 tempend1, tempend2;
  
  return 0;         
  
  
  if(BlackLeftDone == 1 && BlackRightDone == 1)
  {
  }
  else
  {
    return 0;
  }
  
  
  
  if(BlackGetPreDir == 0 || BlackGetPreDir == 2)
  {
    if(BlackLeftStep1ScanRow == 60 - 1 && BlackRightStep1ScanRow >= 60 - 5)
    {
    }
    else
    {
      
      return 0;
    }
  }
  
  else
  {
    if(BlackRightStep1ScanRow == 60 - 1 && BlackLeftStep1ScanRow >= 60 - 5)
    {
    }
    else
    {
      
      return 0;
    }    
  }
  
  
  
  if(SlopeL < 0 && BlackLeftEndLine - BlackLeftHeadLine - 5 > 0 && BlackLeft5SlopeIndex - 2 > 0)
  {
    
    tempend1 = MinRe(BlackLeftEndLine - BlackLeftHeadLine - 5, BlackLeft5SlopeIndex - 2);
    
    for(i = 0; ; i++)
    {
      
      if(
        (BlackLeft5Slope[i] < 0)
      &&(BlackLeft5Slope[i+1] < 0)
      &&(BlackLeft5Slope[i] - BlackLeft5Slope[i+1] >= 2500)     
        )
      {
        
        break;
      }
      else
      {      
      }
      
      
      if(i == tempend1) break;
    }
    
    
    if(i != tempend1)
    {
      
      if(i > 4)
      {
        row = BlackLeft5SlopeRow[i+1] + 3;
        
        
        if(BlackLeftCrossDone == 2 && row < BlackLeftRow1RealLastLine)
        {
          
          return 0;
        }
        else
        {
        }
        
        
        for(; ; row--)
        {
          BlackLeftLoc[row][0] = 255;
          
          if(row == 0) break;
        }
  
        
        BlackBigChangeFinalCheckFlag = 1;
        
        return 1;
      }
      else
      {     
      }
    }
    
    else
    {    
    }
  }
  else
  {
  }
  
  
  
  if(SlopeR > 0 && BlackRightEndLine - BlackRightHeadLine - 5 > 0 && BlackRight5SlopeIndex - 2 > 0)
  {
    
    tempend2 = MinRe(BlackRightEndLine - BlackRightHeadLine - 5, BlackRight5SlopeIndex - 2);
    
    for(i = 0; ; i++)
    {
      
      if(
        (BlackRight5Slope[i] > 0)
      &&(BlackRight5Slope[i+1] > 0)
      &&(BlackRight5Slope[i+1] - BlackRight5Slope[i] >= 2500)     
        )
      {
        
        break;
      }
      else
      {      
      }
      
      
      if(i == tempend2) break;
    }
    
    
    if(i != tempend2)
    {
      
      if(i > 4)
      {        
        row = BlackRight5SlopeRow[i+1] + 3;
        
        
        if(BlackRightCrossDone == 2 && row < BlackRightRow1RealLastLine)
        {
          
          return 0;
        }
        else
        {
        }
        
        
        for(; ; row--)
        {
          BlackRightLoc[row][0] = 255;
          
          if(row == 0) break;
        }
        
        
        BlackBigChangeFinalCheckFlag = 2;
        
        return 1;
      }
      else
      {     
      }
    }
    
    else
    {    
    }  
  }
  else
  {
  }
  
  
  return 0;
}














































































































































































































uint8 BlackGet(void)
{
    uint8 i;
    uint8 tempBlackAngleZoneSpeCheck;       
    uint8 tempBlackBigChangeFinalCheck; 
    uint8 tempBlackSingleSpeCheck;      
    
    

    
    BlackGetPre();    
    
    
    if(BlackGetPreDir == 0 || BlackGetPreDir == 2)
    {
      
      if(BlackGetLeft() == 0)
      {
        BlackLeftDone = 0;                  
        BlackLeftHeadLine = 255;    
        BlackLeftEndLine = 255;    
      }
      else
      {
        
        BlackLeftContinueAdd();
        
        BlackLeftHeadEndSearch();
  
      }    
      
      
      
      if(
        (BrickSpeDealFlag == 1 && BrickSpeDealDir == 1)
      ||(BlackGetRight() == 0)
        )
      {
        BlackRightDone = 0;                  
        BlackRightHeadLine = 255;    
      }
      else
      {
        
        BlackRightContinueAdd();
        
        BlackRightHeadEndSearch();
      }
    }
    
    else
    {
      
      if(BlackGetRight() == 0)
      {
        BlackRightDone = 0;                  
        BlackRightHeadLine = 255;    
      }
      else
      {
        
        BlackRightContinueAdd();
        
        BlackRightHeadEndSearch();
      }
      
      
      
      if(
        (BrickSpeDealFlag == 1 && BrickSpeDealDir == 0)
      ||(BlackGetLeft() == 0)
        )
      {
        BlackLeftDone = 0;                  
        BlackLeftHeadLine = 255;    
        BlackLeftEndLine = 255;    
      }
      else
      {
        
        BlackLeftContinueAdd();
        
        BlackLeftHeadEndSearch();
  
      }
    }
     
    
    if((BlackLeftDone == 0) && (BlackRightDone == 0))
    {
      return 0;
    }
    else
    {
      
      BlackUdis();
      
      
      
      
      CurveSlopeFlagL = 1;
      CurveSlopeFlagR = 1;
      
      if(CurveSlopeGetLeft() == 0)
      {
        CurveSlopeFlagL = 0;
        
      }
      else
      {
      }
      
      
      if(CurveSlopeGetRight() == 0)
      {
        CurveSlopeFlagR = 0;
        
      }
      else
      {
      }
      
      
      if(BlackLeftDone == 1)
      {
        
        if(BlackLeftRollCheck() == 0)
        {
          BlackLeftRollCheckFlag = 1;         
          BlackLeftDone = 0;                  
          
          for(i = BlackLeftEndLine; ; i--)
          {
            BlackLeftLoc[i][0] = 255;
            if(i == BlackLeftHeadLine) break;
          }
          BlackLeftHeadLine = 255;    
          BlackLeftEndLine = 255;     
        }
        else
        {
        }
      }
      
      else
      {
      }
      
      
      if(BlackRightDone == 1)
      {
        
        if(BlackRightRollCheck() == 0)
        {
          BlackRightRollCheckFlag = 1;         
          BlackRightDone = 0;                  
          
          for(i = BlackRightEndLine; ; i--)
          {
            BlackRightLoc[i][0] = 255;
            if(i == BlackRightHeadLine) break;
          }
          BlackRightHeadLine = 255;    
          BlackRightEndLine = 255;     
        }
        else
        {
        }
      }
      
      else
      {
      }
      
    }
    
    
    if(AngleConfirmLockFlag == 1 || AngleSpeDealFlag == 1 || BrickConfirmLockFlag == 1 || BrickSpeDealFlag == 1)
    {
    }
    else
    {
      
      tempBlackAngleZoneSpeCheck = 0;









      
      tempBlackBigChangeFinalCheck = 0;
      if(tempBlackAngleZoneSpeCheck == 0 && 1 == 1)
      {
        
        tempBlackBigChangeFinalCheck = BlackBigChangeFinalCheck();
        
        if(tempBlackBigChangeFinalCheck == 1)
        {
          
          BlackLeftHeadEndSearch();
          
          BlackRightHeadEndSearch();
          
          
          BlackUdis();
          
          
          
          
          CurveSlopeFlagL = 1;
          CurveSlopeFlagR = 1;
          
          if(CurveSlopeGetLeft() == 0)
          {
            CurveSlopeFlagL = 0;
            
          }
          else
          {
          }
          
          
          if(CurveSlopeGetRight() == 0)
          {
            CurveSlopeFlagR = 0;
            
          }
          else
          {
          }          
        }
        else
        {
        }
      }
      else
      {        
      }
      
      if(tempBlackAngleZoneSpeCheck == 1 || tempBlackBigChangeFinalCheck == 1)
      {
        
      }
      



























































           
    }

    
    return 1;
}



uint8 CenterLineGetSingleWrongAdd(void)
{
  uint8 row, i;
  uint8 temp;
  uint8 flag1, flag2;
  uint8 tempflag1;
  uint8 tempway1;
  uint8 x[4];   
  int16 y[4];   
  int32 a1, a0;    
  
  float slope;
  
  
  for(i = 0; ; i++)
  {
    CenterLineLoc[i] = 32767;
    if(i == 60 - 1) break;
  }
  
  
  if(RoadHalfWidthWrongDir == 0)
  {
    
    if(BlackRightHeadLine == 255 || BlackRightEndLine == 255)
    {
      return 0;
    }
    else
    {
    }
       
    flag1 = 1;
    flag2 = 1;
    
    
    CenterHeadLine = BlackRightHeadLine;   
    
    CenterEndLine = BlackRightEndLine;
    
    
    if(BlackRightHeadLine >= 26)
    {
      flag1 = 0;     
    }
    else
    {
    }
    
    
    if(BlackRightEndLine < 60 - 1)
    {
      
      
      if(BlackRightEndLine <= 26)  
      {
        flag2 = 0;
        return 0;
      }
      
      else
      {
      }
    }
    
    else
    {
    }
    
    
    
    if(BlackRightEndLine - BlackRightHeadLine > 5)
    {
      slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                    (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
    }
    else
    {
      slope = 0;
    }
    
    temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
    
    RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
    
    tempflag1 = 0;
    tempway1 = 0;
    
    CenterLineLoc[BlackRightEndLine] = BlackUdisRightLocation[BlackRightEndLine].x - RoadHalfWidth;
    
    for(row = BlackRightEndLine - 1; ;row--)
    {
      
      if(BlackRightLoc[row][0] != 255)
      {
        tempflag1 = 0;
        CenterLineLoc[row] = CenterLineLoc[row+1] + BlackUdisRightLocation[row].x - BlackUdisRightLocation[row+1].x;
      }
      
      else
      {
          
          if(tempflag1 == 0)
          {
            
            tempflag1 = 1;
            
            if(row + 4 <= 60 - 1)
            {
              tempway1 = 0;
              
              for(i = 0; i < 4; i++)
              {
                x[i] = row + i + 1;
                y[i] = CenterLineLoc[row + i + 1];
              }
              a1 = LeastSquareInt16a1(x, y, 4);         
              a0 = LeastSquareInt16a0(x, y, a1, 4);     
            }
            
            else
            {
              tempway1 = 1;
            }
          }
          else
          {
          }
        
          
          if(tempway1 == 0)
          {
            
            CenterLineLoc[row] = (a0 + a1 * row) / 1000;
          }
          else
          {
            
            if(row == 60 - 1 || row == 60 - 2)
            {
              CenterLineLoc[row] = BlackUdisRightLocation[row].x - RoadHalfWidth;
            }
            
            else
            {
              
              CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];
            }
          }
        }
      
        if(row == 0) break;
      }
    
      
    
    
    
    if(CenterEndLine != 60 - 1)
    {
      for(row = 60 - 1; ; row--)
      {
        if(row == CenterEndLine) break;       
        CenterLineLoc[row] = 32767;
      }
    }
    else
    {
    }
  }
  
  else
  {
    
    if(BlackLeftHeadLine == 255 || BlackLeftEndLine == 255)
    {
      return 0;
    }
    else
    {
    }
    
    flag1 = 1;
    flag2 = 1;
    
    
    CenterHeadLine = BlackLeftHeadLine;     
    
    CenterEndLine = BlackLeftEndLine;
    
    
    if(BlackLeftHeadLine >= 26)
    {
      flag1 = 0;
    }
    else
    {
    }
    
    
    if(BlackLeftEndLine < 60 - 1)
    {
      
      
      if(BlackLeftEndLine <= 26)
      {
        flag2 = 0;
        return 0;       
      }
      
      else
      {
      }
    }
    
    else
    {
    }
    
    
    
    if(BlackLeftEndLine - BlackLeftHeadLine > 5)
    {
      slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                    (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
    }
    else
    {
      slope = 0;
    }
    
    temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
    
    RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
    
    
    CenterLineLoc[BlackLeftEndLine] = BlackUdisLeftLocation[BlackLeftEndLine].x + RoadHalfWidth;
    
    tempflag1 = 0;
    tempway1 = 0;
    
    for(row = BlackLeftEndLine - 1; ;row--)
    {
      
      if(BlackLeftLoc[row][0] != 255)
      {
        tempflag1 = 0;
        CenterLineLoc[row] = CenterLineLoc[row+1] + BlackUdisLeftLocation[row].x - BlackUdisLeftLocation[row+1].x;
      }
      
      else
      {
        
        if(tempflag1 == 0)
        {
          
          tempflag1 = 1;
          
          if(row + 4 <= 60 - 1)
          {
            tempway1 = 0;
            
            for(i = 0; i < 4; i++)
            {
              x[i] = row + i + 1;
              y[i] = CenterLineLoc[row + i + 1];
            }
            a1 = LeastSquareInt16a1(x, y, 4);         
            a0 = LeastSquareInt16a0(x, y, a1, 4);     
          }
          
          else
          {
            tempway1 = 1;
          }
        }
        else
        {
        }
        
        
        if(tempway1 == 0)
        {
          
          CenterLineLoc[row] = (a0 + a1 * row) / 1000;
        }
        else
        {
          
          if(row == 60 -1  || row == 60 - 2)
          {
            CenterLineLoc[row] = BlackUdisLeftLocation[row].x + RoadHalfWidth;
          }
          
          else
          {
            
            CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];            
          }
        }
      }
      
      
      if(row == 0) break;
    }
    
    
    
    if(CenterEndLine != 60 - 1)
    {
      for(row = 60 - 1; ; row--)
      {
        if(row == CenterEndLine) break;       
        CenterLineLoc[row] = 32767;
      }
    }
    else
    {
    }
  }
  
  return 1;
}






uint8 CenterLineGetNormal(void)
{
    int black_row, i, j;
            uint8 temp;
            uint8 flag1, 
                flag2, 
                flag3, 
                flag4;  
            uint8 tempflag1=1;
            uint8 tempway1=1;
            uint8 x[4];   
            int16 y[4];   
            int32 a1 = 0, a0 = 0;    
            uint8 index;
            uint8 a[4];   
            uint8 b[4];


            float slope;


            
            if (BlackLeftDone == 1 && BlackRightDone == 0)
            {
                
                if (BlackLeftHeadLine == 255 || BlackLeftEndLine == 255)
                {
                    return 0;
                }
                else
                {
                }

                flag1 = 1;
                flag2 = 1;

                
                CenterHeadLine = BlackLeftHeadLine;   
                                                       
                CenterEndLine = BlackLeftEndLine;

                
                if (BlackLeftHeadLine >= 55)
                {
                    flag1 = 0;
                }
                else
                {
                }

                
                if (BlackLeftEndLine < 60 - 1)
                {
                    
                    
                    if (BlackLeftEndLine <= 5)
                    {
                        flag2 = 0;
                        return 0;
                    }
                    
                    else
                    {
                    }
                }
                
                else
                {
                }

                
                
                for (black_row = BlackLeftHeadLine; ; black_row++)
                {
                    if (BlackLeftEndLine - BlackLeftHeadLine > 5)
                    {
                        if (BlackLeftLoc[black_row][ 0] != 255)
                        {
                            slope = 1.0 * (BlackUdisLeftLocation[black_row + 4].x - BlackUdisLeftLocation[black_row].x) /
                                  (BlackUdisLeftLocation[black_row + 4].y - BlackUdisLeftLocation[black_row].y);
                            


 
                            
                            temp = CenterLineHalfWidth[black_row];
                            

                            RoadHalfWidth = temp;

                            tempflag1 = 0;
                            tempway1 = 0;
                            buXianCount = 0;
                            
                            CenterLineLoc[black_row] = BlackLeftLoc[black_row][ 0] + RoadHalfWidth;
                        }
                        

                        
                        
                        else
                        {
                            
                            if (tempflag1 == 0)
                            {
                                
                                tempflag1 = 1;
                                
                                
                                if (black_row + 4 + 2 <= 60 - 1)
                                {
                                    tempway1 = 0;
                                    
                                    for (i = 0; i < 4; i++)
                                    {
                                        x[i] = black_row - i - 3;
                                        y[i] = CenterLineLoc[black_row - i - 3];
                                    }
                                    a1 = LeastSquareInt16a1(x, y, 4);         
                                    a0 = LeastSquareInt16a0(x, y, a1, 4);     
                                }
                                else if (black_row + 4 + 1 <= 60 - 1)
                                {
                                    tempway1 = 0;
                                    
                                    for (i = 0; i < 4; i++)
                                    {
                                        x[i] = black_row - i - 2;
                                        y[i] = CenterLineLoc[black_row - i - 2];
                                    }
                                    a1 = LeastSquareInt16a1(x, y, 4);         
                                    a0 = LeastSquareInt16a0(x, y, a1, 4);     
                                }
                                else if (black_row + 4 <= 60 - 1)
                                {
                                    tempway1 = 0;
                                    
                                    for (i = 0; i < 4; i++)
                                    {
                                        x[i] = black_row - i - 1;
                                        y[i] = CenterLineLoc[black_row - i - 1];
                                    }
                                    a1 = LeastSquareInt16a1(x, y, 4);         
                                    a0 = LeastSquareInt16a0(x, y, a1, 4);     
                                }
                                
                                else
                                {
                                    tempway1 = 1;
                                }
                            }
                            else
                            {
                            }

                            
                            if (tempway1 == 0)
                            {
                                
                                CenterLineLoc[black_row] = (a0 + a1 * black_row) / 1000;
                            }
                            else
                            {
                                










 
                            }
                        }
                    }
                    else
                    {
                        tempflag1 = 1;
                        tempway1 = 1;
                        temp = CenterLineHalfWidth[black_row];
                        RoadHalfWidth = temp;
                        CenterLineLoc[black_row] = BlackLeftLoc[black_row][ 0] + RoadHalfWidth;

                    }
                    if (CenterLineLoc[black_row] >= 255)
                        CenterLineLoc[black_row] = 255;
                    else if (CenterLineLoc[black_row] <= 0)
                        CenterLineLoc[black_row] = 0;
                    else
                    {
                    }
                    if (black_row >= 59) break;
                }



            }
            
            else if (BlackLeftDone == 0 && BlackRightDone == 1)
            {
                
                if (BlackRightHeadLine == 255 || BlackRightEndLine == 255)
                {
                    return 0;
                }
                else
                {
                }

                flag1 = 1;
                flag2 = 1;

                
                CenterHeadLine = BlackRightHeadLine;   
                                                       
                CenterEndLine = BlackRightEndLine;

                
                if (BlackRightHeadLine >= 55)
                {
                    flag1 = 0;
                }
                else
                {
                }

                
                if (BlackRightEndLine < 60 - 1)
                {
                    
                    
                    if (BlackRightEndLine <= 5)
                    {
                        flag2 = 0;
                        return 0;
                    }
                    
                    else
                    {
                    }
                }
                
                else
                {
                }

                
                
                for (black_row = BlackRightHeadLine; ; black_row++)
                {
                    if (BlackRightEndLine - BlackRightHeadLine > 5)
                    {
                        if (BlackRightLoc[black_row][ 0] != 255)
                        {
                            slope = 1.0 * (BlackUdisRightLocation[black_row + 4].x - BlackUdisRightLocation[black_row].x) /
                                  (BlackUdisRightLocation[black_row + 4].y - BlackUdisRightLocation[black_row].y);
                            


 
                            
                            temp = CenterLineHalfWidth[black_row];
                            

                            RoadHalfWidth = temp;

                            tempflag1 = 0;
                            tempway1 = 0;
                            buXianCount = 0;
                            
                            CenterLineLoc[black_row] = BlackRightLoc[black_row][ 0] - RoadHalfWidth;
                        }
                        

                        
                        
                        else
                        {
                            
                            if (tempflag1 == 0)
                            {
                                
                                tempflag1 = 1;
                                
                                
                                if (black_row + 4 + 2 <= 60 - 1)
                                {
                                    tempway1 = 0;
                                    
                                    for (i = 0; i < 4; i++)
                                    {
                                        x[i] = black_row - i - 3;
                                        y[i] = CenterLineLoc[black_row - i - 3];
                                    }
                                    a1 = LeastSquareInt16a1(x, y, 4);         
                                    a0 = LeastSquareInt16a0(x, y, a1, 4);     
                                }
                                else if (black_row + 4 + 1 <= 60 - 1)
                                {
                                    tempway1 = 0;
                                    
                                    for (i = 0; i < 4; i++)
                                    {
                                        x[i] = black_row - i - 2;
                                        y[i] = CenterLineLoc[black_row - i - 2];
                                    }
                                    a1 = LeastSquareInt16a1(x, y, 4);         
                                    a0 = LeastSquareInt16a0(x, y, a1, 4);     
                                }
                                else if (black_row + 4 <= 60 - 1)
                                {
                                    tempway1 = 0;
                                    
                                    for (i = 0; i < 4; i++)
                                    {
                                        x[i] = black_row - i - 1;
                                        y[i] = CenterLineLoc[black_row - i - 1];
                                    }
                                    a1 = LeastSquareInt16a1(x, y, 4);         
                                    a0 = LeastSquareInt16a0(x, y, a1, 4);     
                                }
                                
                                else
                                {
                                    tempway1 = 1;
                                }
                            }
                            else
                            {
                            }

                            
                            if (tempway1 == 0)
                            {
                                
                                CenterLineLoc[black_row] = (a0 + a1 * black_row) / 1000;
                            }
                            else
                            {
                                










 
                            }
                        }
                    }
                    else
                    {
                        tempflag1 = 1;
                        tempway1 = 1;
                        temp = CenterLineHalfWidth[black_row];
                        RoadHalfWidth = temp;
                        CenterLineLoc[black_row] = BlackRightLoc[black_row][ 0] - RoadHalfWidth;

                    }
                    if (CenterLineLoc[black_row] >= 255)
                        CenterLineLoc[black_row] = 255;
                    else if (CenterLineLoc[black_row] <= 0)
                        CenterLineLoc[black_row] = 0;
                    else
                    {
                    }
                    if (black_row >= 59) break;
                }


            }



            
            
            









 

       

  
 else if(BlackLeftDone == 1 && BlackRightDone == 1)
  {
    CenterHeadLine = MinRe(BlackLeftHeadLine, BlackRightHeadLine);    
    
    
    CenterEndLine = MinRe(BlackLeftEndLine, BlackRightEndLine);             
    
    
    if(SingleBlackAllFlag == 0)
    {
    
      
      
      
      
      flag1 = 1;
      flag2 = 1;
      flag3 = 1;
      flag4 = 1;
      
      
      if(BlackLeftHeadLine >= 55)
      {
        flag1 = 0;
      }
      else
      {
      }
      
      if(BlackLeftEndLine < 60 - 1)
      {
        
        
        if(BlackLeftEndLine <= 60 - 48 - 1)
        {
          flag2 = 0;
        }
        
        else
        {
        }
      }
      
      else
      {
      }
  
      
      
      if(BlackRightHeadLine >= 55)
      {
        flag3 = 0;
      }
      else
      {
      }    
      
      if(BlackRightEndLine < 60 - 1)
      {
        
        
        if(BlackRightEndLine <= 60 - 48 - 1)
        {
          flag4 = 0;
          
          if(flag2 == 0) 
          {
            return 0;
          }
          else
          {
          }
        }
        
        else
        {
        }
      }
      
      else
      {
      }
      
      
      if(
        (flag3 == 1 && flag4 == 1)
      &&((flag1 == 0 && flag2 == 0) || (flag1 == 1 && flag2 == 0) || (flag1 == 0 && flag2 == 1))
        )
      {
        
        
        if(BlackRightEndLine - BlackRightHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                    (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
        RoadHalfWidthCompen = RoadHalfWidth / temp;
        if(RoadHalfWidthSwitch == 1)
        {
          RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
        }
        else
        {
        }
      }
      
      else if(
             (flag1 == 1 && flag2 == 1)
           &&((flag3 == 0 && flag4 == 0) || (flag3 == 1 && flag4 == 0) || (flag3 == 0 && flag4 == 1))
             )
      {
        
        
        if(BlackLeftEndLine - BlackLeftHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x- BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                    (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
        RoadHalfWidthCompen = RoadHalfWidth / temp;
        if(RoadHalfWidthSwitch == 1)
        {
          RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
        }
        else
        {
        }
      }
      
      else if(flag1 == 1 && flag2 == 1 && flag3 == 1 && flag4 == 1)
      {
        
        
        if(BlackLeftEndLine - BlackLeftHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                    (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
        
        
        if(BlackRightEndLine - BlackRightHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                    (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = MaxRe((uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2), temp);
        RoadHalfWidthCompen = RoadHalfWidth / temp;
        if(RoadHalfWidthSwitch == 1)
        {
          RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
        }
        else
        {
        }
      }
      
      else
      {
        
        if(flag2 == 0 && flag4 == 0)
        {
          return 0;
        }
        else
        {
          
          if(flag1 == 1 && flag3 == 0)
          {
            
            
            if(BlackLeftEndLine - BlackLeftHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                    (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
            RoadHalfWidthCompen = RoadHalfWidth / temp;
            if(RoadHalfWidthSwitch == 1)
            {
              RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
            }
            else
            {
            }
          }
          
          else if(flag1 == 0 && flag3 == 1)
          {
            
            
            if(BlackRightEndLine - BlackRightHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                    (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
            RoadHalfWidthCompen = RoadHalfWidth / temp;
            if(RoadHalfWidthSwitch == 1)
            {
              RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
            }
            else
            {
            }
          }
          
          else if(flag1 == 0 && flag3 == 0)
          {
            
            
            if(BlackLeftEndLine - BlackLeftHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                    (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
            
            
            if(BlackRightEndLine - BlackRightHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                    (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = MaxRe((uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2), temp);
            RoadHalfWidthCompen = RoadHalfWidth / temp;
            if(RoadHalfWidthSwitch == 1)
            {
              RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
            }
            else
            {
            }
          }
          
          else
          {
            return 0;
          }
        }
      }
      
      int temproad;  
      temproad = RoadHalfWidth;
      
      tempflag1 = 0;
      tempway1 = 0;
    buXianCount = 0;

                    
                        for (black_row = CenterHeadLine; black_row <= 60 - 1; black_row++)
                        {
                            
                            if (BlackLeftLoc[black_row][ 0] != 255 && BlackRightLoc[black_row][ 0] != 255)
                            {
                                tempflag1 = 0;
                                
                                CenterLineLoc[black_row] = (BlackLeftLoc[black_row][ 0] + BlackRightLoc[black_row][ 0]) / 2;
                                
                                


 
                                
                                
                                
















 
                            }
                            
                            else if (BlackLeftLoc[black_row][ 0] == 255 || BlackRightLoc[black_row][ 0] == 255)
                            {

                                if (BlackLeftCrossDone == 2 || BlackRightCrossDone == 2)
                                {
                                    buXianCount--;
                                }
                                else if (BlackRightHeadLine >= 25 && BlackLeftHeadLine >= 25) { buXianCount = 0; }
                                else if (BlackLeftHeadLine <= 20 && BlackRightHeadLine >= 50) { buXianCount = 0; }
                                else if ((CURVEL < 0 && CURVER > 0) || (CURVEL > 0 && CURVER < 0)) { buXianCount = 0; }
                                else if (BlackLeftHeadLine <= 5) { buXianCount = 0; }
                                else if (BlackLeftHeadLine <= 20 && BlackRightHeadLine >= 45) { buXianCount = 0; }
                                else if (((AbsInt(CURVEL) >= 20) && (AbsInt(CURVEL) <= 50)) || ((AbsInt(CURVER) >= 20) && (AbsInt(CURVER) <= 50)))
                                {
                                    buXianCount = 0;
                                }
                                else if (((AbsInt(CURVEL) > 50) && (AbsInt(CURVEL) <= 2000)) || ((AbsInt(CURVER) > 50) && (AbsInt(CURVER) <= 2000)))
                                {
                                    buXianCount = 0;
                                }
                                else if ((AbsInt(CURVEL) > 2000) || (AbsInt(CURVER) > 2000))
                                {
                                    buXianCount = 0;
                                }


                                tempflag1 = 0;
                                index = 0;
                                for (i = black_row - 1;i>=0 ; i--)
                                {
                                    if (CenterLineLoc[i] != 255)
                                    {
                                        b[index] = CenterLineLoc[i];
                                        a[index] = i;
                                        index++;
                                    }
                                    if (index == 4)
                                    {

                                        break;
                                    }

                                }

                                
                                
                                a1 = LeastSquarea1(a, b, 4);

                                a0 = LeastSquarea0(a, b, a1, 4);


                                
                                temp = (a0 + a1 * black_row) / 1000;
                                if (temp >= 250 - 1)
                                {
                                    
                                    

                                    temp = 250 - 1;
                                }
                                else if (temp <= 0)
                                {
                                    
                                    
                                    temp = 0;
                                }
                                CenterLineLoc[black_row] = (int)(temp);
                                
                            }
                            
                            
































































































 
                            
                            else
                            {
                            }

                        }
                    
      
      
      









 
    }
    
    else
    {
      tempflag1 = 0;
      tempway1 = 0;
      
      
      for(black_row = CenterEndLine; ; black_row--)
      {
        
        if(BlackLeftLoc[black_row][0] != 255 && BlackRightLoc[black_row][0] != 255)
        {
          tempflag1 = 0;
          
          CenterLineLoc[black_row] = (BlackLeftLoc[black_row][0] + BlackRightLoc[black_row][0]) / 2;
          
          if(BlackLeftLoc[black_row,0] > BlackRightLoc[black_row,0])
          {
            RoadHalfWidthSingle = (BlackLeftLoc[black_row,0] - BlackRightLoc[black_row,0]) / 2;
          }
          else
          {
            RoadHalfWidthSingle = (BlackRightLoc[black_row,0] - BlackLeftLoc[black_row,0]) / 2;
          }        
        }
        
        else if(BlackLeftLoc[black_row][0] != 255 && BlackRightLoc[black_row][0] == 255)
        {
          tempflag1 = 0;
          CenterLineLoc[black_row] = BlackLeftLoc[black_row][0] - RoadHalfWidthSingle;    
        }
        
        else if(BlackLeftLoc[black_row][0] == 255 && BlackRightLoc[black_row][0] != 255)
        {
          tempflag1 = 0;
          CenterLineLoc[black_row] = BlackRightLoc[black_row][0] + RoadHalfWidthSingle;   
        }
        
        else if(BlackLeftLoc[black_row][0] == 255 && BlackRightLoc[black_row][0] == 255)
        {
          
          if(tempflag1 == 0)
          {
            
            
            tempflag1 = 1;
            
            
            if(black_row + 4 + 2 <= 60 - 1)
            {
              tempway1 = 0;
              
              for(i = 0; i < 4; i++)
              {
                x[i] = black_row + i + 3;
                y[i] = CenterLineLoc[black_row + i + 3];
              }
              a1 = LeastSquareInt16a1(x, y, 4);         
              a0 = LeastSquareInt16a0(x, y, a1, 4);     
            }
            else if(black_row + 4 + 1 <= 60 - 1)
            {
              tempway1 = 0;
              
              for(i = 0; i < 4; i++)
              {
                x[i] = black_row + i + 2;
                y[i] = CenterLineLoc[black_row + i + 2];
              }
              a1 = LeastSquareInt16a1(x, y, 4);         
              a0 = LeastSquareInt16a0(x, y, a1, 4);     
            }
            else if(black_row + 4 <= 60 - 1)
            {
              tempway1 = 0;
              
              for(i = 0; i < 4; i++)
              {
                x[i] = black_row + i + 1;
                y[i] = CenterLineLoc[black_row + i + 1];
              }
              a1 = LeastSquareInt16a1(x, y, 4);         
              a0 = LeastSquareInt16a0(x, y, a1, 4);     
            }
            
            else
            {
              tempway1 = 1;
            }
          }
          else
          {
          }
          
          
          if(tempway1 == 0)
          {
            
            CenterLineLoc[black_row] = (a0 + a1 * black_row) / 1000;
          }
          else
          {
            
            CenterLineLoc[black_row] = CenterLineLoc[black_row+1] + CenterLineLoc[black_row+1] - CenterLineLoc[black_row+2];
          }
          
        }
        
        else
        {
        }
        
        if(black_row == 0) break;
      }
         
      
      
      if(CenterEndLine != 60 - 1)
      {
        for(black_row = 60 - 1; ; black_row--)
        {
          if(black_row == CenterEndLine) break;       
          CenterLineLoc[black_row] = 32767;
        }
      }
      else
      {
      }
    }
  }
  
  else
  {
    
    return 0;
  }
       

















 
            return 1;
}




uint8 BrickSpeDealStartJudge(void)
{
  uint8 col, count1, i, index;
  int32 a0, a1;
  uint8 x[8];   
  uint8 y[8];
  
  return 1;   
  
  
  
  
  if(BrickSpeDealDir == 0)
  {
    
    
    
    index = 0;
    for(i = 60 - 1; ; i--)
    {
      if(BlackLeftLoc[i][0] != 255)
      {
        y[index] = BlackLeftLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;
      }
      if(i == 25) 
      {
        return 0;
      }
    }
    
    
    a1 = LeastSquarea1(x, y, 8);
    a0 = LeastSquarea0(x, y, a1, 8);
   
    
    
    count1 = 0;
    
    BrickSpeDealStartJudgeCol = (a0 + a1 * 25) / 1000;
    
    for(col = BrickSpeDealStartJudgeCol + 60; ; col--)
    {
      if(ImgNew[25][col] < LimitLeftB)  
      {
        count1++;
      }
      else
      {
      }
      
      if(col <= BrickSpeDealStartJudgeCol || col == 0) break;
    }
    
    
    if(count1 > 20) 
    {
      return 1;
    }
    else
    {
    }
  }
  
  else
  {
    
    
    
    index = 0;
    for(i = 60 - 1; ; i--)
    {
      if(BlackRightLoc[i][0] != 255)
      {
        y[index] = BlackRightLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;
      }
      if(i == 25) 
      {
        return 0;
      }
    }
    
    
    a1 = LeastSquarea1(x, y, 8);
    a0 = LeastSquarea0(x, y, a1, 8);
   
    
    
    count1 = 0;
    
    BrickSpeDealStartJudgeCol = (a0 + a1 * 25) / 1000;
    
    for(col = BrickSpeDealStartJudgeCol - 60; ; col++)
    {
      if(ImgNew[25][col] < LimitRightB)  
      {
        count1++;
      }
      else
      {
      }
      
      if(col >= BrickSpeDealStartJudgeCol || col >= 250 - 1) break;
    }
    
    
    if(count1 > 20) 
    {
      return 1;
    }
    else
    {
    }
  }
  
  
  return 0;
}





uint8 BrickSpeDealExitJudge(void)
{
  return 1;   
  
  
  
  

  
  if(BrickSpeDealExitJudgeFlag == 1)
  {
    if(
       (BlackLeftLoc[60 - 1][0] != 255)
    && (BlackRightLoc[60 - 1][0] != 255)
    && (BlackRightLoc[60 - 1][0] > BlackLeftLoc[60 - 1][0]) 
    && (BlackRightLoc[60 - 1][0] - BlackLeftLoc[60 - 1][0] < 65 * 2) 
      )
    {
      
      BrickSpeDealExitJudgeFlag = 2;
    }
    else
    {
    }
  }
  
  else if(BrickSpeDealExitJudgeFlag == 2)
  {
    if(
       (BlackLeftLoc[60 - 1][0] != 255)
    && (BlackRightLoc[60 - 1][0] != 255)
    && (BlackRightLoc[60 - 1][0] > BlackLeftLoc[60 - 1][0]) 
    && (BlackRightLoc[60 - 1][0] - BlackLeftLoc[60 - 1][0] > 75 * 2) 
      )
    {
      
      BrickSpeDealExitJudgeFlag = 0;
    }
    else
    {
    }
  }
  
  else
  {
  }

  return 1;
}




uint8 BrickSpeDealServor(void)
{  
  
  
  if(BrickSpeDealFlag == 1 && BrickSpeDealCenFlag == 0 && BrickSpeDealDir == 0)
  {
    
    ServoPIDInputVal = 1730 - 100;
    
    
  }
  
  else if(BrickSpeDealFlag == 1 && BrickSpeDealCenFlag == 0 && BrickSpeDealDir == 1)
  {
    
    ServoPIDInputVal = 1730 + 100;  
    
    
    
  }
  
  else
  {    
  }

  return 1;
}








uint8 BrickSpeDealCen(void)
{
  uint8 row;
  
  
  if(BrickSpeDealDir == 0)
  {
    
    if(ImgBlackSucceedFlag == 0 || BlackRightDone == 0)
    {
      return 0;
    }
    else
    {
    }
    
    
    
    CenterHeadLine = 0;
    CenterEndLine = BlackRightEndLine;
    
    
    if(0 == 0)
    {
      
      for(row = BlackRightEndLine; ; row--)
      {
        CenterLineLoc[row] = BlackRightLoc[row][0] - BrickSpeDealBias[BrickSpeDealBackCount] + (BrickConfirmFinalColCom - 50); 
        
        if(row == BlackRightHeadLine) break;
      }
    }
    
    else
    {
      
      for(row = BlackRightEndLine; ; row--)
      {
        CenterLineLoc[row] = BlackUdisRightLocation[row].x - BrickSpeDealBias[BrickSpeDealBackCount] + (BrickConfirmFinalColCom - 50); 
        
        if(row == BlackRightHeadLine) break;
      }      
    }
    
    
    if(BlackRightHeadLine != 0)
    {
      for(row = BlackRightHeadLine - 1; ; row--)
      {
        CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];
        
        if(row == 0) break;
      }
    }
    else
    {     
    }
    
  }
  
  else
  {
    
    if(ImgBlackSucceedFlag == 0 || BlackLeftDone == 0)
    {
      return 0;
    }
    else
    {
    }
    
    
    
    CenterHeadLine = 0;
    CenterEndLine = BlackLeftEndLine;
    
    
    if(0 == 0)
    {
      
      for(row = BlackLeftEndLine; ; row--)
      {
        CenterLineLoc[row] = BlackLeftLoc[row][0] + BrickSpeDealBias[BrickSpeDealBackCount] - (BrickConfirmFinalColCom - 50); 
        
        if(row == BlackLeftHeadLine) break;
      }
    }
    
    else
    {
      
      for(row = BlackLeftEndLine; ; row--)
      {
        CenterLineLoc[row] = BlackUdisLeftLocation[row].x + BrickSpeDealBias[BrickSpeDealBackCount] - (BrickConfirmFinalColCom - 50); 
        
        if(row == BlackLeftHeadLine) break;
      }      
    }
    
    
    if(BlackLeftHeadLine != 0)
    {
      for(row = BlackLeftHeadLine - 1; ; row--)
      {
        CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];
        
        if(row == 0) break;
      }
    }
    else
    {     
    }
    
  }
  
  return 1;
}




uint8 BrickAvoid(void)
{
  uint8 i;
  
  
  if(BrickConfirmLockFlag == 0)
  {
    
    for(i = 0; ; i++)
    {
      BrickConfirmMat0[i] = BrickConfirmMat0[i + 1];
      BrickConfirmMat1[i] = BrickConfirmMat1[i + 1];
      if(i == 6 - 2) break;
    }
    
    if(PathType == 8)
    {
      
      BrickConfirmMat0[6 - 1] = 1;
      
      BrickConfirmMat1[6 - 1] = 0;
    }
    else if(PathType == 9)
    {
      
      BrickConfirmMat1[6 - 1] = 1;
      
      BrickConfirmMat0[6 - 1] = 0;   
    }
    else
    {
      
      BrickConfirmMat0[6 - 1] = 0;
      BrickConfirmMat1[6 - 1] = 0;
    }
    
    
    BrickConfirmMatCollect0 = 0;
    for(i = 0; ; i++)
    {
      if(BrickConfirmMat0[i] == 1) BrickConfirmMatCollect0++;
      
      if(i == 6 - 1) break;
    }
    
    
    BrickConfirmMatCollect1 = 0;
    for(i = 0; ; i++)
    {
      if(BrickConfirmMat1[i] == 1) BrickConfirmMatCollect1++;
      
      if(i == 6 - 1) break;
    }
    
    
    if(BrickConfirmMatCollect0 >= BrickConfirmMatLimit)
    {
      
      BrickConfirmLockFlag = 1;
      
      for(i = 0; ; i++)
      {
        BrickConfirmMat0[i] = 0;
        BrickConfirmMat1[i] = 0;
        if(i == 6 - 1) break;
      }
      
      BrickSpeDealDir = 0;             
    }
    else if(BrickConfirmMatCollect1 >= BrickConfirmMatLimit)
    {
      
      BrickConfirmLockFlag = 1;
      
      for(i = 0; ; i++)
      {
        BrickConfirmMat0[i] = 0;
        BrickConfirmMat1[i] = 0;
        if(i == 6 - 1) break;
      }
      
      BrickSpeDealDir = 1;             
    }
    else
    {
    }
  }
  
  else
  {
  }
  
  
  if(BrickConfirmLockFlag == 1)
  {
    light_control(((GPIO_MemMapPtr)0x400FF0C0u), 15, 0);
    
    if(BrickSpeDealStartJudge() == 1)
    {
      BrickSpeDealBackCount = 20;
    }
    else
    {
      
    }
  }
  else
  {
  }

  
  BrickSpeDealExitJudge();
  
  
  if(BrickSpeDealBackCount != 0 && BrickSpeDealExitJudgeFlag != 0)
  {
    BrickConfirmLockFlag = 0;    
    
    
    BrickSpeDealBackCount--;
    
    BrickSpeDealFlag = 1;
    
    
    BrickSpeDealCenFlag = BrickSpeDealCen();
    
    if(BrickSpeDealCenFlag == 0)
    {
      BrickSpeDealBackCount = 0;
    }
    else
    {
    }
    
    
    GyroResultForbidFlag = 0;
    GyroResultForbidBackCount = 0;
    
  }
  else
  {    
    
    BrickSpeDealBackCount = 0;
    
    
    BrickSpeDealFlag = 0;
    
    
    BrickSpeDealExitJudgeFlag = 1;
  }
  
  return 1;
}



uint8 CenterLineGetRaw(void)
{
  uint8 flag;
  
  flag = 1;
  
  
  if(AngleConfirmLockFlag == 1 || AngleSpeDealFlag == 1)
  {   
    
  }
  
  
  
  else if(BrickSpeDealFlag == 1)
  {
    
  }
  
  else
  {
    flag = CenterLineGetNormal();
  }
  
  return flag;
}





uint8 CenterLineGet(void)
{
  uint8 row, i;
  uint8 temp;
  uint8 flag1, flag2, flag3, flag4;  
  uint8 tempflag1;
  uint8 tempway1;
  uint8 x[4];   
  int16 y[4];   
  int32 a1, a0;    
  
  float slope;
  
  
  
  if(BlackLeftDone == 1 && BlackRightDone == 0)
  {
    
    if(BlackLeftHeadLine == 255 || BlackLeftEndLine == 255)
    {
      return 0;
    }
    else
    {
    }
    
    flag1 = 1;
    flag2 = 1;
    
    
    CenterHeadLine = BlackLeftHeadLine;     
    
    CenterEndLine = BlackLeftEndLine;
    
    
    if(BlackLeftHeadLine >= 26)
    {
      flag1 = 0;
    }
    else
    {
    }
    
    
    if(BlackLeftEndLine < 60 - 1)
    {
      
      
      if(BlackLeftEndLine <= 26)
      {
        flag2 = 0;
        return 0;       
      }
      
      else
      {
      }
    }
    
    else
    {
    }
    
    
    
    if(BlackLeftEndLine - BlackLeftHeadLine > 5)
    {
      slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                    (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
    }
    else
    {
      slope = 0;
    }
    
    temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
    
    RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
    
    
    CenterLineLoc[BlackLeftEndLine] = BlackUdisLeftLocation[BlackLeftEndLine].x + RoadHalfWidth;
    
    tempflag1 = 0;
    tempway1 = 0;
    
    for(row = BlackLeftEndLine - 1; ;row--)
    {
      
      if(BlackLeftLoc[row][0] != 255)
      {
        tempflag1 = 0;
        CenterLineLoc[row] = CenterLineLoc[row+1] + BlackUdisLeftLocation[row].x - BlackUdisLeftLocation[row+1].x;
      }
      
      else
      {
        
        if(tempflag1 == 0)
        {
          
          tempflag1 = 1;
          
          if(row + 4 <= 60 - 1)
          {
            tempway1 = 0;
            
            for(i = 0; i < 4; i++)
            {
              x[i] = row + i + 1;
              y[i] = CenterLineLoc[row + i + 1];
            }
            a1 = LeastSquareInt16a1(x, y, 4);         
            a0 = LeastSquareInt16a0(x, y, a1, 4);     
          }
          
          else
          {
            tempway1 = 1;
          }
        }
        else
        {
        }
        
        
        if(tempway1 == 0)
        {
          
          CenterLineLoc[row] = (a0 + a1 * row) / 1000;
        }
        else
        {
          
          if(row == 60 -1  || row == 60 - 2)
          {
            CenterLineLoc[row] = BlackUdisLeftLocation[row].x + RoadHalfWidth;
          }
          
          else
          {
            
            CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];            
          }
        }
      }
      
      
      if(row == 0) break;
    }
    
    
    
    if(CenterEndLine != 60 - 1)
    {
      for(row = 60 - 1; ; row--)
      {
        if(row == CenterEndLine) break;       
        CenterLineLoc[row] = 32767;
      }
    }
    else
    {
    }

    
  }
  
  else if(BlackLeftDone == 0 && BlackRightDone == 1)
  {
    
    if(BlackRightHeadLine == 255 || BlackRightEndLine == 255)
    {
      return 0;
    }
    else
    {
    }
       
    flag1 = 1;
    flag2 = 1;
    
    
    CenterHeadLine = BlackRightHeadLine;   
    
    CenterEndLine = BlackRightEndLine;
    
    
    if(BlackRightHeadLine >= 26)
    {
      flag1 = 0;     
    }
    else
    {
    }
    
    
    if(BlackRightEndLine < 60 - 1)
    {
      
      
      if(BlackRightEndLine <= 26)  
      {
        flag2 = 0;
        return 0;
      }
      
      else
      {
      }
    }
    
    else
    {
    }
    
    
    
    if(BlackRightEndLine - BlackRightHeadLine > 5)
    {
      slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                    (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
    }
    else
    {
      slope = 0;
    }
    
    temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
    
    RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
    
    tempflag1 = 0;
    tempway1 = 0;
    
    CenterLineLoc[BlackRightEndLine] = BlackUdisRightLocation[BlackRightEndLine].x - RoadHalfWidth;
    
    for(row = BlackRightEndLine - 1; ;row--)
    {
      
      if(BlackRightLoc[row][0] != 255)
      {
        tempflag1 = 0;
        CenterLineLoc[row] = CenterLineLoc[row+1] + BlackUdisRightLocation[row].x - BlackUdisRightLocation[row+1].x;
      }
      
      else
      {
          
          if(tempflag1 == 0)
          {
            
            tempflag1 = 1;
            
            if(row + 4 <= 60 - 1)
            {
              tempway1 = 0;
              
              for(i = 0; i < 4; i++)
              {
                x[i] = row + i + 1;
                y[i] = CenterLineLoc[row + i + 1];
              }
              a1 = LeastSquareInt16a1(x, y, 4);         
              a0 = LeastSquareInt16a0(x, y, a1, 4);     
            }
            
            else
            {
              tempway1 = 1;
            }
          }
          else
          {
          }
        
          
          if(tempway1 == 0)
          {
            
            CenterLineLoc[row] = (a0 + a1 * row) / 1000;
          }
          else
          {
            
            if(row == 60 - 1 || row == 60 - 2)
            {
              CenterLineLoc[row] = BlackUdisRightLocation[row].x - RoadHalfWidth;
            }
            
            else
            {
              
              CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];
            }
          }
        }
      
        if(row == 0) break;
      }
    
      
    
    
    
    if(CenterEndLine != 60 - 1)
    {
      for(row = 60 - 1; ; row--)
      {
        if(row == CenterEndLine) break;       
        CenterLineLoc[row] = 32767;
      }
    }
    else
    {
    }
   
  }
  
  else if(BlackLeftDone == 1 && BlackRightDone == 1)
  {
    CenterHeadLine = MinRe(BlackLeftHeadLine, BlackRightHeadLine);    
    
    
    CenterEndLine = MaxRe(BlackLeftEndLine, BlackRightEndLine);             
    
    
    if(SingleBlackAllFlag == 0)
    {
    
      
      
      
      
      flag1 = 1;
      flag2 = 1;
      flag3 = 1;
      flag4 = 1;
      
      
      if(BlackLeftHeadLine >= 26)
      {
        flag1 = 0;
      }
      else
      {
      }
      
      if(BlackLeftEndLine < 60 - 1)
      {
        
        
        if(BlackLeftEndLine <= 26)
        {
          flag2 = 0;
        }
        
        else
        {
        }
      }
      
      else
      {
      }
  
      
      
      if(BlackRightHeadLine >= 26)
      {
        flag3 = 0;
      }
      else
      {
      }    
      
      if(BlackRightEndLine < 60 - 1)
      {
        
        
        if(BlackRightEndLine <= 26)
        {
          flag4 = 0;
          
          if(flag2 == 0) 
          {
            return 0;
          }
          else
          {
          }
        }
        
        else
        {
        }
      }
      
      else
      {
      }
      
      
      if(
        (flag3 == 1 && flag4 == 1)
      &&((flag1 == 0 && flag2 == 0) || (flag1 == 1 && flag2 == 0) || (flag1 == 0 && flag2 == 1))
        )
      {
        
        
        if(BlackRightEndLine - BlackRightHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                        (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
        RoadHalfWidthCompen = RoadHalfWidth / temp;
        RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
      }
      
      else if(
             (flag1 == 1 && flag2 == 1)
           &&((flag3 == 0 && flag4 == 0) || (flag3 == 1 && flag4 == 0) || (flag3 == 0 && flag4 == 1))
             )
      {
        
        
        if(BlackLeftEndLine - BlackLeftHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                        (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
        RoadHalfWidthCompen = RoadHalfWidth / temp;
        RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
      }
      
      else if(flag1 == 1 && flag2 == 1 && flag3 == 1 && flag4 == 1)
      {
        
        
        if(BlackLeftEndLine - BlackLeftHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                        (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
        
        
        if(BlackRightEndLine - BlackRightHeadLine > 5)
        {
          slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                        (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
        }
        else
        {
          slope = 0;
        }
        
        temp = MaxRe((uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2), temp);
        RoadHalfWidthCompen = RoadHalfWidth / temp;
        RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
      }
      
      else
      {
        
        if(flag2 == 0 && flag4 == 0)
        {
          return 0;
        }
        else
        {
          
          if(flag1 == 1 && flag3 == 0)
          {
            
            
            if(BlackLeftEndLine - BlackLeftHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                            (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
            RoadHalfWidthCompen = RoadHalfWidth / temp;
            RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
          }
          
          else if(flag1 == 0 && flag3 == 1)
          {
            
            
            if(BlackRightEndLine - BlackRightHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                            (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
            RoadHalfWidthCompen = RoadHalfWidth / temp;
            RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
          }
          
          else if(flag1 == 0 && flag3 == 0)
          {
            
            
            if(BlackLeftEndLine - BlackLeftHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisLeftLocation[BlackLeftEndLine].x - BlackUdisLeftLocation[BlackLeftEndLine-4].x) / 
                            (BlackUdisLeftLocation[BlackLeftEndLine].y - BlackUdisLeftLocation[BlackLeftEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = (uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2);
            
            
            if(BlackRightEndLine - BlackRightHeadLine > 5)
            {
              slope = 1.0 * (BlackUdisRightLocation[BlackRightEndLine].x - BlackUdisRightLocation[BlackRightEndLine-4].x) / 
                            (BlackUdisRightLocation[BlackRightEndLine].y - BlackUdisRightLocation[BlackRightEndLine-4].y);
            }
            else
            {
              slope = 0;
            }
            
            temp = MaxRe((uint8)(1.0 * sqrt(slope * slope + 1) * 200 / 2), temp);
            RoadHalfWidthCompen = RoadHalfWidth / temp;
            RoadHalfWidth = MaxRe(temp, RoadHalfWidth);
          }
          
          else
          {
            return 0;
          }
        }
      }
      
      uint8 temproad;  
      temproad = RoadHalfWidth;
      
      tempflag1 = 0;
      tempway1 = 0;      
      
      for(row = CenterEndLine; ; row--)
      {
        
        if(BlackLeftLoc[row][0] != 255 && BlackRightLoc[row][0] != 255)
        {
          tempflag1 = 0;
          
          CenterLineLoc[row] = (BlackUdisLeftLocation[row].x + BlackUdisRightLocation[row].x) / 2;
          
          if(BlackUdisLeftLocation[row].x > BlackUdisRightLocation[row].x)
          {
            RoadHalfWidthRecord[row] = (BlackUdisLeftLocation[row].x - BlackUdisRightLocation[row].x) / 2;           
          }
          else
          {
            RoadHalfWidthRecord[row] = (BlackUdisRightLocation[row].x - BlackUdisLeftLocation[row].x) / 2;
          }
          
          
          temproad = RoadHalfWidthRecord[row];
          
          
          if(row == 60 - 1) 
          {  
            if(RoadHalfWidthRecord[row] > 100)
            {
              RoadHalfWidth = 100;
            }
            else if(RoadHalfWidthRecord[row] < 70)
            {
              RoadHalfWidth = 70;
            }
            else
            {
              RoadHalfWidth = RoadHalfWidthRecord[row];
            }            
          }
          else
          {
          }
        }
        
        else if(BlackLeftLoc[row][0] != 255 && BlackRightLoc[row][0] == 255)
        {
          tempflag1 = 0;
          CenterLineLoc[row] = BlackUdisLeftLocation[row].x + temproad;
        }
        
        else if(BlackLeftLoc[row][0] == 255 && BlackRightLoc[row][0] != 255)
        {
          tempflag1 = 0;
          CenterLineLoc[row] = BlackUdisRightLocation[row].x - temproad;
        }
        
        else if(BlackLeftLoc[row][0] == 255 && BlackRightLoc[row][0] == 255)
        {
          
          if(tempflag1 == 0)
          {
            
            
            tempflag1 = 1;
            
            if(row + 4 <= 60 - 1)
            {
              tempway1 = 0;
              
              for(i = 0; i < 4; i++)
              {
                x[i] = row + i + 1;
                y[i] = CenterLineLoc[row + i + 1];
              }
              a1 = LeastSquareInt16a1(x, y, 4);         
              a0 = LeastSquareInt16a0(x, y, a1, 4);     
            }
            
            else
            {
              tempway1 = 1;
            }
          }
          else
          {
          }
          
          
          if(tempway1 == 0)
          {
            
            CenterLineLoc[row] = (a0 + a1 * row) / 1000;
          }
          else
          {
            
            CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];
          }
          
        }
        
        else
        {
        }
        
        if(row == 0) break;
      }
         
      
      
      if(CenterEndLine != 60 - 1)
      {
        for(row = 60 - 1; ; row--)
        {
          if(row == CenterEndLine) break;       
          CenterLineLoc[row] = 32767;
        }
      }
      else
      {
      }
      
      
      



































































































































































 
      
    }
    
    else
    {
      tempflag1 = 0;
      tempway1 = 0;
      
      
      for(row = CenterEndLine; ; row--)
      {
        
        if(BlackLeftLoc[row][0] != 255 && BlackRightLoc[row][0] != 255)
        {
          tempflag1 = 0;
          
          CenterLineLoc[row] = (BlackUdisLeftLocation[row].x + BlackUdisRightLocation[row].x) / 2;
          
          if(BlackUdisLeftLocation[row].x > BlackUdisRightLocation[row].x)
          {
            RoadHalfWidthSingle = (BlackUdisLeftLocation[row].x - BlackUdisRightLocation[row].x) / 2;
          }
          else
          {
            RoadHalfWidthSingle = (BlackUdisRightLocation[row].x - BlackUdisLeftLocation[row].x) / 2;
          }        
        }
        
        else if(BlackLeftLoc[row][0] != 255 && BlackRightLoc[row][0] == 255)
        {
          tempflag1 = 0;
          CenterLineLoc[row] = BlackUdisLeftLocation[row].x - RoadHalfWidthSingle;    
        }
        
        else if(BlackLeftLoc[row][0] == 255 && BlackRightLoc[row][0] != 255)
        {
          tempflag1 = 0;
          CenterLineLoc[row] = BlackUdisRightLocation[row].x + RoadHalfWidthSingle;   
        }
        
        else if(BlackLeftLoc[row][0] == 255 && BlackRightLoc[row][0] == 255)
        {
          
          if(tempflag1 == 0)
          {
            
            
            tempflag1 = 1;
            
            if(row + 4 <= 60 - 1)
            {
              tempway1 = 0;
              
              for(i = 0; i < 4; i++)
              {
                x[i] = row + i + 1;
                y[i] = CenterLineLoc[row + i + 1];
              }
              a1 = LeastSquareInt16a1(x, y, 4);         
              a0 = LeastSquareInt16a0(x, y, a1, 4);     
            }
            
            else
            {
              tempway1 = 1;
            }
          }
          else
          {
          }
          
          
          if(tempway1 == 0)
          {
            
            CenterLineLoc[row] = (a0 + a1 * row) / 1000;
          }
          else
          {
            
            CenterLineLoc[row] = CenterLineLoc[row+1] + CenterLineLoc[row+1] - CenterLineLoc[row+2];
          }
          
        }
        
        else
        {
        }
        
        if(row == 0) break;
      }
         
      
      
      if(CenterEndLine != 60 - 1)
      {
        for(row = 60 - 1; ; row--)
        {
          if(row == CenterEndLine) break;       
          CenterLineLoc[row] = 32767;
        }
      }
      else
      {
      }
    }
  }
  
  else
  {
    
    return 0;
  }
  
  return 1;
}








uint8 CenterLineHalfWidthGet(uint8 val)
{
  uint8 temphalfwidth;
  
  if(val <= 25)
  {
    temphalfwidth = 100;
  }
  else
  {
    if(val <= 30)
    {
      
      temphalfwidth = 110;
    }
    else
    {
      if(val <= 35)
      {
        
        temphalfwidth = 120;
      }
      else
      {
          
          temphalfwidth = 130;
      }
    }
  }
  
  return temphalfwidth;
}





void ImgReversePut(void)
{

    uint16 i, j, k, temp1, temp2;   
    
    temp1 = CameraRealLeftCol;
    temp2 = CameraRealLeftCol + 250;
    
    
    
    if (ImgPresent == 1)    
    {
      for(i = 0; i < 60; i++)
      {
        k = 0;
        for(j = temp1; j < temp2; j++)
        {
          ImgNew[60-1-i][250-1-k] = ImgStore2[i][j];
          k++;
        }
      }
    }
    else if (ImgPresent == 2)  
    {
      for(i = 0; i < 60; i++)
      {
        k = 0;
        for(j = temp1; j < temp2; j++)
        {
          ImgNew[60-1-i][250-1-k] = ImgStore1[i][j];
          k++;
        }
      }
    }
    else 
    {
        
    }
  
}





void ImgPut(void)
{
    uint16 i, j, k, temp1, temp2;   
    
    temp1 = CameraRealLeftCol;
    temp2 = CameraRealLeftCol + 250;
    
    
    
    if (ImgPresent == 1)    
    {
      for(i = 0; i < 60; i++)
      {
        k = 0;
        for(j = temp1; j < temp2; j++)
        {
          ImgNew[i][k] = ImgStore2[i][j];
          k++;
        }
      }
    }
    else if (ImgPresent == 2)  
    {
      for(i = 0; i < 60; i++)
      {
        k = 0;
        for(j = temp1; j < temp2; j++)
        {
          ImgNew[i][k] = ImgStore1[i][j];
          k++;
        }
      }
    }
    else 
    {
        
    }

}






void ErrorGet(void)
{
  uint8 row;
  uint8 avg = 0;
  float temp;
  uint8 index;
  
  temp = 0;
  index = 0;
  for(row = 60 - 1; ; row--)
  {
    if(CenterLineLoc[row] != 255)
    {
      temp += CenterLineLoc[row];
      index++;
    }
    if(row == 0) break;
  }
  avg = (uint8)(temp / index);
  



















 
  

  temp = 0;
  index = 0;
  for(row = 60 - 1; ; row--)
  {
    if(CenterLineLoc[row] != 255)
    {
      temp += AbsRe(CenterLineLoc[row], avg);
      index++;
    }
    if(row == 0) break;
  }
  ErrorGetSelf = (uint8)(temp / index);
  ErrorGetCen = AbsRe(avg, 125);
  
}





uint16 MathSqrt(uint16 x1)
{
  uint8 ans = 0, p = 0x80;
  uint16 x = x1;
  
  while(p!=0)
  {
    ans += p;
    if(ans * ans > x) ans -=p;
    p = (uint8)(p / 2);
  }
  return ans;  
}



int16 CurveGet(int16 AX, uint8 AY, int16 BX, uint8 BY, int16 CX, uint8 CY)
{
  int16 SABC_temp; 
  int16 tempab, tempbc, tempac;
  int16 AB, BC, AC; 
  int16 result;
  
  
  SABC_temp = ((BX - AX) * (CY - AY) - (CX - AX) * (BY - AY));
  
  tempab = (BX - AX) * (BX - AX) + (BY - AY) * (BY - AY);
  if(tempab > 100) 
  {
    AB = MathSqrt(tempab / 100) * 10; 
  }
  else
  {
    AB = MathSqrt(tempab);
  }
  
  tempbc = (BX - CX) * (BX - CX) + (BY - CY) * (BY - CY);
  if(tempbc > 100) 
  {
    BC = MathSqrt(tempbc / 100) * 10; 
  }
  else
  {
    BC = MathSqrt(tempbc);
  }
  
  tempac = (CX - AX) * (CX - AX) + (CY - AY) * (CY - AY);
  if(tempac > 100) 
  {
    AC = MathSqrt(tempac / 100) * 10; 
  }
  else
  {
    AC = MathSqrt(tempac);
  }
  
  result = 2000 * SABC_temp / AB / BC / AC;
  if(result >= 255) 
  {
    result = 255 - 1;           
  }
  else if(result + 255 < 0)
  {
    result = 1 - 255;           
  }
  else
  {
  }
  
  return result;
}





int16 SABCGet(uint8 x1, uint8 y1, uint8 x2, uint8 y2, uint8 x3, uint8 y3)
{
  int16 SABC_temp;
  
  SABC_temp = ((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2;
  
  return SABC_temp;
}





uint8 CurveSlopeGetCenter(void)
{
  uint8 row;
  uint8 temp;
  uint8 tempslopex[3];
  int16 tempslopey[3];
  
  
  
  CurveLineChosenC1 = 255;
  CurveLineChosenC2 = 255;
  CurveLineChosenC3 = 255;
  
  if(CenterHeadLine == 255 || CenterEndLine == 255)
  {
    CURVEC = 255;  
    SlopeC = 32767;  
    return 0;
  }
  
  
  if(CenterHeadLine >= 60 - 2)
  {
    CurveLineChosenC1 = 255;  
    CURVEC = 255;  
    SlopeC = 32767;  
    return 0;    
  }
  else
  {
    CurveLineChosenC1 = CenterHeadLine;    
  }
  
  
  
  temp = (CenterEndLine - 1 - CenterHeadLine) / 2;
  
  if(temp <= 2) 
  {
    CurveLineChosenC1 = 255;
    CURVEC = 255;  
    SlopeC = 32767;  
    return 0;
  }
  
  
  for(row = CurveLineChosenC1 + temp - 1; ; row++)
  {
    if(row > CenterEndLine - 1) 
    {
      CurveLineChosenC1 = 255;
      CurveLineChosenC2 = 255;
      CURVEC = 255;  
      SlopeC = 32767;  
      return 0;
    }
    
    CurveLineChosenC2 = row;
    break;
    
  }
  
  
  for(row = CurveLineChosenC2 + temp - 1; ; row++)
  {
    if(row > CenterEndLine) 
    {
      CurveLineChosenC1 = 255;
      CurveLineChosenC2 = 255;
      CurveLineChosenC3 = 255;
      CURVEC = 255;  
      SlopeC = 32767;  
      return 0;
    }
    
    CurveLineChosenC3 = row;
    break;
  }
  
  
  
  
  
  
  CURVEC = CurveGet(CenterLineLoc[CurveLineChosenC1], 60 - 1 - CurveLineChosenC1,
                   CenterLineLoc[CurveLineChosenC2], 60 - 1 - CurveLineChosenC2,
                   CenterLineLoc[CurveLineChosenC3], 60 - 1 - CurveLineChosenC3
                   );
  
  tempslopex[0] = CurveLineChosenC1;
  tempslopex[1] = CurveLineChosenC2;
  tempslopex[2] = CurveLineChosenC3;
  tempslopey[0] = CenterLineLoc[CurveLineChosenC1];
  tempslopey[1] = CenterLineLoc[CurveLineChosenC2];
  tempslopey[2] = CenterLineLoc[CurveLineChosenC3];
  SlopeC = LeastSquareInt16a1(tempslopex, tempslopey, 3);  
  
  return 1;
  
}


uint8 CurveSlopeGetLeft(void)
{
  uint8 row;
  uint8 temp;
  uint8 tempslopex[3];
  int16 tempslopey[3];
  
  
  if(BlackLeftDone == 1)
  {
    
    
    CurveLineChosenL1 = 255;
    CurveLineChosenL2 = 255;
    CurveLineChosenL3 = 255;
    
    
    if(BlackLeftHeadLine == 255 || BlackLeftEndLine == 255)
    {
      CURVEL = 32767;       
      SlopeL = 32767;       
      return 0;      
    }
    
    if(BlackLeftHeadLine >= 60 - 2)
    {
      CURVEL = 32767;       
      SlopeL = 32767;       
      return 0;      
    }
    else
    {
      CurveLineChosenL1 = BlackLeftHeadLine;
    }

    
    temp = (BlackLeftEndLine - 1 - BlackLeftHeadLine) / 2;
    
    if(temp <= 2) 
    {
      CurveLineChosenL1 = 255;
      CURVEL = 32767;       
      SlopeL = 32767;       
      return 0;
    }
    
    
    for(row = CurveLineChosenL1 + temp - 1; ; row++)
    {
      if (row > BlackLeftEndLine - 1) 
      {
        CurveLineChosenL1 = 255;
        CurveLineChosenL2 = 255;
        CURVEL = 32767;       
        SlopeL = 32767;       
        return 0;
      }
      
      CurveLineChosenL2 = row;
      break;
    }
    
    
    for(row = CurveLineChosenL2 + temp - 1; ; row++)
    {
      if (row > BlackLeftEndLine) 
      {
        CurveLineChosenL1 = 255;
        CurveLineChosenL2 = 255;
        CurveLineChosenL3 = 255;
        CURVEL = 32767;       
        SlopeL = 32767;       
        return 0;
      }
      
      CurveLineChosenL3 = row;
      break;
    }
    
    
    
    
    
    




    
    CURVEL = CurveGet(BlackLeftLoc[CurveLineChosenL1][0], 60 - 1 - CurveLineChosenL1,
                      BlackLeftLoc[CurveLineChosenL2][0], 60 - 1 - CurveLineChosenL2,
                      BlackLeftLoc[CurveLineChosenL3][0], 60 - 1 - CurveLineChosenL3
                      );
    
    tempslopex[0] = CurveLineChosenL1;
    tempslopex[1] = CurveLineChosenL2;
    tempslopex[2] = CurveLineChosenL3;
    tempslopey[0] = BlackUdisLeftLocation[CurveLineChosenL1].x;
    tempslopey[1] = BlackUdisLeftLocation[CurveLineChosenL2].x;
    tempslopey[2] = BlackUdisLeftLocation[CurveLineChosenL3].x;
    SlopeL = LeastSquareInt16a1(tempslopex, tempslopey, 3);   
    
    return 1;
  }
  
  else
  {
    CURVEL = 32767;       
    SlopeL = 32767;       
    return 0;
  }
}




uint8 CurveSlopeGetRight(void)
{
  uint8 row;
  uint8 temp;
  uint8 tempslopex[3];
  int16 tempslopey[3];

  
  if(BlackRightDone == 1)
  {
    
    
    CurveLineChosenR1 = 255;
    CurveLineChosenR2 = 255;
    CurveLineChosenR3 = 255;
    
    
    if(BlackRightHeadLine == 255 || BlackRightEndLine == 255)
    {
      CURVER = 32767;      
      SlopeR = 32767;      
      return 0;      
    }
    if(BlackRightHeadLine  >= 60 - 2)
    {
      CURVER = 32767;      
      SlopeR = 32767;      
      return 0;      
    }
    else
    {
      CurveLineChosenR1 = BlackRightHeadLine;
    }

    
    temp = (BlackRightEndLine - 1 - BlackRightHeadLine) / 2;
    
    if(temp <= 2)
    {
      CurveLineChosenR1 = 255;
      CURVER = 32767;      
      SlopeR = 32767;      
      return 0;
    }
    
    
    for(row = CurveLineChosenR1 + temp - 1; ; row++)
    {
      if (row > BlackRightEndLine - 1) 
      {
        CurveLineChosenR1 = 255;
        CurveLineChosenR2 = 255;
        CURVER = 32767;      
        SlopeR = 32767;      
        return 0;
      }
      
      CurveLineChosenR2 = row;
      break;
    }
    
    
    for(row = CurveLineChosenR2 + temp - 1; ; row++)
    {
      if (row > BlackRightEndLine) 
      {
        CurveLineChosenR1 = 255;
        CurveLineChosenR2 = 255;
        CurveLineChosenR3 = 255;
        CURVER = 32767;      
        SlopeR = 32767;      
        return 0;
      }
      
      CurveLineChosenR3 = row;
      break;
    }   
    
    
    
    
    
    




    
    CURVER = CurveGet(BlackRightLoc[CurveLineChosenR1][0], 60 - 1 - CurveLineChosenR1,
                      BlackRightLoc[CurveLineChosenR2][0], 60 - 1 - CurveLineChosenR2,
                      BlackRightLoc[CurveLineChosenR3][0], 60 - 1 - CurveLineChosenR3
                      );
    
    
    tempslopex[0] = CurveLineChosenR1;
    tempslopex[1] = CurveLineChosenR2;
    tempslopex[2] = CurveLineChosenR3;
    tempslopey[0] = BlackUdisRightLocation[CurveLineChosenR1].x;
    tempslopey[1] = BlackUdisRightLocation[CurveLineChosenR2].x;
    tempslopey[2] = BlackUdisRightLocation[CurveLineChosenR3].x;
    SlopeR = LeastSquareInt16a1(tempslopex, tempslopey, 3);         
    
    return 1;
  }
  
  else
  {
    CURVER = 32767;      
    SlopeR = 32767;      
    return 0;
  }
  
}








uint8 CurveSlopeGet(void)
{
  
  
  CurveSlopeFlagC = 1;  
  
  
  if(CurveSlopeGetCenter() == 0)
  {
    CurveSlopeFlagC = 0;
    
  }  
  
  
  if(CurveSlopeFlagL == 0 && CurveSlopeFlagC == 0 && CurveSlopeFlagR == 0)
  {
    return 0;
  }
  else
  {
    return 1;
  }
  
}






uint8 AngleStep1JudgeNotBrick(uint8 dir)
{
  uint8 row;
  uint8 col;
  uint8 count3;
    
  int32 a0, a1;
  uint8 i, index, tempend;
  
  uint8 x[8];   
  uint8 y[8];
  
  uint8 tempheadrow;
  
  
  if(dir == 0)
  {
    
    index = 0;    
    for(i = 35 + 1; ; i++)
    {
      if(BlackLeftLoc[i][0] != 255)
      {
        y[index] = BlackLeftLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      if(i == 60 - 1)
      {
        return 0;
      }
    }
    
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 < 0 && a1 + 2100 > 0)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    AngleStep1NotBrickEndColL = (a0 + a1 * 35) / 1000 + 5;
    
    
    if(BlackRightLoc[35][0] != 255)
    {
      AngleStep1NotBrickBorderColL = MinRe(AngleStep1NotBrickEndColL + 60, BlackRightLoc[35][0]); 
    }
    else
    {
    }

    
    
    
    tempheadrow = MinRe(35, BlackLeftHeadLine);
    
    tempheadrow = MaxRe(15, tempheadrow);    
    for(row = tempheadrow; ; row++)
    {
      
      
      count3 = 0;
      
      tempend = (a0 + a1 * row) / 1000 + 5;   
      
      tempend = MinRe(tempend, AngleStep1NotBrickBorderColL);
      
      for(col = AngleStep1NotBrickBorderColL; ; col--)
      {
        if(ImgNew[row][col] < LimitLeftB)  
        {
          count3++;
        }
        else
        {
        }
        
        if(col <= tempend || col == 0) break;
      }
      
      if(count3 > 20) 
      {
        
        return 0;
      }
      else
      {
      }
      
      if(row == 35) break;
    }
    
    
    return 1;
       
  }
  
  else if(dir == 1)
  {
    
    index = 0;    
    for(i = 35 + 1; ; i++)
    {
      if(BlackRightLoc[i][0] != 255)
      {
        y[index] = BlackRightLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      if(i == 60 - 1)
      {
        return 0;
      }
    }
    
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 > 0 && a1 < 2100)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    AngleStep1NotBrickEndColR = (a0 + a1 * 35) / 1000 - 5;   
    
    if(BlackLeftLoc[35][0] != 255)
    {
      AngleStep1NotBrickBorderColR = MaxRe(AngleStep1NotBrickEndColR - 60, BlackLeftLoc[35][0]);  
    }
    else
    {
    }
    
    
    
    
    tempheadrow = MinRe(35, BlackRightHeadLine);
    
    tempheadrow = MaxRe(15, tempheadrow);    
    for(row = tempheadrow; ; row++)
    {
      
      
      count3 = 0;
      
      tempend = (a0 + a1 * row) / 1000 - 5;   
      
      tempend = MaxRe(tempend, AngleStep1NotBrickBorderColR);
      
      for(col = AngleStep1NotBrickBorderColR; ; col++)
      {
        if(ImgNew[row][col] < LimitRightB)  
        {
          count3++;
        }
        else
        {
        }
        
        if(col >= tempend || col == 250 - 1) break;
      }
      
      if(count3 > 20) 
      {
        
        return 0;
      }
      else
      {
      }
      
      if(row == 35) break;
    }
    
    
    
    return 1;
  }
  else
  {
  }

  
  
  return 0;
}













uint8 AngleStep1Judge(void)
{
  uint8 i, j, col;
  uint8 errorcount;
  uint8 templ, tempr;
  uint8 check_row, leftborder, rightborder;
  uint8 leftbordercal, rightbordercal;
  
  

  
  if(BlackLeftDone == 1 && BlackRightDone == 1)
  {
  }
  else
  {
    return 0;
  }
  
  
  
  
  if (BlackRightHeadLine >= BlackLeftHeadLine + AngleHeadLineNum)
  {
      
      
      
      
      if ((BlackLeftCrossDone != 2)
      
      && (BlackRightCrossDone != 2)
      
      && (CURVEL <= 30 && CURVEL >= 0 - 30)      
      && (CURVER <= 30 && CURVER >= 0 - 40)      
        )
      {
          
          if(BlackRightLoc[BlackRightHeadLine][0] > BlackRightLoc[BlackRightHeadLine+1][0] && BlackRightLoc[BlackRightHeadLine+1][0] > BlackRightLoc[BlackRightHeadLine+2][0])
          {
            return 0;
          }
          else
          {
          }
          
          
          
          
          
          if(AngleLongHeadLineStrategy == 1)
          {
            if(BlackLeftEndLine - BlackLeftHeadLine - 4 - AngleHeadLineNum < 0 || BlackLeft5SlopeIndex - 1 - AngleHeadLineNum < 0)
            {
              return 0;
            }
            else
            {        
            }
            templ = MinRe(BlackLeftEndLine - BlackLeftHeadLine - 4, BlackLeft5SlopeIndex - 1);               
          }
          
          else
          {
            if(BlackLeftEndLine - BlackLeftHeadLine - 4 < 0 || BlackLeft5SlopeIndex - 1 < 0)
            {
              return 0;
            }
            else
            {        
            }
            templ = MinRe(BlackLeftEndLine - BlackLeftHeadLine - 4, BlackLeft5SlopeIndex - 1);            
          }
          
          errorcount = 0;
          
          for(i = 0; ; i++)
          {
            if(BlackLeft5Slope[i] > 0 || BlackLeft5Slope[i] < 0 - 2100) 
            {
              errorcount++;
              if(errorcount > 3) break;   
            }
      
            if(i == templ) break;
          }
          
          if(i != templ) return 0;
          
          
          
          if(BlackRightEndLine - BlackRightHeadLine - 4 < 0 || BlackRight5SlopeIndex - 1 < 0)
          {
            return 0;
          }
          else
          {
          }
          tempr = MinRe(BlackRightEndLine - BlackRightHeadLine - 4, BlackRight5SlopeIndex - 1);
          
          errorcount = 0;
          
          for(i = 0; ; i++)
          {
            if(BlackRight5Slope[i] < 0 || BlackRight5Slope[i] > 2100) 
            {
              errorcount++;
              if(errorcount > 3) break;   
            }
      
            if(i == tempr) break;
          }
          
          if(i != tempr) return 0;
          
          

          
          
          col = BlackRightLoc[BlackRightHeadLine][0];   
          for(i = BlackRightHeadLine-3; i > (BlackRightHeadLine-AngleHeadLineNum); i--)
          {
            
            if(ImgNew[i][col] < LimitRightW - 20)
            {
              flag222 = 10;
              
              break;
            }
            else
            {
              flag222 = 0;
            }
          }
          
          if(
            (i <= BlackRightHeadLine-AngleHeadLineNum)
          &&(AbsInt(ImgNew[BlackRightHeadLine-3][col] - ImgNew[BlackRightHeadLine-AngleHeadLineNum][col]) < 2 * 20)
            )
          {
            
            check_row = BlackRightHeadLine - AngleHeadLineNum / 2;
            
            
            leftborder = MaxRe(0, BlackRightLoc[BlackRightHeadLine][0] - 15);
            leftbordercal = MaxRe(0, BlackRightLoc[BlackRightHeadLine][0] - 15);
            
            if(BlackLeftLoc[check_row][0] != 255)
            {
              leftborder = MaxRe(BlackLeftLoc[check_row][0], leftborder);
              leftbordercal = MaxRe(BlackLeftLoc[check_row][0], leftbordercal);
            }
            else
            {
            } 
            
            rightborder = MinRe(250 - 1, BlackRightLoc[BlackRightHeadLine][0] + 15);
            rightbordercal = MinRe(250 - 1, BlackRightLoc[BlackRightHeadLine][0] + 15);
            
            for(j = leftborder; j < rightborder; j++)
            {
              if(ImgNew[check_row][j] < LimitRightW - 20) break;              
            }
            
            if(
              (j >= rightborder) 
            &&(AbsInt(ImgNew[check_row][leftbordercal] - ImgNew[check_row][rightbordercal]) < 2 * 20) 
              )
            {
              
              if(AngleStep1JudgeNotBrick(1) == 1)
              {
                PathType = 5;
              }
              else
              {
              }
            }
            else
            {
              
            }           
          }
          else
          {            
          }
      }
      
      else
      {
      }

  }
  
  else if (BlackLeftHeadLine >= BlackRightHeadLine + AngleHeadLineNum)
  {
      
      
      
      
      if ((BlackLeftCrossDone != 2)
      
      && (BlackRightCrossDone != 2)
      
      && (CURVEL <= 40 && CURVEL >= 0 - 30)      
      && (CURVER <= 30 && CURVER >= 0 - 30)      
        )
      {
          
          if(BlackLeftLoc[BlackLeftHeadLine][0] < BlackLeftLoc[BlackLeftHeadLine+1][0] && BlackLeftLoc[BlackLeftHeadLine+1][0] < BlackLeftLoc[BlackLeftHeadLine+2][0])
          {
            return 0;
          }
          else
          {
          }

          
          
          
          if(BlackLeftEndLine - BlackLeftHeadLine - 4 < 0 || BlackLeft5SlopeIndex - 1 < 0)
          {
            return 0;
          }
          else
          {        
          }
          templ = MinRe(BlackLeftEndLine - BlackLeftHeadLine - 4, BlackLeft5SlopeIndex - 1);
          
          errorcount = 0;
          
          for(i = 0; ; i++)
          {
            if(BlackLeft5Slope[i] > 0 || BlackLeft5Slope[i] < 0 - 2100) 
            {
              errorcount++;
              if(errorcount > 3) break;   
            }
      
            if(i == templ) break;
          }
          
          if(i != templ) return 0;
          
          
          
          
          if(AngleLongHeadLineStrategy == 1)
          {
            if(BlackRightEndLine - BlackRightHeadLine - 4 - AngleHeadLineNum < 0 || BlackRight5SlopeIndex - 1 - AngleHeadLineNum < 0)
            {
              return 0;
            }
            else
            {
            }
            tempr = MinRe(BlackRightEndLine - BlackRightHeadLine - 4 - AngleHeadLineNum, BlackRight5SlopeIndex - 1 - AngleHeadLineNum);
          }
          
          else
          {
            if(BlackRightEndLine - BlackRightHeadLine - 4 < 0 || BlackRight5SlopeIndex - 1 < 0)
            {
              return 0;
            }
            else
            {
            }
            tempr = MinRe(BlackRightEndLine - BlackRightHeadLine - 4, BlackRight5SlopeIndex - 1);
            
          }
          
          errorcount = 0;
          
          for(i = 0; ; i++)
          {
            if(BlackRight5Slope[i] < 0 || BlackRight5Slope[i] > 2100) 
            {
              errorcount++;
              if(errorcount > 3) break;   
            }
      
            if(i == tempr) break;
          }
          
          if(i != tempr) return 0;
          
          

          
          
          col = BlackLeftLoc[BlackLeftHeadLine][0];   
          for(i = BlackLeftHeadLine-3; i > (BlackLeftHeadLine-AngleHeadLineNum); i--)
          {
            
            if(ImgNew[i][col] < LimitLeftW - 20)
            {
              flag222 = 10;
              
              break;
            }
            else
            {
              flag222 = 0;
            }
          }
          
          if(
            (i <= BlackLeftHeadLine-AngleHeadLineNum)
          &&(AbsInt(ImgNew[BlackLeftHeadLine-3][col] - ImgNew[BlackLeftHeadLine-AngleHeadLineNum][col]) < 2 * 20) 
            )
          {
            
            check_row = BlackLeftHeadLine - AngleHeadLineNum / 2;
            
            
            leftborder = MaxRe(0, BlackLeftLoc[BlackLeftHeadLine][0] - 15);
            leftbordercal = MaxRe(0, BlackLeftLoc[BlackLeftHeadLine][0] - 15);
            
            rightborder = MinRe(250 - 1, BlackLeftLoc[BlackLeftHeadLine][0] + 15);
            rightbordercal = MinRe(250 - 1, BlackLeftLoc[BlackLeftHeadLine][0] + 15);
            
            if(BlackRightLoc[check_row][0] != 255)
            {
              rightborder = MinRe(BlackRightLoc[check_row][0], rightborder);
              rightbordercal = MinRe(BlackRightLoc[check_row][0], rightbordercal);
            }
            else
            {
            }
            
            for(j = leftborder; j < rightborder; j++)
            {
              if(ImgNew[check_row][j] < LimitLeftW - 20) break;              
            }
            
            if(
              (j >= rightborder) 
            &&(AbsInt(ImgNew[check_row][leftbordercal] - ImgNew[check_row][rightbordercal]) < 2 * 20)
              )
            {
              
              if(AngleStep1JudgeNotBrick(0) == 1)
              {
                PathType = 4;
              }
              else
              {
              }
            }
            else
            {
            }            
          }
          else
          {
          }
      }
      
      else
      {
      }
  }
  
  else
  {
  }
  return 1;
  
}














uint8 PathLCRAngle1Judge(void)
{
  
  
  int32 AbsSlopeC;
  uint8 curvetempLL, curvetempLR, curvetempRL, curvetempRR;
  uint8 slopetempLL, slopetempLR, slopetempRL, slopetempRR;
  
  

  
  PathType = 0;
  
  
  if(CurveSlopeGet() == 1)
  {
    
    AbsSlopeC = AbsInt(SlopeC);
    
    
    
    
    
    curvetempRL = (CurveSlopeFlagL == 1 && (CURVEL > 30));        
    curvetempRR = (CurveSlopeFlagR == 1 && (CURVER > 30));        
    curvetempLL = (CurveSlopeFlagL == 1 && (CURVEL + 30 < 0));    
    curvetempLR = (CurveSlopeFlagR == 1 && (CURVER + 30 < 0));    
    slopetempRL = (CurveSlopeFlagL == 1 && (SlopeL + 1500 < 0));            
    slopetempRR = (CurveSlopeFlagR == 1 && (SlopeR + 1500 < 0));            
    slopetempLL = (CurveSlopeFlagL == 1 && (SlopeL > 1500));                
    slopetempLR = (CurveSlopeFlagR == 1 && (SlopeR > 1500));                
    
    












 
      
      if(BlackLeftDone == 1 && BlackRightDone == 1)
      {
      
      if(AbsSlopeC <= 1500)
      {
        
        if(
           
            (curvetempRL)
         || (curvetempRR)
           )
        {
          if((slopetempRL)
          || (slopetempRR)
              )
          {
            PathType = 3;
          }
          
          else
          {
              PathType = 1;
          }
          
        }
        
        else if(
               
                 (curvetempLL)
              || (curvetempLR)
                )
        {   
            if((slopetempLL)
            || (slopetempLR)
              )
            {
                PathType = 2;
            }
            
            else
            {
                PathType = 1;
            }         
        }
        
        else
        {
          PathType = 1;
         
        }
      }
      
      else if(SlopeC > 1500)
      { 
        
        if(
           
           (curvetempLL)
        || (curvetempLR)
        || (slopetempLL)
        || (slopetempLR)
          )
        {
          PathType = 2;
        }
        
        else
        {
          PathType = 1;
        }
      }
      
      else if(SlopeC + 1500 < 0)
      {
        
        
        if(
           
            (curvetempRL)
         || (curvetempRR)
         || (slopetempRL)
         || (slopetempRR)
           )
        {
          PathType = 3;
        }
        
        else
        {
          PathType = 1;
        }        
      }
      
      else
      {
      }
      
      
      if(PathType == 1)
      {
        AngleStep1Judge();
      }
      else
      {
      }   
      
    }
    
    else if(BlackLeftDone == 1 && BlackRightDone == 0)
    {
      
      
      if(AbsSlopeC <= 1500)
      {
        
        if((CURVEC > 30)
         || (curvetempRL)
           )
        {   
            if (slopetempRL)
            {
                PathType = 3;
            }
            
            else
            {
                PathType = 1;
            }
          
        }
        
        else if((CURVEC + 30 < 0)
              || (curvetempLL)
                )
        {   
            if (slopetempLL)
            {
                PathType = 2;
            }
            
            else
            {
                PathType = 1;
            }          
        }
        
        else
        {
          PathType = 1;
        }
      }
      
      else if(SlopeC > 1500)
      { 
        
        if((CURVEC + 30 < 0)
        || (curvetempLL)
        || (slopetempLL)
          )
        {
          PathType = 2;
        }
        
        else
        {
          PathType = 1;
        }
      }
      
      else if(SlopeC + 1500 < 0)
      {
        
        
        if((CURVEC > 30)
         || (curvetempRL)
         || (slopetempRL)
           )
        {
          PathType = 3;
        }
        
        else
        {
          PathType = 1;
        }        
      }
      
      else
      {
      } 
    }
    
    else if(BlackLeftDone == 0 && BlackRightDone == 1)
    {             
      
      if(AbsSlopeC <= 1500)
      { 
        
        if((CURVEC > 30)
         || (curvetempRR)
           )
        {   
            if (slopetempRR)
            {
                PathType = 3;
            }
            
            else
            {
                PathType = 1;
            }
          
        }
        
        else if((CURVEC + 30 < 0)
              || (curvetempLR)
                )
        {   
            if (slopetempLR)
            {
                PathType = 2;
            }
            
            else
            {
                PathType = 1;
            }          
        }
        
        else
        {
          PathType = 1;
        }
      }
      
      else if(SlopeC > 1500)
      { 
        
        if((CURVEC + 30 < 0)
        || (curvetempLR)
        || (slopetempLR)
          )
        {
          PathType = 2;
        }
        
        else
        {
          PathType = 1;
        }
      }
      
      else if(SlopeC + 1500 < 0)
      {
        
        
        if((CURVEC > 30)
         || (curvetempRR)
         || (slopetempRR)
           )
        {
          PathType = 3;
        }
        
        else
        {
          PathType = 1;
        }        
      }
      
      else
      {
      }      
    }
    
    else 
    {
    }
    
    return 1;
    
  }
  
  else
  {
    PathType = 0;  
    return 0;
  }

}












uint8 PathSmallSJudgeStep2(uint8 row, uint8 sel, uint8 dir)
{
  uint8 i;
  
  
  if(sel == 0)
  {
    
    if(dir == 0)
    {
      for(i = row + 1; i < BlackLeftEndLine - 3; i++)
      {
        
        if(BlackLeftLoc[i][0] < BlackLeftLoc[i + 1 + 3][0])
        {
          return 1;
        }
        else
        {
        }
      }
    }
    
    else
    {
      for(i = row + 1; i < BlackLeftEndLine - 3; i++)
      {
        
        if(BlackLeftLoc[i][0] >= BlackLeftLoc[i + 1 + 3][0])
        {
          return 1;
        }
        else
        {
        }
      }
    }
    
    
    return 0;
  }
  
  else
  {
    
    if(dir == 0)
    {
      for(i = row + 1; i < BlackRightEndLine - 3; i++)
      {
        
        if(BlackRightLoc[i][0] < BlackRightLoc[i + 1 + 3][0])
        {
          return 1;
        }
        else
        {
        }
      }
    }
    
    else
    {
      for(i = row + 1; i < BlackRightEndLine - 3; i++)
      {
        
        if(BlackRightLoc[i][0] >= BlackRightLoc[i + 1 + 3][0])
        {
          return 1;
        }
        else
        {
        }
      }
    }
    
    
    return 0;
  }

}












uint8 PathSmallSJudgeStep1(void)
{
    uint8 i;
    uint8 signflag1 = 2;    
    

    
    if (BlackLeftDone == 1 && BlackRightDone == 1)
    {
        
        if (
            (BlackLeftHeadLine < 10) 
         && (BlackLeftEndLine > BlackLeftHeadLine + 3 + 1)
            )
        {
            
            signflag1 = 2;
            
            
            
            for (i = BlackLeftHeadLine; i < BlackLeftEndLine - 3; i++)
            {
                
                if (BlackLeftLoc[i][0] >= BlackLeftLoc[i + 1 + 3][0])
                {
                    
                    if (signflag1 == 0)
                    {
                        
                        if(PathSmallSJudgeStep2(i, 0, 0) == 1)
                        {
                          PathSmallSDoneFlag = 1;   
                          PathSmallSDir = 1;    
                          PathType = 7;   
                          return 1;
                        }
                        else
                        {
                          
                          
                        }
                    }
                    else
                    {
                    }
                    signflag1 = 1;
                }
                
                else
                {   
                    
                    if (signflag1 == 1)
                    { 
                        
                        if(PathSmallSJudgeStep2(i, 0, 1) == 1)
                        {
                          PathSmallSDoneFlag = 1;   
                          PathSmallSDir = 0;    
                          PathType = 6;  
                          return 1;
                        }
                        else
                        {
                          
                          
                        }
                    }
                    else
                    {
                    }
                    signflag1 = 0;
                }
            }
            
            
        }
        
        else
        {
        }
        
        
        if(
            (BlackRightHeadLine < 10)
         && (BlackRightEndLine > BlackRightHeadLine + 3 + 1)
           )
        {
          
          signflag1 = 2;

          
          for (i = BlackRightHeadLine; i < BlackRightEndLine - 3; i++)
          {
              
              if (BlackRightLoc[i][0] >= BlackRightLoc[i + 1 + 3][0])
              {
                  
                  if (signflag1 == 0)
                  {
                      
                      if(PathSmallSJudgeStep2(i, 1, 0) == 1)
                      {
                        PathSmallSDoneFlag = 1;   
                        PathSmallSDir = 1;    
                        PathType = 7;   
                        return 1;
                      }
                      else
                      {
                        return 0;
                      }
                  }
                  else
                  {
                  }
                  signflag1 = 1;
              }
              
              else
              {
                  
                  if (signflag1 == 1)
                  {
                      
                      if(PathSmallSJudgeStep2(i, 1, 1) == 1)
                      {
                        PathSmallSDoneFlag = 1;   
                        PathSmallSDir = 0;    
                        PathType = 6;   
                        return 1;
                      }
                      else
                      {
                        return 0;
                      }
                  }
                  else
                  {
                  }
                  signflag1 = 0;
              }
          }

          
          return 0;
        }
        else
        {
          
          return 0;
        }
    }
    
    else if (BlackLeftDone == 1 && BlackRightDone == 0)
    {
        
        if (BlackLeftHeadLine < 10 && BlackLeftEndLine > BlackLeftHeadLine + 3 + 1)
        {
            
            for (i = BlackLeftHeadLine; i < BlackLeftEndLine - 3; i++)
            {

                
                if (BlackLeftLoc[i][0] >= BlackLeftLoc[i + 1 + 3][0])
                {
                    
                    if (signflag1 == 0)
                    {                           
                        
                        if(PathSmallSJudgeStep2(i, 0, 0) == 1)
                        {
                          PathSmallSDoneFlag = 1;   
                          PathSmallSDir = 1;    
                          PathType = 7;   
                          return 1;
                        }
                        else
                        {
                          return 0;
                        }
                    }
                    else
                    {
                    }
                    signflag1 = 1;
                }
                
                else
                {
                    
                    if (signflag1 == 1)
                    {                           
                        
                        if(PathSmallSJudgeStep2(i, 0, 1) == 1)
                        {
                          PathSmallSDoneFlag = 1;   
                          PathSmallSDir = 0;    
                          PathType = 6;  
                          return 1;
                        }
                        else
                        {
                          return 0;
                        }
                    }
                    else
                    {
                    }
                    signflag1 = 0;
                }
            }

            
            return 0;
        }
        
        else
        {
            return 0;
        }
    }
    
    else if (BlackLeftDone == 0 && BlackRightDone == 1)
    {
        
        if (BlackRightHeadLine < 10 && BlackRightEndLine > BlackRightHeadLine + 3 + 1)
        {
            
            for (i = BlackRightHeadLine; i < BlackRightEndLine - 3; i++)
            {
                  
                  if (BlackRightLoc[i][0] >= BlackRightLoc[i + 1 + 3][0])
                  {
                      
                      if (signflag1 == 0)
                      {                           
                          
                          if(PathSmallSJudgeStep2(i, 1, 0) == 1)
                          {
                            PathSmallSDoneFlag = 1;   
                            PathSmallSDir = 1;    
                            PathType = 7; 
                            return 1;
                          }
                          else
                          {
                            return 0;
                          }
                      }
                      else
                      {
                      }
                      signflag1 = 1;
                  }
                  
                  else
                  {
                      
                      if (signflag1 == 1)
                      {                           
                          
                          if(PathSmallSJudgeStep2(i, 1, 1) == 1)
                          {
                            PathSmallSDoneFlag = 1;   
                            PathSmallSDir = 0;    
                            PathType = 6;  
                            return 1;
                          }
                          else
                          {
                            return 0;
                          }
                      }
                      else
                      {
                      }
                      signflag1 = 0;
                  }
            }

            
            return 0;
        }
        
        else
        {
            return 0;
        }

    }
    
    else
    {
        return 0;
    }

}














uint8 PathJudge(void)
{  
  uint8 flag1, flag2;
  
  
  
  
  flag1 = PathLCRAngle1Judge();

  
  
  flag2 = 1;
  
  if(flag1 == 0 && flag2 == 0)
  {
    return 0;
  }
  else
  {
    return 1;
  }
  
  
  




















































































































    
  
}









uint8 BlackUdis(void)
{
  uint8 row;
  
  
  
  if(BlackLeftDone == 1)
  {
    
    for(row = BlackLeftEndLine; ; row--)
    {
      
      if(row > 38)
      {
        
        BlackUdisLeftLocation[row].x  = (BlackUdisMatrixLow[0] * BlackLeftLoc[row][0] + BlackUdisMatrixLow[1] * (row + 1) + BlackUdisMatrixLow[2]) 
                                      / (BlackUdisMatrixLow[6] * BlackLeftLoc[row][0] + BlackUdisMatrixLow[7] * (row + 1) + 1000);
        
        BlackUdisLeftLocation[row].y  = (BlackUdisMatrixLow[3] * BlackLeftLoc[row][0] + BlackUdisMatrixLow[4] * (row + 1) + BlackUdisMatrixLow[5]) 
                                      / (BlackUdisMatrixLow[6] * BlackLeftLoc[row][0] + BlackUdisMatrixLow[7] * (row + 1) + 1000);
      }
      else
      {
        
        if(row > 18)
        {
          
          BlackUdisLeftLocation[row].x  = (BlackUdisMatrixMiddle[0] * BlackLeftLoc[row][0] + BlackUdisMatrixMiddle[1] * (row + 1) + BlackUdisMatrixMiddle[2]) 
                                        / (BlackUdisMatrixMiddle[6] * BlackLeftLoc[row][0] + BlackUdisMatrixMiddle[7] * (row + 1) + 1000);
          
          BlackUdisLeftLocation[row].y  = (BlackUdisMatrixMiddle[3] * BlackLeftLoc[row][0] + BlackUdisMatrixMiddle[4] * (row + 1) + BlackUdisMatrixMiddle[5]) 
                                        / (BlackUdisMatrixMiddle[6] * BlackLeftLoc[row][0] + BlackUdisMatrixMiddle[7] * (row + 1) + 1000);     
        }
        
        else
        {
          
          BlackUdisLeftLocation[row].x  = (BlackUdisMatrixFar[0] * BlackLeftLoc[row][0] + BlackUdisMatrixFar[1] * (row + 1) + BlackUdisMatrixFar[2]) 
                                        / (BlackUdisMatrixFar[6] * BlackLeftLoc[row][0] + BlackUdisMatrixFar[7] * (row + 1) + 1000);
          
          BlackUdisLeftLocation[row].y  = (BlackUdisMatrixFar[3] * BlackLeftLoc[row][0] + BlackUdisMatrixFar[4] * (row + 1) + BlackUdisMatrixFar[5]) 
                                        / (BlackUdisMatrixFar[6] * BlackLeftLoc[row][0] + BlackUdisMatrixFar[7] * (row + 1) + 1000);          
        }       
      }
      
      if(row == BlackLeftHeadLine) break;
    }
  }
  else
  {    
  }
  
  
  if(BlackRightDone == 1)
  {
    
    for(row = BlackRightEndLine; ; row--)
    {
      
      if(row > 38)
      {
        
        BlackUdisRightLocation[row].x  = (BlackUdisMatrixLow[0] * BlackRightLoc[row][0] + BlackUdisMatrixLow[1] * (row + 1) + BlackUdisMatrixLow[2]) 
                                       / (BlackUdisMatrixLow[6] * BlackRightLoc[row][0] + BlackUdisMatrixLow[7] * (row + 1) + 1000);
        
        BlackUdisRightLocation[row].y  = (BlackUdisMatrixLow[3] * BlackRightLoc[row][0] + BlackUdisMatrixLow[4] * (row + 1) + BlackUdisMatrixLow[5]) 
                                       / (BlackUdisMatrixLow[6] * BlackRightLoc[row][0] + BlackUdisMatrixLow[7] * (row + 1) + 1000);
      }
      else
      {
        
        if(row > 18)
        {
          
          BlackUdisRightLocation[row].x  = (BlackUdisMatrixMiddle[0] * BlackRightLoc[row][0] + BlackUdisMatrixMiddle[1] * (row + 1) + BlackUdisMatrixMiddle[2]) 
                                         / (BlackUdisMatrixMiddle[6] * BlackRightLoc[row][0] + BlackUdisMatrixMiddle[7] * (row + 1) + 1000);
          
          BlackUdisRightLocation[row].y  = (BlackUdisMatrixMiddle[3] * BlackRightLoc[row][0] + BlackUdisMatrixMiddle[4] * (row + 1) + BlackUdisMatrixMiddle[5]) 
                                         / (BlackUdisMatrixMiddle[6] * BlackRightLoc[row][0] + BlackUdisMatrixMiddle[7] * (row + 1) + 1000);     
        }
        
        else
        {
          
          BlackUdisRightLocation[row].x  = (BlackUdisMatrixFar[0] * BlackRightLoc[row][0] + BlackUdisMatrixFar[1] * (row + 1) + BlackUdisMatrixFar[2]) 
                                         / (BlackUdisMatrixFar[6] * BlackRightLoc[row][0] + BlackUdisMatrixFar[7] * (row + 1) + 1000);
          
          BlackUdisRightLocation[row].y  = (BlackUdisMatrixFar[3] * BlackRightLoc[row][0] + BlackUdisMatrixFar[4] * (row + 1) + BlackUdisMatrixFar[5]) 
                                         / (BlackUdisMatrixFar[6] * BlackRightLoc[row][0] + BlackUdisMatrixFar[7] * (row + 1) + 1000);          
        }       
      }
      
      if(row == BlackRightHeadLine) break;
    }
  }
  else
  {
  }
  
  return 1;
}





uint8 AngleSpeDealCen(uint8 dir)
{
  
  if(dir == 0)
  {
    
    DeviFuse = AngleSpeDealDeviNow[15-AngleSpeDealBackCount-1];
    
    
    
    SlopeC = AngleSpeDealSlopeC[15-AngleSpeDealBackCount-1];
  }
  
  else if(dir == 1)
  {
    
    DeviFuse = 0 - AngleSpeDealDeviNow[15-AngleSpeDealBackCount-1];
    
    
    
    SlopeC = AngleSpeDealSlopeC[15-AngleSpeDealBackCount-1];    
  }
  
  else
  {    
  }
  
  return 1;
}



uint8 AngleSpeDealExitJudge(void)
{
  
  if(15 - AngleSpeDealBackCount < 8)
  {
    return 0;
  }
  else
  {
  }
  
  
  if(
     (BlackLeftDone == 1)
   &&(BlackRightDone == 1)
   &&(AbsInt(SlopeL) < 3000)
   &&(AbsInt(SlopeR) < 3000)
     )
  {
    return 1;
  }
  else
  {
    return 0;
  }
  
  





































 
}


uint8 AngleStep2Confirm(void)
{          
  uint8 i;
  
  
  
  










 
  

  
  
  if(AngleConfirmLockFlag == 0)
  {
    for(i = 0; ; i++)
    {
      AngleConfirmMat[i] = AngleConfirmMat[i + 1];
      if(i == 6 - 2) break;
    }
    
    if(PathType == 4 || PathType == 5)
    {
      
      AngleConfirmMat[6 - 1] = 1;
    }
    else
    {
      
      AngleConfirmMat[6 - 1] = 0;
    }
    
    AngleConfirmMatCollect = 0;
    for(i = 0; ; i++)
    {
      if(AngleConfirmMat[i] == 1) AngleConfirmMatCollect++;
      
      if(i == 6 - 1) break;
    }
  }
  
  else
  {
  }
  
  
  if(AngleConfirmMatCollect >= AngleConfirmMatLimit)
  {
    
    AngleConfirmLockFlag = 1;
    
    for(i = 0; ; i++)
    {
      AngleConfirmMat[i] = 0;
      if(i == 6 - 1) break;
    }
    
    if(PathType == 4)
    {
      AngleSpeDealDir = 0;             
    }
    else if(PathType == 5)
    {
      AngleSpeDealDir = 1;             
    }
    else
    {
      
    }
  }
  else
  {
  }
  
  
  if(AngleConfirmLockFlag == 1)
  {
    
    AngleZoneConfirmLockFlag = 0;
    
    
    if(AngleSpeDealDir == 0)
    {
      if(BlackLeftHeadLine >= 40 || BlackLeftHeadLine == 255)
      {
        
        AngleSpeDealBackCount = 15;
      }
      else
      {
        
      }
    }
    
    else if(AngleSpeDealDir == 1)
    {
      if(BlackRightHeadLine >= 40 || BlackRightHeadLine == 255)
      {
        
        AngleSpeDealBackCount = 15;
      }
      else
      {
        
      }
    }
    else
    {
    }
  }
  else
  {
  }

  
  AngleSpeDealExitJudgeFlag = AngleSpeDealExitJudge();
  
  
  if(AngleSpeDealBackCount != 0 && AngleSpeDealExitJudgeFlag == 0)
  {
    AngleConfirmLockFlag = 0;    
    
    
    AngleSpeDealBackCount--;
    
    AngleSpeDealCen(AngleSpeDealDir);
    
    AngleSpeDealFlag = 1;
    
    
    AngleZoneConfirmLockFlag = 0;    
  }
  else
  {
    
    AngleSpeDealBackCount = 0;
    
    
    AngleSpeDealFlag = 0;
  }
  
  return 1;
}











uint8 PathJudgeNewStraight(void)
{
  uint8 templ, tempr;
  uint8 i;
  uint8 errorcount;
  
  
  
  
  if(BlackLeftDone == 1 && BlackRightDone == 1)
  {
    
    if(BlackGetPreDir == 0 || BlackGetPreDir == 2)
    {
      if(BlackLeftStep1ScanRow == 60 - 1 && BlackRightStep1ScanRow >= 60 - 5)
      {
      }
      else
      {
        return 0;
      }
    }
    else
    {
      if (BlackLeftStep1ScanRow >= 60 - 5 && BlackRightStep1ScanRow == 60 - 1)
      {
      }
      else
      {
        return 0;
      }
    }
    
    
    if(2 == 0)
    {
      errorcount = 0;
      
      
      templ = BlackLeft5SlopeIndex - 1;
      
      
      
      for(i = 0; ; i++)
      {
        if(BlackLeft5Slope[i] > 0 || BlackLeft5Slope[i] < 0 - 2100) 
        {
          errorcount++;
          if(errorcount > 3) break;   
        }
        
        
        if(i == templ) break;
      }
      
      if(i != templ)
      {
        flag000 = 3;
        flag111 = BlackLeft5Slope[i];
        return 0;
      }
      
      errorcount = 0;
      
      
      tempr = BlackRight5SlopeIndex - 1;
      
      
      
      for(i = 0; ; i++)
      {
        if(BlackRight5Slope[i] < 0 || BlackRight5Slope[i] > 2100) 
        {
          errorcount++;
          if(errorcount > 3) break;   
        }
        
        
        if(i == tempr) break;
      }
      
      if(i != tempr)
      {
        flag111 = BlackRight5Slope[i];
        flag000 = 5;
        return 0;
      }
      
      
      flag000 = 0;
      PathType = 1;
      return 1;
    
    }
    
    
    else if(2 == 1)
    {
      errorcount = 0;
      
      
      templ = BlackLeft5SlopeIndex - 1;
      if(templ <= 10) return 0; 
      
      
      for(i = 0; ; i++)
      {
        if(BlackLeft5Slope[i] > 0 || BlackLeft5Slope[i] < 0 - 2100) 
        {
          errorcount++;
          if(errorcount > 3) break;   
        }
        
        if(i == templ - 10) break;
        
      }
      if(i != templ - 10) 
      
      {
        flag000 = 3;
        flag111 = BlackLeft5Slope[i];
        return 0;
      }
      
      errorcount = 0;
      
      
      tempr = BlackRight5SlopeIndex - 1;
      if(tempr <= 10) return 0;  
      
      
      for(i = 0; ; i++)
      {
        if(BlackRight5Slope[i] < 0 || BlackRight5Slope[i] > 2100) 
        {
          errorcount++;
          if(errorcount > 3) break;   
        }
        
        if(i == tempr - 10) break;
        
      }
      if(i != tempr - 10) 
      
      {
        flag111 = BlackRight5Slope[i];
        flag000 = 5;
        return 0;
      }
      
      
      flag000 = 0;
      PathType = 1;
      return 1;      
    }
    
    
    
    else
    {
      
      if(SingleBlackAllFlag == 0)
      {
        errorcount = 0;
        
        
        if(BlackLeftEndLine - BlackLeftHeadLine - 4 < 0 || BlackLeft5SlopeIndex - 1 < 0)
        {
          return 0;
        }
        else
        {        
        }
        templ = MinRe(BlackLeftEndLine - BlackLeftHeadLine - 4, BlackLeft5SlopeIndex - 1);
        
        
        
        for(i = 0; ; i++)
        {
          if(BlackLeft5Slope[i] > 0 || BlackLeft5Slope[i] < 0 - 2100) 
          {
            errorcount++;
            if(errorcount > 3) break;   
          }
          
          
          if(i == templ) break;
        }
        
        if(i != templ)
        {
          flag000 = 3;
          flag111 = BlackLeft5Slope[i];
          return 0;
        }
        
        errorcount = 0;
        
        
        
        if(BlackRightEndLine - BlackRightHeadLine - 4 < 0 || BlackRight5SlopeIndex - 1 < 0)
        {
          return 0;
        }
        else
        {
        }
        tempr = MinRe(BlackRightEndLine - BlackRightHeadLine - 4, BlackRight5SlopeIndex - 1);
        
        
        
        for(i = 0; ; i++)
        {
          if(BlackRight5Slope[i] < 0 || BlackRight5Slope[i] > 2100) 
          {
            errorcount++;
            if(errorcount > 3) break;   
          }
          
          
          if(i == tempr) break;
        }
        
        if(i != tempr)
        {
          flag111 = BlackRight5Slope[i];
          flag000 = 5;
          return 0;
        }
        
        
        flag000 = 0;
        PathType = 1;
        return 1;   
      }
      
      else
      {
        errorcount = 0;
        
        
        if(BlackLeftEndLine - BlackLeftHeadLine - 4 < 0 || BlackLeft5SlopeIndex - 1 < 0)
        {
          return 0;
        }
        else
        {        
        }
        templ = MinRe(BlackLeftEndLine - BlackLeftHeadLine - 4, BlackLeft5SlopeIndex - 1);
        
        
        
        for(i = 0; ; i++)
        {
          if(BlackLeft5Slope[i] > 1001 || BlackLeft5Slope[i] < 0 - 1000) 
          {
            errorcount++;
            if(errorcount > 3) break;   
          }
          
          
          if(i == templ) break;
        }
        
        if(i != templ)
        {
          flag000 = 3;
          flag111 = BlackLeft5Slope[i];
          return 0;
        }
        
        errorcount = 0;
        
        
        
        if(BlackRightEndLine - BlackRightHeadLine - 4 < 0 || BlackRight5SlopeIndex - 1 < 0)
        {
          return 0;
        }
        else
        {
        }
        tempr = MinRe(BlackRightEndLine - BlackRightHeadLine - 4, BlackRight5SlopeIndex - 1);
        
        
        
        for(i = 0; ; i++)
        {
          if(BlackRight5Slope[i] < 0 - 1001 || BlackRight5Slope[i] > 1000) 
          {
            errorcount++;
            if(errorcount > 3) break;   
          }
          
          
          if(i == tempr) break;
        }
        
        if(i != tempr)
        {
          flag111 = BlackRight5Slope[i];
          flag000 = 5;
          return 0;
        }
        
        
        flag000 = 0;
        PathType = 1;
        return 1;           
      }
    }
  }
  else
  {
    flag000 = 1;
    
    return 0;
  }
  
}



uint8 BrickJudge(void)
{
  uint8 row;
  uint8 col;
  uint8 count1, count2, count3;
    
  int32 a0, a1;
  uint8 i, index, tempend;
  
  uint8 x[8];   
  uint8 y[8];
  
  if(BlackLeftDone == 1 && BlackRightDone == 1)
  {
  }
  else
  {
    return 0;
  }
  
  
  
  if(
    (BlackRightHeadLine > 15)                                         
  ||(BlackRightCrossDone != 0 && BlackRightRow1RealLastLine  > 15)    
    )
  {
    
  }
  else
  {
    
    
    
    index = 0;    
    for(i = 35 + 1; ; i++)
    {
      if(BlackLeftLoc[i][0] != 255)
      {
        y[index] = BlackLeftLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      if(i == 60 - 1)
      {
        return 0;
      }
    }
    
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 < 0 && a1 + 2100 > 0)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    BrickEndColL = (a0 + a1 * 35) / 1000 + 5;
    
    BrickHeadColL = (a0 + a1 * 15) / 1000 + 5;
    
    
    BrickBorderColL = MinRe(250 - 1, BrickEndColL + 60);
    
    if(BlackRightLoc[35][0] != 255)
    {
      BrickBorderColL = MinRe(BrickBorderColL, BlackRightLoc[35][0]);
    }
    else
    {
    }
    
    
    count2 = 0;
    for(row = 15; ; row++)
    {
      
      
      count1 = 0;
      
      tempend = (a0 + a1 * row) / 1000 + 5;   
      for(col = BrickBorderColL; ; col--)
      {
        if(ImgNew[row][col] < LimitLeftB)  
        {
          count1++;
        }
        else
        {
        }
        
        if(col <= tempend || col == 0) break;
      }
      
      if(count1 > 20) 
      {
        count2++;
        BrickLineCountNumRecord = count2;
        
        if(count2 > 3) 
        {
          
          break;
        }
        else
        {      
        }
      }
      else
      {
      }
      if(row == 35) break;
    }
    
    
    if(row != 35)
    {
      
      index = 0;    
      for(i = 35 + 1; ; i++)
      {
        if(BlackRightLoc[i][0] != 255)
        {
          y[index] = BlackRightLoc[i][0];
          x[index] = i;
          index++;
        }
        if(index == 8)
        {
          break;  
        }
        if(i == 60 - 1)
        {
          return 0;
        }
      }
      
      
      
      a1 = LeastSquarea1(x, y, 8);
      
      if(a1 > 0 && a1 < 2100)
      {
      }
      else
      {
        return 0;
      }
      a0 = LeastSquarea0(x, y, a1, 8);
      
      
      BrickEndColR = (a0 + a1 * 35) / 1000 - 5;
      
      BrickHeadColR = (a0 + a1 * 15) / 1000 - 5;
      
      BrickBorderColR = MaxRe(BrickEndColR - 60 / 2, BrickBorderColL);
   
      
      for(row = 15; ; row++)
      {
        
        
        count3 = 0;
        
        tempend = (a0 + a1 * row) / 1000 - 5;   
        
        tempend = MaxRe(tempend, BrickBorderColR);
        
        for(col = BrickBorderColR; ; col++)
        {
          if(ImgNew[row][col] < LimitRightB)  
          {
            count3++;
          }
          else
          {
          }
          
          if(col >= tempend || col == 250 - 1) break;
        }
        
        if(count3 > 20) 
        {
          
          break;
        }
        else
        {
        }
        
        if(row == 35) break;
      }
      
      
      if(row == 35)
      {
        
        PathType = 8;
        return 1;
      }
      else
      {
      }
    }
    
    else
    {
    }

  }
  
  
  
  if(
    (BlackLeftHeadLine > 15)                                         
  ||(BlackLeftCrossDone != 0 && BlackLeftRow1RealLastLine  > 15)    
    )
  {
    
    return 0;
  }
  else
  {
    
    
    
    index = 0;    
    for(i = 35 + 1; ; i++)
    {
      if(BlackRightLoc[i][0] != 255)
      {
        y[index] = BlackRightLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      if(i == 60 - 1)
      {
        return 0;
      }
    }
    
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 > 0 && a1 < 2100)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    BrickEndColR = (a0 + a1 * 35) / 1000 - 5;
    
    BrickHeadColR = (a0 + a1 * 15) / 1000 - 5;
    
    
    BrickBorderColR = MaxRe(0, BrickEndColR - 60);
    
    if(BlackLeftLoc[35][0] != 255)
    {
      BrickBorderColR = MaxRe(BrickBorderColR, BlackLeftLoc[35][0]);
    }
    else
    {
    }
    
    
    count2 = 0;
    for(row = 15; ; row++)
    {
      
      
      count1 = 0;
      
      tempend = (a0 + a1 * row) / 1000 - 5;   
      for(col = BrickBorderColR; ; col++)
      {
        if(ImgNew[row][col] < LimitRightB)  
        {
          count1++;
        }
        else
        {
        }
        
        if(col >= tempend || col == 250 - 1) break;
      }
      
      if(count1 > 20) 
      {
        count2++;
        BrickLineCountNumRecord = count2;
        
        if(count2 > 3) 
        {
          
          break;
        }
        else
        {      
        }
      }
      else
      {
      }
      if(row == 35) break;
    }
    
    
    if(row != 35)
    {
      
      index = 0;    
      for(i = 35 + 1; ; i++)
      {
        if(BlackLeftLoc[i][0] != 255)
        {
          y[index] = BlackLeftLoc[i][0];
          x[index] = i;
          index++;
        }
        if(index == 8)
        {
          break;  
        }
        if(i == 60 - 1)
        {
          return 0;
        }
      }
      
      
      
      a1 = LeastSquarea1(x, y, 8);
      
      if(a1 < 0 && a1 + 2100 > 0)
      {
      }
      else
      {
        return 0;
      }
      a0 = LeastSquarea0(x, y, a1, 8);
      
      
      BrickEndColL = (a0 + a1 * 35) / 1000 + 5;
      
      BrickHeadColL = (a0 + a1 * 15) / 1000 + 5;
      
      BrickBorderColL = MinRe(BrickEndColL + 60 / 2, BrickBorderColR);
   
      
      for(row = 15; ; row++)
      {
        
        
        count3 = 0;
        
        tempend = (a0 + a1 * row) / 1000 + 5;   
        
        tempend = MinRe(tempend, BrickBorderColL);
        
        for(col = BrickBorderColL; ; col--)
        {
          if(ImgNew[row][col] < LimitLeftB)  
          {
            count3++;
          }
          else
          {
          }
          
          if(col <= tempend || col == 0) break;
        }
        
        if(count3 > 20) 
        {
          
          break;
        }
        else
        {
        }
        
        if(row == 35) break;
      }
      
      
      if(row == 35)
      {
        
        PathType = 9;
        return 1;
      }
      else
      {
        return 0;
      }
    }
    
    else
    {
      return 0;
    }
  }
  
}







uint8 AngleZoneJudge(void)
{
  uint8 countcol, count1, count2;
  
  int32 a0, a1;
  uint8 i, index;
  
  uint8 x[8];   
  uint8 y[8];
  uint8 col;
  
  
  
  if(
    (BlackLeftDone == 1 && BlackRightDone == 1)
  &&(AbsInt(BlackLeftHeadLine - BlackRightHeadLine) <= 15)      
  &&(BlackLeftHeadLine < 50 && BlackLeftHeadLine > 14)  
  &&(BlackRightHeadLine < 50 && BlackRightHeadLine > 14)  
    )
  {
  }
  else
  {
    return 0;
  }
  
  
  
  if(BlackBigChangeFinalCheckFlag == 1 || BlackRightHeadLine <= BlackLeftHeadLine)
  {
    
    
    for(i = 0; ; i++)
    {
      AngleZoneJudgeRowR[i] = BlackRightHeadLine - i - 1;
        
      if(i == 5 - 1) break;
    }
    
    
    
    
    index = 0;
    for(i = BlackRightHeadLine + 2; ; i++)
    {
      if(BlackRightLoc[i][0] != 255)
      {
        y[index] = BlackRightLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      
      if(i == 60 - 1) return 0;
    }
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 > 0 && a1 < 2100)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    for(i = 0; ; i++)
    {
      
      AngleZoneJudgeColR[i] = (a0 + a1 * AngleZoneJudgeRowR[i]) / 1000 - 2;  
      AngleZoneJudgeColRFlag[i] = 0;
      
      if(i == 5 - 1) break;
    }
    
    for(i = 0; ; i++)
    {
      
      countcol = 0;
      
      if(AngleZoneJudgeColR[i] - 70 < 0)
      {
        return 0;
      }
      else
      {
      }      
      for(col = AngleZoneJudgeColR[i] - 70; ; col++)
      {
        
        if(ImgNew[AngleZoneJudgeRowR[i]][col] < LimitRightB) countcol++;
        
        if(countcol >= 45)  
        {
          AngleZoneJudgeColRFlag[i] = 1;
          break;
        }
        
        if(col == AngleZoneJudgeColR[i]) break;
      }
      
      AngleZoneJudgeCountColR[i] = countcol;
        
      
      if(i == 5 - 1) break;
    }
    
    count1 = 0;
    for(i = 0; ; i++)
    {
      if(AngleZoneJudgeColRFlag[i] == 1) count1++;
      
      if(i == 5 - 1) break;
    }
    
    if(AbsInt(BlackLeftHeadLine - BlackRightHeadLine) > 5)
    {
      if(count1 >= 1)
      {
      }
      else
      {
        return 0;
      }
    }
    else
    {
      if(count1 >= 2)
      {
      }
      else
      {
        return 0;
      }
    }
    
    
    
    for(i = 0; ; i++)
    {
      AngleZoneJudgeRowL[i] = BlackLeftHeadLine - i - 1 - 1;
        
      if(i == 5 - 1) break;
    }
    
    
    
    
    index = 0;
    for(i = BlackLeftHeadLine + 2; ; i++)
    {
      if(BlackLeftLoc[i][0] != 255)
      {
        y[index] = BlackLeftLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      
      if(i == 60 - 1) return 0;
    }
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 < 0 && a1 + 2100 > 0)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    for(i = 0; ; i++)
    {
      
      AngleZoneJudgeColL[i] = (a0 + a1 * AngleZoneJudgeRowL[i]) / 1000 + 2;  
      AngleZoneJudgeColLFlag[i] = 0;
      
      if(i == 5 - 1) break;
    }
    
    for(i = 0; ; i++)
    {
      
      countcol = 0;
      
      if(AngleZoneJudgeColL[i] + 70 / 2 > 250 - 1) 
      {
        return 0;
      }
      else
      {
      }
      for(col = AngleZoneJudgeColL[i] + 70 /2 ; ; col--) 
      {
        
        if(ImgNew[AngleZoneJudgeRowL[i]][col] < LimitLeftB) countcol++;
        
        if(countcol >= 20)  
        {
          AngleZoneJudgeColLFlag[i] = 1;
          break;
        }
        
        if(col == AngleZoneJudgeColL[i]) break;
      }
      
      AngleZoneJudgeCountColL[i] = countcol;
        
      
      if(i == 5 - 1) break;
    }
    
    count2 = 0;
    for(i = 0; ; i++)
    {
      if(AngleZoneJudgeColLFlag[i] == 1) count2++;
      
      if(i == 5 - 1) break;
    }
    if(count2 >= 2)
    {
      
      PathType = 10; 
      
      
      
      if(BlackLeftHeadLine == BlackRightHeadLine)
      {
      }
      
      else if(BlackLeftHeadLine < BlackRightHeadLine)
      {
        
        for(i = BlackLeftHeadLine; ; i++)
        {
          if(i == BlackRightHeadLine) break;
          
          BlackLeftLoc[i][0] = 255;
        }
        
        BlackLeftHeadLine = BlackRightHeadLine;
      }
      
      else
      {
        
        for(i = BlackRightHeadLine; ; i++)
        {
          if(i == BlackLeftHeadLine) break;
          
          BlackRightLoc[i][0] = 255;
        }
        
        BlackRightHeadLine = BlackLeftHeadLine;        
      }
            
      return 1;
    }
    else
    {
      return 0;
    }

  }
  
  
  else if(BlackBigChangeFinalCheckFlag == 2  || BlackLeftHeadLine < BlackRightHeadLine)
  {
    
    
    for(i = 0; ; i++)
    {
      AngleZoneJudgeRowL[i] = BlackLeftHeadLine - i - 1;
        
      if(i == 5 - 1) break;
    }
    
    
    
    
    index = 0;
    for(i = BlackLeftHeadLine + 2; ; i++)
    {
      if(BlackLeftLoc[i][0] != 255)
      {
        y[index] = BlackLeftLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      
      if(i == 60 - 1) return 0;
    }
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 < 0 && a1 + 2100 > 0)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    for(i = 0; ; i++)
    {
      
      AngleZoneJudgeColL[i] = (a0 + a1 * AngleZoneJudgeRowL[i]) / 1000 + 2;  
      AngleZoneJudgeColLFlag[i] = 0;
      
      if(i == 5 - 1) break;
    }
    
    for(i = 0; ; i++)
    {
      
      countcol = 0;
      
      if(AngleZoneJudgeColL[i] + 70 > 250 - 1)
      {
        return 0;
      }
      else
      {
      }
      for(col = AngleZoneJudgeColL[i] + 70; ; col--)
      {
        
        if(ImgNew[AngleZoneJudgeRowL[i]][col] < LimitLeftB) countcol++;
        
        if(countcol >= 45)  
        {
          AngleZoneJudgeColLFlag[i] = 1;
          break;
        }
        
        if(col == AngleZoneJudgeColL[i]) break;
      }
      
      AngleZoneJudgeCountColL[i] = countcol;
        
      
      if(i == 5 - 1) break;
    }
    
    count2 = 0;
    for(i = 0; ; i++)
    {
      if(AngleZoneJudgeColLFlag[i] == 1) count2++;
      
      if(i == 5 - 1) break;
    }
    
    if(AbsInt(BlackLeftHeadLine - BlackRightHeadLine) > 5)
    {
      if(count2 >= 1)
      {
      }
      else
      {
        return 0;
      }
    }
    else
    {
      if(count2 >= 2)
      {
      }
      else
      {
        return 0;
      }
    }
       
    
    
    for(i = 0; ; i++)
    {
      AngleZoneJudgeRowR[i] = BlackRightHeadLine - i - 1 - 1;
        
      if(i == 5 - 1) break;
    }
    
    
    
    
    index = 0;
    for(i = BlackRightHeadLine + 2; ; i++)
    {
      if(BlackRightLoc[i][0] != 255)
      {
        y[index] = BlackRightLoc[i][0];
        x[index] = i;
        index++;
      }
      if(index == 8)
      {
        break;  
      }
      
      if(i == 60 - 1) return 0;
    }
    
    
    a1 = LeastSquarea1(x, y, 8);
    
    if(a1 > 0 && a1 < 2100)
    {
    }
    else
    {
      return 0;
    }
    a0 = LeastSquarea0(x, y, a1, 8);
    
    
    for(i = 0; ; i++)
    {
      
      AngleZoneJudgeColR[i] = (a0 + a1 * AngleZoneJudgeRowR[i]) / 1000 - 2;  
      AngleZoneJudgeColRFlag[i] = 0;
      
      if(i == 5 - 1) break;
    }
    
    for(i = 0; ; i++)
    {
      
      countcol = 0;
      
      if(AngleZoneJudgeColR[i] - 70 / 2 < 0) 
      {
        return 0;
      }
      else
      {
      }      
      for(col = AngleZoneJudgeColR[i] - 70 / 2; ; col++) 
      {
        
        if(ImgNew[AngleZoneJudgeRowR[i]][col] < LimitRightB) countcol++;
        
        if(countcol >= 20)  
        {
          AngleZoneJudgeColRFlag[i] = 1;
          break;
        }
        
        if(col == AngleZoneJudgeColR[i]) break;
      }
      
      AngleZoneJudgeCountColR[i] = countcol;      
        
      
      if(i == 5 - 1) break;
    }
    
    count1 = 0;
    for(i = 0; ; i++)
    {
      if(AngleZoneJudgeColRFlag[i] == 1) count1++;
      
      if(i == 5 - 1) break;
    }
    if(count1 >= 2)
    {
      
      PathType = 10; 
      
      
      
      if(BlackLeftHeadLine == BlackRightHeadLine)
      {
      }
      
      else if(BlackLeftHeadLine < BlackRightHeadLine)
      {
        
        for(i = BlackLeftHeadLine; ; i++)
        {
          if(i == BlackRightHeadLine) break;
          
          BlackLeftLoc[i][0] = 255;
        }
        
        BlackLeftHeadLine = BlackRightHeadLine;
      }
      
      else
      {
        
        for(i = BlackRightHeadLine; ; i++)
        {
          if(i == BlackLeftHeadLine) break;
          
          BlackRightLoc[i][0] = 255;
        }
        
        BlackRightHeadLine = BlackLeftHeadLine;        
      }
            
      return 1;      
    }
    else
    {
      return 0;
    }
    
  }
  
  else
  {
  }
  
  
  return 0;
}



uint8 AngleZoneConfirm(void)
{
  
  uint8 i;
  
  
  if(AngleZoneConfirmLockFlag == 0)
  {
    
    for(i = 0; ; i++)
    {
      AngleZoneConfirmMat[i] = AngleZoneConfirmMat[i + 1];
      if(i == 6 - 2) break;
    }
    
    if(PathType == 10)
    {
      
      AngleZoneConfirmMat[6 - 1] = 1;
    }
    else
    {
      
      AngleZoneConfirmMat[6 - 1] = 0;
    }
    
    AngleZoneConfirmMatCollect = 0;
    for(i = 0; ; i++)
    {
      if(AngleZoneConfirmMat[i] == 1) AngleZoneConfirmMatCollect++;
      
      if(i == 6 - 1) break;
    }
    
    if(AngleZoneConfirmMatCollect >= AngleZoneConfirmMatLimit)
    {
      
      AngleZoneConfirmLockFlag = 1;
      
      AngleZoneConfirmLockMeterCount = 0;
      
      for(i = 0; ; i++)
      {
        AngleZoneConfirmMat[i] = 0;
        if(i == 6 - 1) break;
      }

      
    }
    else
    {
    }
  }
  
  else
  {
  }
  
  
  
  if(AngleZoneConfirmLockFlag == 1)
  {
    
    if(AbsInt(BlackLeftHeadLine - BlackRightHeadLine) < 4)
    {
      
      if(BlackLeftHeadLine == BlackRightHeadLine)
      {
      }
      
      else if(BlackLeftHeadLine < BlackRightHeadLine)
      {   
        
        for(i = BlackLeftHeadLine; ; i++)
        {
          if(i == BlackRightHeadLine) break;
          
          BlackLeftLoc[i][0] = 255;
        }
        
        BlackLeftHeadLine = BlackRightHeadLine;
      }
      
      else
      {
        
        for(i = BlackRightHeadLine; ; i++)
        {
          if(i == BlackLeftHeadLine) break;
          
          BlackRightLoc[i][0] = 255;
        }
        
        BlackRightHeadLine = BlackLeftHeadLine;        
      }
    }
    else
    {
    }
    
    
    
    
    
    
    if(AngleZoneConfirmLockFlag == 1)
    {
      if(PathType == 4 || PathType == 5 || PathType == 8 || PathType == 9)
      {
        
        AngleZoneConfirmLockMeterCount = 0;
      }
      else
      {
        AngleZoneConfirmLockMeterCount++;
        if(AngleZoneConfirmLockMeterCount > 40)
        {
          
          AngleZoneConfirmLockFlag = 0;
        }
        else
        {      
        }
      }
    }
    else
    {
    }
  }
  else
  {
  }

  
  return 1;

  
  
}




uint8 PathJudgeNew(void)
{
  
  
  PathType = 0;
  

  
  if(
    (AngleConfirmLockFlag == 1)   
  ||(AngleSpeDealFlag == 1)       
  ||(BrickConfirmLockFlag == 1)   
  ||(BrickSpeDealFlag == 1)       
  ||(GyroResultForbidFlag == 1)   
    )
  {
    
    PathRealStraightCount = 0;
    
    AngleZoneConfirmLockFlag = 0;
  }
  else
  {
    
    
    
    
    
    if(AngleZoneConfirmLockFlag == 0)
    {
      
      if(PathJudgeNewStraight() == 1)
      {
      }
      else
      {
      }

      
      
      
      if(PathType != 10)
      {
        BrickJudge();
      }
      
      else
      {

      }    
    }
    
    else
    {
      
      BrickJudge();
      
      if(PathType != 8 && PathType != 9)
      {
        
        
      }
      
      else
      {
      }      
      
    }
  }

  
  if(PathType == 1)
  {
    
    
    
    
    PathRealStraightCount++;
    
    if(PathRealStraightCount > PathRealStraightCountLimit)
    {
      
      PathRealStraightFlag = 1;
      
      PathRealStraightCount = 0;
    }
    else if(PathRealStraightCount > 5)
    {
        xiaoZhiDaoFlag = 1;
    }
    else
    {
    }
    
  }
  else
  {
    
    PathRealStraightCount = 0;
    
    PathRealStraightFlag = 0;
    xiaoZhiDaoFlag = 0;
  }
  
  
  
  
  



































      
      
      
      

























  
  return 1;
}



uint8 VariablesInit(void)
{
  uint8 i;
  
  LimitLeftWB = LimitLeftWBMin;    
  LimitLeftW  = LimitLeftWMin;      
  LimitLeftB  = LimitLeftBMax;      

  
  LimitLeftHeadWB = LimitLeftWBMin;    
  LimitLeftHeadW  = LimitLeftWMin;      
  LimitLeftHeadB  = LimitLeftBMax;
  
  LimitRightWB = LimitRightWBMin;    
  LimitRightW  = LimitRightWMin;      
  LimitRightB  = LimitRightBMax;      

  
  LimitRightHeadWB = LimitRightWBMin;    
  LimitRightHeadW = LimitRightWMin;      
  LimitRightHeadB = LimitRightBMax;  
  
  
  BlackLeftLastEdgeStartCol = 250/2 + SingleBlackWidthMax[60-1];
  BlackLeftEdgeStartCol = 250/2 + SingleBlackWidthMax[60-1];
  
  BlackRightLastEdgeStartCol = 250/2 - SingleBlackWidthMax[60-1]; 
  BlackRightEdgeStartCol = 250/2 - SingleBlackWidthMax[60-1];
  
  
  RoadHalfWidthSingle = SingleBlackWidthMax[60 - 1];
  
  
  for(i = 0; ; i++)
  {
    AngleConfirmMat[i] = 0;
    if(i == 6 - 1) break;
  }
  
  
  RoadHalfWidth = 100;
  RoadHalfWidthLast = RoadHalfWidth;
  
  return 1;
}



















uint8 ImageProParaInit(void)
{
  uint8 i;
  
  
  ImgBlackSucceedFlag = 1;
  ImgCenterSucceedFlag = 1;
  
  PathSmallSDoneFlag = 0;
   
  
  for(i = 0; ; i++)
  {
    CenterLineLoc[i] = 32767;
    if(i == 60 - 1) break;
  }

  
  for(i = 0; ; i++)
  {
    RoadHalfWidthRecord[i] = 255;
    if(i == 60 - 1) break;
  }
  
  
  RoadHalfWidthWrongFlag = 2;
  
  
  SingleDoneFlag = 0;       
  SingleFloorFlag = 0;            
  SingleFloorConfirmCount = 0;     
  SingleFloorConfirmCountMax = 0;

  
  for(i = 0; ; i++)
  {
    SingleBlackFlag[i] = 0;
    if(i == 60 - 1) break;
  }
  
  SingleBlackLastAllFlag = SingleBlackAllFlag;
  SingleBlackAllFlag = 0;
  
  
  BlackSingleFlag = 0;
  
  flag222 = 0;
  
  BrickLineCountNumRecord = 0;
  
  
  BlackBigChangeFinalCheckFlag = 0;
  
  
  for(i = 0; ; i++)
  {
    AngleZoneJudgeRowL[i] = 0;  
    AngleZoneJudgeRowR[i] = 0;  
    AngleZoneJudgeColL[i] = 0;  
    AngleZoneJudgeCountColL[i] = 0;
    AngleZoneJudgeColLFlag[i] = 0; 
    AngleZoneJudgeColR[i] = 0;  
    AngleZoneJudgeColRFlag[i] = 0; 
    AngleZoneJudgeCountColR[i] = 0;
    
    if(i == 5 - 1) break;   
  }
  
  
  BrickEndColL = 0;    
  BrickHeadColL = 0;   
  BrickBorderColL = 0; 
  BrickEndColR = 0;    
  BrickHeadColR = 0;   
  BrickBorderColR = 0; 
  BrickSpeDealCenFlag = 1;
  
  return 1;
  
}



uint8 ImgProSucceedDeal(void)
{
  uint8 startline;
  
  
  RoadHalfWidthLast = RoadHalfWidth;
  
  













 
  
  
  
  
  
  
  
  











 
       
   
  
  DeviationFuse();
  MtrGet();
  
  EmergencyStopCount = 0;
  
  
  
  BlackLeftLastEdgeStartCol = BlackLeftEdgeStartCol;
  BlackRightLastEdgeStartCol = BlackRightEdgeStartCol;









    
    if(CenterLineLoc[60-1] != 32767)
    {
      startline = CenterLineLoc[60-1];
    }
    
    else
    {
      
      
      startline = BlackCenEdgeStartCol;
    }

  
  
  BlackCenEdgeStartCol = BoundaryLimitRe(startline,
                                         30,
                                         220
                                         );
  
  if(SingleBlackLastAllFlag == 1)
  {
    
    
    BlackLeftEdgeStartCol = BoundaryLimitRe(MinRe(250 - 1, BlackCenEdgeStartCol + 2 * SingleBlackWidthMax[60-1]),
                                            0,
                                            250-1
                                            );
    
    
    BlackRightEdgeStartCol = BoundaryLimitRe(MaxRe(0, BlackCenEdgeStartCol - 2 * SingleBlackWidthMax[60-1]),
                                             0,
                                             250-1
                                            );        
  }
  
  else
  {
    
    if(BrickSpeDealFlag == 0)
    {
      
      
      BlackLeftEdgeStartCol = BoundaryLimitRe(MinRe(250 - 1, BlackCenEdgeStartCol + SingleBlackWidthMax[60-1]),
                                              0,
                                              250-1
                                              );
      
      
      BlackRightEdgeStartCol = BoundaryLimitRe(MaxRe(0, BlackCenEdgeStartCol - SingleBlackWidthMax[60-1]),
                                               0,
                                               250-1
                                              );    
    }
    
    else
    {
      
      if(BrickSpeDealDir == 0)
      {
        
        
        BlackLeftEdgeStartCol = BoundaryLimitRe(MinRe(250 - 1, BlackCenEdgeStartCol + 1),
                                                0,
                                                250-1
                                                );
        
        
        BlackRightEdgeStartCol = BoundaryLimitRe(MaxRe(0, BlackCenEdgeStartCol - 3 * SingleBlackWidthMax[60-1]),
                                                 0,
                                                 250-1
                                                );
        
        if(BlackRightLoc[60 - 1][0] != 255)
        {
          BlackRightEdgeStartCol = BoundaryLimitRe(MinRe(BlackRightEdgeStartCol, BlackRightLoc[60 - 1][0] - 3 * SingleBlackWidthMax[60-1]),
                                                  0,
                                                  250-1
                                                  );
        }
        else
        {
        }        
      }
      
      else
      {
        
        
        BlackLeftEdgeStartCol = BoundaryLimitRe(MinRe(250 - 1, BlackCenEdgeStartCol + 3 * SingleBlackWidthMax[60-1]),
                                                0,
                                                250-1
                                                );
        
        
        BlackRightEdgeStartCol = BoundaryLimitRe(MaxRe(0, BlackCenEdgeStartCol - 1),
                                                 0,
                                                 250-1
                                                );
        
        
        if(BlackLeftLoc[60 - 1][0] != 255)
        {
          BlackLeftEdgeStartCol = BoundaryLimitRe(MaxRe(BlackLeftEdgeStartCol, BlackLeftLoc[60 - 1][0] + 3 * SingleBlackWidthMax[60-1]),
                                                  0,
                                                  250-1
                                                  );
        }
        else
        {
        }
      }
    }
  }
  

  
  
  BlackRightEdgeStartCol = MinRe(BlackRightEdgeStartCol, BlackLeftEdgeStartCol);

  return 1;
}



uint8 ImgProFailDeal(void)
{
  uint8 startline;
  int tempB, tempW, tempWB;
  
  
  
  





 
  
  
  if(0 == 1)
  {
    
    EmergencyStopCount++;
    if(EmergencyStopCount > 15)
    {
      
      EmergencyStopCount = 0;
      
      EmergencyStopFlag = 1;
      
      
      ((((FTM_MemMapPtr)0x40038000u))->CONTROLS[4]. CnV) = 0;
      ((((FTM_MemMapPtr)0x40038000u))->CONTROLS[5]. CnV) = 0;
      ((((FTM_MemMapPtr)0x40038000u))->CONTROLS[6]. CnV) = 0;
      ((((FTM_MemMapPtr)0x40038000u))->CONTROLS[7]. CnV) = 0;
      
      while(1) ;
    }
    else
    {
      
    }
  }
  else
  {
    
  }
  
  
  if(RoadHalfWidthWrongFlag == 1 && AngleSpeDealFlag == 0)
  {
    
    if(RoadHalfWidthWrongDir == 0)
    {
      
      if(BlackLeftLoc[BlackLeftStep1ScanRow][0] != 255)
      {
        startline = BlackLeftLoc[BlackLeftStep1ScanRow][0];
      }
      else
      {
        startline = 250 / 2;
      }
    }
    
    else if(RoadHalfWidthWrongDir == 1)
    {
      
      if(BlackRightLoc[BlackRightStep1ScanRow][0] != 255)
      {
        startline = BlackRightLoc[BlackRightStep1ScanRow][0];
      }
      else
      {
        startline = 250 / 2;
      }            
    }
    else 
    {    
      
      startline = 250 / 2;
    }
    
    
    BlackCenEdgeStartCol = BoundaryLimitRe(startline,
                                           30,
                                           220
                                           );
    
    
    
    
    BlackLeftEdgeStartCol = BoundaryLimitRe(BlackCenEdgeStartCol + SingleBlackWidthMax[60-1],
                                            0,
                                            250-1
                                            );
    
    
    BlackRightEdgeStartCol = BoundaryLimitRe(BlackCenEdgeStartCol - SingleBlackWidthMax[60-1],
                                             0,
                                             250-1
                                            );
    
    
    BlackRightEdgeStartCol = MinRe(BlackRightEdgeStartCol, BlackLeftEdgeStartCol);
  }
  else
  {    
  }
  
  
  if(AngleSpeDealFlag == 0)
  {
    
    
    tempWB = LimitLeftHeadWB - 20 / 2; 
    if(tempWB < LimitLeftWBMin) tempWB = LimitLeftWBMin;
    else if(tempWB > LimitLeftWBMax) tempWB = LimitLeftWBMax;
    else ;
    LimitLeftHeadWB = tempWB;
    
    
    tempW = LimitLeftHeadW - 40 / 2;
    if(tempW < LimitLeftWMin) tempW = LimitLeftWMin;
    else if(tempW > LimitLeftWMax) tempW = LimitLeftWMax;
    else ;
    LimitLeftHeadW = tempW;
    
    
    tempB = LimitLeftHeadB + 35 / 2;
    if(tempB < LimitLeftBMin) tempB = LimitLeftBMin;
    else if(tempB > LimitLeftBMax) tempB = LimitLeftBMax;
    else ;
    
    if(tempB >= LimitLeftHeadW)
    {
      tempB = LimitLeftHeadW - 1;
    }
    else
    {
    }             
    LimitLeftHeadB = tempB;  
    
    
    
    
    tempWB = LimitRightHeadWB - 20 / 2; 
    if(tempWB < LimitRightWBMin) tempWB = LimitRightWBMin;
    else if(tempWB > LimitRightWBMax) tempWB = LimitRightWBMax;
    else ;
    LimitRightHeadWB = tempWB;
    
    
    tempW = LimitRightHeadW - 40 / 2;
    if(tempW < LimitRightWMin) tempW = LimitRightWMin;
    else if(tempW > LimitRightWMax) tempW = LimitRightWMax;
    else ;
    LimitRightHeadW = tempW;
    
    
    tempB = LimitRightHeadB + 35 / 2;
    if(tempB < LimitRightBMin) tempB = LimitRightBMin;
    else if(tempB > LimitRightBMax) tempB = LimitRightBMax;
    else ;
    
    if(tempB >= LimitRightHeadW)
    {
      tempB = LimitRightHeadW - 1;
    }
    else
    {
    }             
    LimitRightHeadB = tempB;  
  }
  else
  {
  }
  
  
  
  
  BlackLeftLastEdgeStartCol = BlackLeftEdgeStartCol;
  BlackRightLastEdgeStartCol = BlackRightEdgeStartCol;








  
  return 1;
}




uint8 GyroResultForbidSpeDeal(void)
{
  uint8 row;
  
  
  if(GyroResultForbidFlag == 1 && BlackLeftDone == 1 && BlackRightDone == 1 && BlackLeftHeadLine != 255 && BlackRightHeadLine != 255)
  {
    
    if(BlackLeftHeadLine > BlackRightHeadLine && BlackLeftHeadLine <= BlackRightHeadLine + 5)
    {
      
      for(row = BlackRightHeadLine; ; row++)
      {
        BlackRightLoc[row][0] = 255;
        
        if(row == BlackLeftHeadLine) break;
      }
      
      BlackRightHeadLine = BlackLeftHeadLine;
    }
    
    else if(BlackRightHeadLine > BlackLeftHeadLine && BlackRightHeadLine <= BlackLeftHeadLine + 5)
    {
      
      for(row = BlackLeftHeadLine; ; row++)
      {
        BlackLeftLoc[row][0] = 255;
        
        if(row == BlackRightHeadLine) break;
      }
      
      BlackLeftHeadLine = BlackRightHeadLine;
    }
    
    else
    {
    }
  }
  else
  {
  }
  
  
  return 1;
}












uint8 ImagePro(void)
{
    ErrorCountNow5++;
  
    
    ImgPut();

    
    ImageProParaInit();
   
    
    if(BlackGet() == 0)
    {
        
        CenterLineResult = 0;
        PathJudgeDone = 0;             
        PathType = 0;    
        ImgBlackSucceedFlag = 0;
    }
    
    else
    {
    }

    
    
    PathJudgeNew();
    
    
    
    
    
    BrickAvoid();
    
    
    GyroResultForbidSpeDeal();
 
    
    
    
    CenterLineResult = 1;
    if(ImgBlackSucceedFlag == 0 || CenterLineGetRaw() == 0)
    {
      
      CenterHeadLine = 255;
      CenterEndLine = 255;
      CenterLineResult = 0; 
      PathJudgeDone = 0;   
      PathType = 0;        
      ImgCenterSucceedFlag = 0;
    }
    else
    {
    }
    
    
    if(ImgBlackSucceedFlag == 1 && ImgCenterSucceedFlag == 1)
    {
      ((((GPIO_MemMapPtr)0x400FF000u))->PDOR) |= (1<<17);
      ImgProSucceedFlag = 1;
    }
    else
    {
      ((((GPIO_MemMapPtr)0x400FF000u))->PDOR) &= ~(1<<17);
      ImgProSucceedFlag = 0;
    }
   
    
    if(ImgProSucceedFlag == 1)
    {
      
      ImgProSucceedDeal();
    }
    else
    {
      
      ImgProFailDeal();
    }
    
    
    









 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    return ImgProSucceedFlag;
}




void ImgSendPut(void)
{
    uint16 i, j, k, temp1, temp2;   
    
    temp1 = CameraRealLeftCol;
    temp2 = CameraRealLeftCol + 250;
    
    
    
    for(i = 0; i < 60; i++)
    {
      k = 0;
      for(j = temp1; j < temp2; j++)
      {
        ImgNew[i][k] = ImgRaw[i][j];
        k++;
      }
    }
}


uint8 ImageSend(void)
{
    
    ImgPut();
    
    
    SendImage(ImgNew);      
    
    return 1;
}

