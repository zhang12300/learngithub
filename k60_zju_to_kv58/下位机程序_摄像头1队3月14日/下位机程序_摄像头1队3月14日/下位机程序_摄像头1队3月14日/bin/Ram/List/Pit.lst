###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       01/Sep/2018  17:30:39
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\C\Component_C\Pit.c
#    Command line =  
#        -f C:\Users\Lenovo\AppData\Local\Temp\EW6E2F.tmp
#        (C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\C\Component_C\Pit.c
#        -D IAR -D TWR_K60N512 --preprocess
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List
#        -lCN
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List
#        -lB
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List
#        -o
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\Component_H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\Frame_H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\Function_H\
#        -I
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\H\SD_H\
#        -I D:\quartus\quartus\cusp\80\synthinclude\ -Ol --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\List\Pit.lst
#    Object file  =  
#        C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\bin\Ram\Obj\Pit.o
#
###############################################################################

C:\Users\Lenovo\Desktop\class3\@@@@@_@@@1@3@14@\@@@@@_@@@1@3@14@\src\Sources\C\Component_C\Pit.c
      1          //文件名称：Pit.c
      2          //功能概要：K60 pit底层驱动程序文件
      3          //版权所有：JYB
      4          //版本更新：2013-12-16  V1.0  初始版本
      5          //==============================================================================   
      6          #include "Pit.h"
      7          
      8          /*==============================================================================
      9            周期定时器PIT说明：
     10            周期中断定时器模块PIT是一组可以用来产生中断和触发DMA通道的定时器
     11            共有PIT0~PIT3四个通道，对应的IRQ中断号为68~71
     12            PIT模块配置包括以下寄存器：
     13            1、PIT模块控制寄存器PIT_MCR
     14            2、定时器加载值寄存器PIT_LDVALn
     15            3、当前定时器值寄存器PIT_CVALn
     16            4、定时器控制寄存器PIT_TCTRLn
     17            5、定时器标志寄存器PIT_TFLGn
     18          
     19            若要使能PIT模块工作，要设置以下几个寄存器
     20            1、SIM_SCGC6开启门控之中
     21            2、PIT_MCR的MDIS=0，使能模块时钟（必须在其他设置完成之前使能）
     22          
     23            PIT模块是采用减法计时的，加载值存储在寄存器PIT_CVALn中，每当定时器递减计数至0，
     24            将产生一个脉冲触发标志位TIF。
     25          
     26            如果想在调试模式下禁止PIT模块，则需设置PIT_MCR中的FRZ=1。在软件开发中，允许开发
     27            者停止计时器，查看系统当前状态，然后继续操作。
     28          
     29            定时器值寄存器PIT_CVALn中的值时可以随时读取的
     30          
     31            若想开启定时器开始计数，则需设置PIT_TCTRL中的TEN=1
     32          
     33            关于PIT模块中断的设置，需要考虑以下两个寄存器
     34            1、PIT_TCTRL中的中断使能标志位TIE=1
     35            2、开启相应的IRQ中断号的通道中断
     36            此时，如果计数器计数到0，便会触发并置位中断标志位，进入中断。别忘了在中断服务
     37            函数中清零标志位。清零方法是向该位写入1。
     38          
     39            PIT模块的时钟源:periph_clk_khz
     40                                                                             -----By JYB
     41          ==============================================================================*/
     42          
     43          //==============================================================================
     44          //函数名称: pit_init                                                         
     45          //函数返回: 无                                          
     46          //参数说明: pitno:表示pit通道号。  
     47          //	        timeout:表示定时溢出开始递减的值,该PIT计数使用总线时钟          
     48          //功能概要: 初始化PIT        
     49          //==============================================================================
     50          void pit_init(uint8 pitno,uint32 timeout)
     51          {
     52            SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;              //使能PIT时钟
     53            PIT_MCR &= ~(PIT_MCR_MDIS_MASK);              //使能PIT模块时钟
     54            PIT_MCR |= PIT_MCR_FRZ_MASK;                  //调试模式下禁止
     55            PIT_LDVAL(pitno) = timeout;                   //设置周期
     56            PIT_TCTRL(pitno) |= PIT_TCTRL_TEN_MASK;       //使能pit模块运行
     57            PIT_TCTRL(pitno) &= ~(PIT_TCTRL_TIE_MASK);    //关pit中断
     58          }
     59              
     60          //==============================================================================
     61          //函数名称: enable_pit_interrupt                                                     
     62          //函数返回: 无                                              
     63          //参数说明: pitno: 表示pit通道号      
     64          //功能概要: 开启PIT的IRQ中断                                                                                                     
     65          //==============================================================================
     66          void enable_pit_interrupt(uint8 pitno)
     67          {
     68            PIT_TCTRL(pitno)|=(PIT_TCTRL_TIE_MASK); //开pit中断
     69            switch(pitno)
     70            {
     71              case 0:
     72              enable_irq(68);			      //开接收引脚的IRQ中断
     73              break;
     74              case 1:
     75              enable_irq(69);			      //开接收引脚的IRQ中断
     76              break;
     77              case 2:
     78              enable_irq(70);			      //开接收引脚的IRQ中断
     79              break;
     80              case 3:
     81              enable_irq(71);			      //开接收引脚的IRQ中断
     82              break;
     83            }
     84          }
     85          
     86          //==============================================================================
     87          //函数名称: disable_pit_interrupt                                                     
     88          //函数返回: 无                                              
     89          //参数说明: pitno: 表示pit通道号      
     90          //功能概要: 关闭PIT的IRQ中断                                                                                               
     91          //==============================================================================
     92          void disable_pit_interrupt(uint8 pitno)
     93          {
     94            PIT_TCTRL(pitno)&=~(PIT_TCTRL_TIE_MASK);  //关pit中断
     95            switch(pitno)
     96            {
     97              case 0:
     98              disable_irq(68);	        //关接收引脚的IRQ中断
     99              break;
    100              case 1:
    101              disable_irq(69);		      //关接收引脚的IRQ中断
    102              break;
    103              case 2:
    104              disable_irq(70);		      //关接收引脚的IRQ中断
    105              break;
    106              case 3:
    107              disable_irq(71);		      //关接收引脚的IRQ中断
    108              break;
    109            }
    110          }

Errors: 1
Warnings: 1
